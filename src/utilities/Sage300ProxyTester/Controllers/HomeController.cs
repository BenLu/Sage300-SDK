// The MIT License (MIT) 
// Copyright (c) 2024 The Sage Group plc or its licensors.  All rights reserved.
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of 
// this software and associated documentation files (the "Software"), to deal in 
// the Software without restriction, including without limitation the rights to use, 
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the 
// Software, and to permit persons to whom the Software is furnished to do so, 
// subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all 
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#region Imports
using Newtonsoft.Json;
using Sage.CA.SBS.ERP.Sage300.ProxyTester.Models;
using Sage.CA.SBS.ERP.Sage300.ProxyTester.Utility;
using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Web.Mvc;
#endregion

namespace Sage.CA.SBS.ERP.Sage300.ProxyTester.Controllers
{
    public class HomeController : Controller
    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public HomeController()
        {
        }

        public ActionResult Index()
        {
            return View(new Models.ProxyTesterViewModel());
        }

        [HttpPost]
        public async Task<ActionResult> TheForm(ProxyTesterViewModel model)
        {
            if (ModelState.IsValid)
            {
                var urls = BuildRequestUrl(model);
                model.PublicKeyUrl = urls.PublicKeyUrl;
                model.MenuUrl = urls.MenuUrl;
                model.ScreenUrl = urls.ScreenUrl;

                // Encrypt credentials with Elliptic-curve Diffie-Hellman public key encryption 
                byte[] privateKey, publicKey, iv;
                EllipticCurveDiffieHellman.CreateKeyPair(out privateKey, out publicKey);

                using (var httpClient = new HttpClient())
                {
                    // Get get a new public key from the server for every request. This does not need to be stored
                    var keyUrl = urls.PublicKeyUrl;
                    var getPublicKeyRequest = new HttpRequestMessage(HttpMethod.Get, keyUrl);
                    var getPublicKeyResponse = await httpClient.SendAsync(getPublicKeyRequest);
                    if (getPublicKeyResponse.IsSuccessStatusCode)
                    {
                        var serverPublicKey = await getPublicKeyResponse.Content.ReadAsStringAsync();
                        var credentials = new
                        {
                            model.User,
                            model.Password,
                            model.Company
                        };
                        // Sage 300 Web Screens proxy endpoint expects 3 headers: Credentials, PublicKey, and IV
                        // where Credentials are the encrypted Username, Password, and Company,
                        // PublicKey is the ECDH public key generated by the client,
                        // and IV is the IV from the encryption
                        model.Credentials = EllipticCurveDiffieHellman.Encrypt(JsonConvert.SerializeObject(credentials) + "", privateKey, Convert.FromBase64String(serverPublicKey), out iv);
                        model.PublicKey = Convert.ToBase64String(publicKey);
                        model.IV = Convert.ToBase64String(iv);
                    }
                }
            }

            return View("Index", model);
        }


        private static string BuildServerAndPort(string server, int port)
        {
            const int DEFAULT_HTTP_PORT = 80;
            var result = string.Empty;
            if (String.IsNullOrEmpty(server))
            {
                throw new ArgumentNullException("Server name not specified.");
            }
            result = server;
            if (port != DEFAULT_HTTP_PORT)
            {
                result += $":{port}";
            }
            return result;
        }

        private ProxyTesterViewModel BuildRequestUrl(ProxyTesterViewModel model)
        {
            // var sessionId = Convert.ToBase64String(Encoding.UTF8.GetBytes(model.User + "-" + model.Company)).Replace("=", string.Empty);
            var rootUrl = $"OnPremise/Core/Authentication/";
            var publicKeyUrl = rootUrl + "ProxyPublicKey";
            var menuUrl = rootUrl + "ProxyMenu";
            var screenUrl = rootUrl + "ProxyScreen";

            // Server Information
            var protocol = "http" + (model.UseHttps ? "s" : "");
            var serverAndPort = BuildServerAndPort(model.Server, model.Port);
            var url = $"{protocol}://{serverAndPort}";

            var module = model.ModuleId?.Trim();
            var controller = model.Controller?.Trim();
            var action = model.Action?.Trim();
            var extraParameters = model.OptionalParameters?.Trim();
            var appUrl = $"{module}/{controller}/{action}" + (string.IsNullOrEmpty(extraParameters) ? $"{extraParameters}" : "null");
            
            var token = string.Empty;

            model.PublicKeyUrl = $"{url}/{publicKeyUrl}";
            model.MenuUrl = $"{url}/{menuUrl}?" + Server.UrlEncode($"token={token}&module={module}");
            model.ScreenUrl = $"{url}/{screenUrl}?" + Server.UrlEncode($"token{token}&appUrl{appUrl}");

            return model;
        }

    }
}