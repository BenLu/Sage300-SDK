<# /* The MIT License (MIT) */ #>
<# /* Copyright (c) 1994-2021 The Sage Group plc or its licensors.  All rights reserved. */ #>
<# /* */ #>
<# /* Permission is hereby granted, free of charge, to any person obtaining a copy of */ #>
<# /* this software and associated documentation files (the "Software"), to deal in */ #>
<# /* the Software without restriction, including without limitation the rights to use, */ #>
<# /* copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the */ #>
<# /* Software, and to permit persons to whom the Software is furnished to do so, */ #>
<# /* subject to the following conditions: */ #>
<# /* */ #>
<# /* The above copyright notice and this permission notice shall be included in all */ #>
<# /* copies or substantial portions of the Software. */ #>
<# /* */ #>
<# /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, */ #>
<# /* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A */ #>
<# /* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT */ #>
<# /* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF */ #>
<# /* CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE */ #>
<# /* OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */ #>
<#@ template language="C#" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
    // Locals
    var entityName = view.Properties[BusinessView.Constants.EntityName];
    var localEntityName = entityName.Substring(0, 1).ToLower() + entityName.Substring(1);
    var moduleId = view.Properties[BusinessView.Constants.ModuleId];
    var copyright = settings.Copyright;
	if (settings.RepositoryType.Equals(RepositoryType.HeaderDetail))
    {
        entityName = settings.EntitiesContainerName;
    }
#>
/* <#=copyright#> */

// Enable the following commented line to enable TypeScript static type checking
// @ts-check

"use strict";

// Ajax call to controller
var <#=localEntityName#>Ajax = {

    /**
     * @function
     * @name call
     * @description Common function used to invoke ajax calls
     * @namespace <#=localEntityName#>Ajax
     * @public 
     *  
     * @param {string} method The method to invoke
     * @param {object} data The data for the method call
     * @param {Function} callbackMethod The callback that's called on successful ajax post
     */
    call: function (method, data, callbackMethod) {
        var url = sg.utls.url.buildUrl("<#=moduleId#>", "<#=entityName#>", method);
        sg.utls.ajaxPost(url, data, callbackMethod);
    }
};

var <#=localEntityName#>Repository = {

    /**
     * @function
     * @name get
     * @description get call
     * @namespace <#=localEntityName#>Repository
     * @public
     *
     * @param {string} id The key specifier
     * @param {Function} callbackMethod The callback that's called on successful ajax post
     */
    get: function(id, callbackMethod) {
        var data = { 'id': id };
        <#=localEntityName#>Ajax.call("Get", data, callbackMethod);
    },

    /**
     * @function
     * @name create
     * @description create call
     * @namespace <#=localEntityName#>Repository
     * @public
     *
     * @param {Function} callbackMethod The callback that's called on successful ajax post
     */
    create: function(callbackMethod) {
        var data = {};
        <#=localEntityName#>Ajax.call("Create", data, callbackMethod);
    },

    /**
     * @function
     * @name delete
     * @description delete call
     * @namespace <#=localEntityName#>Repository
     * @public
     *
     * @param {string} id The key specifier
     * @param {Function} callbackMethod The callback that's called on successful ajax post
     */
    delete: function(id, callbackMethod) {
        var data = { 'id': id };
        <#=localEntityName#>Ajax.call("Delete", data, callbackMethod);
    },

    /**
     * @function
     * @name add
     * @description add call
     * @namespace <#=localEntityName#>Repository
     * @public
     *
     * @param {object} data The entity data object
     * @param {Function} callbackMethod The callback that's called on successful ajax post
     */
    add: function(data, callbackMethod) {
        <#=localEntityName#>Ajax.call("Add", data, callbackMethod);
    },

    /**
     * @function
     * @name update
     * @description update call
     * @namespace <#=localEntityName#>Repository
     * @public
     *
     * @param {object} data The entity data object
     * @param {Function} callbackMethod The callback that's called on successful ajax post
     */
    update: function(data, callbackMethod) {
        <#=localEntityName#>Ajax.call("Save", data, callbackMethod);
    },

    /**
     * @function
     * @name post
     * @description post call
     * @namespace <#=localEntityName#>Repository
     * @public
     *
     * @param {Function} callbackMethod The callback that's called on successful ajax post
     */
    post: function(callbackMethod) {
        <#=localEntityName#>Ajax.call("Post", null, callbackMethod);
    }

    // Additional methods go here
};