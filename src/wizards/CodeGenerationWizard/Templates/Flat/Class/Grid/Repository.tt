<# /* The MIT License (MIT) */ #>
<# /* Copyright (c) 1994-2022 The Sage Group plc or its licensors.  All rights reserved. */ #>
<# /* */ #>
<# /* Permission is hereby granted, free of charge, to any person obtaining a copy of */ #>
<# /* this software and associated documentation files (the "Software"), to deal in */ #>
<# /* the Software without restriction, including without limitation the rights to use, */ #>
<# /* copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the */ #>
<# /* Software, and to permit persons to whom the Software is furnished to do so, */ #>
<# /* subject to the following conditions: */ #>
<# /* */ #>
<# /* The above copyright notice and this permission notice shall be included in all */ #>
<# /* copies or substantial portions of the Software. */ #>
<# /* */ #>
<# /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, */ #>
<# /* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A */ #>
<# /* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT */ #>
<# /* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF */ #>
<# /* CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE */ #>
<# /* OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */ #>
<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
   // Locals
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var companyNamespace = settings.CompanyNamespace;
    var modelName = view.Properties[BusinessView.Constants.ModelName];
    var entityName = view.Properties[BusinessView.Constants.EntityName];

    // Specific payroll logic since CP and UP are now dynamically assigned
    var entityContext = @""" + moduleId + @""";
    if (moduleId == "PR")
    {
         // Will be resolved at runtime
		 entityContext = "Context.ScreenContext.EntityContext";
    }
#>
// <#=copyright#>

#region Namespace

using System;
using System.Linq.Expressions;
using Sage.CA.SBS.ERP.Sage300.Common.BusinessRepository;
using Sage.CA.SBS.ERP.Sage300.Common.BusinessRepository.Base;
using Sage.CA.SBS.ERP.Sage300.Common.Interfaces.Entity;
using Sage.CA.SBS.ERP.Sage300.Common.Models;
using Sage.CA.SBS.ERP.Sage300.Common.Utilities;
using Sage.CA.SBS.ERP.Sage300.Common.Models.Enums;
using Sage.CA.SBS.ERP.Sage300.Common.Models.Enums.ExportImport;
using Sage.CA.SBS.ERP.Sage300.Common.Models.ExportImport;
using <#=companyNamespace#>.<#=moduleId#>.BusinessRepository.Mappers;
using <#=companyNamespace#>.<#=moduleId#>.Interfaces.BusinessRepository;
using <#=companyNamespace#>.<#=moduleId#>.Models;

#endregion

namespace <#=companyNamespace#>.<#=moduleId#>.BusinessRepository
{
    /// <summary>
    /// Class <#=entityName#> Repository
    /// </summary>
    public class <#=entityName#>Repository : BaseHeaderDetailRepository, I<#=entityName#>Repository
    {
        #region Variables

        /// <summary>
        /// Business Entity
        /// </summary>
        private IBusinessEntity _businessEntity;

        #endregion

        #region Constructor

		/// <summary>
        /// Sets Context and DBLink
        /// </summary>
        /// <param name="context">Context</param>
        public <#=entityName#>Repository(Context context):base(context)
        {
            CreateBusinessEntities();
        }

        #endregion

        #region Protected/public methods

        /// <summary>
        /// Additional Access Check for Export and Import
        /// </summary>
        /// <returns>User Access</returns>
        public UserAccess GetAccessRights()
        {
            var userAccess = base.GetAccessRights(_businessEntity);
            if (SecurityCheck(<#=entityContext#> + "Import"))
            {
                userAccess.SecurityType |= SecurityType.Import;
            }
            if (SecurityCheck(<#=entityContext#> + "Export"))
            {
                userAccess.SecurityType |= SecurityType.Export;
            }
            return userAccess;
        }

         /// <summary>
        /// Open business entity
        /// </summary>
        protected override void CreateBusinessEntities()
		{
            _businessEntity = OpenEntity(<#=modelName#>.EntityName, true);
        }

		/// <summary>
        /// commit revision list to database 
        /// </summary>
        public void Post()
        {
            _businessEntity.Post();
        }


        #endregion

        #region Import/Export methods

        /// <summary>
        /// Get export or import business entity property
        /// </summary>
        /// <param name="option">export/import option, default to null</param>
        /// <param name="isExport">true if for export, default to false</param>
        /// <returns>Business Entity Property</returns>
        public override BusinessEntityProperty GetExportImportBusinessEntityProperty(string option = null, bool isExport = false)
        {
            return new BusinessEntityProperty(CommonUtil.EntityContextReplacement(<#=modelName#>.EntityName, Context.ScreenContext.EntityContext), ViewKeyType.UserSpecified);
        }

        #endregion
    }
}