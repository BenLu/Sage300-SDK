<# /* The MIT License (MIT) */ #>
<# /* Copyright (c) 1994-2020 The Sage Group plc or its licensors.  All rights reserved. */ #>
<# /* */ #>
<# /* Permission is hereby granted, free of charge, to any person obtaining a copy of */ #>
<# /* this software and associated documentation files (the "Software"), to deal in */ #>
<# /* the Software without restriction, including without limitation the rights to use, */ #>
<# /* copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the */ #>
<# /* Software, and to permit persons to whom the Software is furnished to do so, */ #>
<# /* subject to the following conditions: */ #>
<# /* */ #>
<# /* The above copyright notice and this permission notice shall be included in all */ #>
<# /* copies or substantial portions of the Software. */ #>
<# /* */ #>
<# /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, */ #>
<# /* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A */ #>
<# /* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT */ #>
<# /* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF */ #>
<# /* CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE */ #>
<# /* OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */ #>
<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
    // Locals
    var entityName = view.Properties[BusinessView.Constants.EntityName];
    var resxName = view.Properties[BusinessView.Constants.ResxName];
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var companyNamespace = settings.CompanyNamespace;
    var keyFieldName = view.Keys.FirstOrDefault();
    var modelName = view.Properties[BusinessView.Constants.ModelName];

    var webModuleNamespace = (settings.DoesAreasExist ? (settings.WebProjectIncludesModule ? moduleId + "." : string.Empty) + 
	"Web.Areas." + moduleId : moduleId + ".Web");

    var xmlLayout = settings.XmlLayout;
#>
@* <#=copyright#> *@
<#
if (view.Options[BusinessView.Constants.GenerateGrid])
{
#>
	@model <#=companyNamespace#>.<#=webModuleNamespace#>.Models.<#=entityName#>ViewModel
<#
}
else
{
#>
	@model <#=companyNamespace#>.<#=webModuleNamespace#>.Models.<#=entityName#>ViewModel<<#=companyNamespace#>.<#=moduleId#>.Models.<#=modelName#>>
<#
}
#>

@using <#=resxName#> = <#=companyNamespace#>.<#=moduleId#>.Resources.Forms.<#=resxName#>
@using <#=companyNamespace#>.<#=moduleId#>.Web.Areas.<#=moduleId#>.Constants

@using Sage.CA.SBS.ERP.Sage300.Common.Web.AreaConstants
@using Sage.CA.SBS.ERP.Sage300.Common.Resources
@using Sage.CA.SBS.ERP.Sage300.Common.Web.HtmlHelperExtension
@using Sage.CA.SBS.ERP.Sage300.Common.Models.Enums
@using AnnotationsResx = Sage.CA.SBS.ERP.Sage300.Common.Resources.AnnotationsResx

<script type="text/javascript">
    @Html.ConvertToJsVariableUsingNewtonSoft("<#=entityName#>ViewModel", Model)
</script>

@Html.Partial("~/Areas/<#=moduleId#>/Views/<#=entityName#>/Partials/_Localization.cshtml")

<div id="success" class="message"></div>

<div class="form-screen">
    <div id="message"></div>
    <header>
        <section class="header-group-1">
            <div class="header-wrapper">
                <div class="header-headline">
                    @Html.SageHeader1Label("<#=entityName#>Header", <#=resxName#>.Entity)
                </div>
                @Html.Partial(Core.OptionsMenu, Model.UserAccess, new ViewDataDictionary { { OptionsMenu.UseLessCss, true } })	
	<#
	if (!view.Options[BusinessView.Constants.GenerateGrid])
	{
    #>
			<div class="header-options">
                    @if (Model.UserAccess.SecurityType.HasFlag(SecurityType.Modify))
                    {
                        @Html.KoSageButton("btnNew", null, new { @value = CommonResx.CreateNew, @id = "btnNew", @class = "btn btn-primary" })
                    }
                </div>
<#
}
#>
            </div>
            <div class="flag-required">
                <span class="req-option">@CommonResx.RequiredLegend</span>
            </div>
        </section>
    </header>
    <#
        if (xmlLayout == null)
        {
            WriteLine(new string(' ', 4) + "<div class=\"form-group\">");
        }
    #>

	<# 
	if (view.Options[BusinessView.Constants.GenerateGrid])
	{
		var gridName = entityName.Substring(0, 1).ToLower() +  entityName.Substring(1);
		WriteLine("@Html.SageGrid(\"{0}Grid\", (Sage.CA.SBS.ERP.Sage300.Common.Models.GridDefinition)@ViewBag.{1}Grid)", gridName, view.Properties[BusinessView.Constants.EntityName]);
	}
    else if (xmlLayout != null)
    {
        // XML Layout has been specified and therefore generate layout using this instead of generating
        // only the key field

        // Counter for indentation
        int depth = 0;

        // Get first element and proceed if there are elements specified
        var element = xmlLayout.Root.Descendants().First();

        // Iterate xml and apply snippets directly to template
        if (element.HasElements)
        {
            // Recursion
            ReadXMLRecursion(depth, element);
        }
    }
	else
	{
    #>
		<div class="search-group">
            @Html.SageLabelFor(model => model.Data.<#=keyFieldName#>, new { @id = "lbl<#=keyFieldName#>", @class = "required" })
            @Html.KoSageTextBoxFor(model => model.Data.<#=keyFieldName#>, new { @sagevalue = "Data.<#=keyFieldName#>", @valueUpdate = "'input'" }, new { @id = "txt<#=keyFieldName#>", @class = "default", @formatTextbox = "alphaNumeric" })
            @Html.KoSageButton("btnLoad<#=keyFieldName#>", null, new { @id = "btnLoad", @class = "icon btn-go", @tabindex = "-1" })
            @Html.KoSageButton("btnFinder<#=keyFieldName#>", null, new { @class = "icon btn-search", @id = "btnFinder<#=keyFieldName#>", @tabindex = "-1" })
            @Html.ValidationMessageFor(model => model.Data.<#=keyFieldName#>)
        </div>
	<#
	}
	#>
    <#
        if (xmlLayout == null)
        {
            WriteLine(new string(' ', 4) + "</div>");
        }
    #>

    <section class="footer-group-1">
        @if (Model.UserAccess.SecurityType.HasFlag(SecurityType.Modify))
        {
            @Html.KoSageButton("btnSave", new { }, new { @value = CommonResx.Save, @id = "btnSave", @class = "btn btn-primary" })

    <#
	if (!view.Options[BusinessView.Constants.GenerateGrid])
	{
    #>
			@Html.KoSageButton("btnDelete", new { }, new { @value = CommonResx.Delete, @id = "btnDelete", @class = "btn btn-primary" })
	<#
	}
	#>
      }
    </section>
</div>
<#+
    // Class Feature Block in T4
    private void ReadXMLRecursion(int depth, XElement element)
    {
        // Local references
        bool rowStarted = false;
        depth++;

        // Iterate elements
        foreach (var controlElement in element.Elements())
        {
            // If row is found
            if (controlElement.Attribute("newRow").Value.Equals("true"))
            {
                // If new row is for a tab, then remove the class from the div
                var className = "class=\"form-group\"";
                if (controlElement.HasElements)
                {
                    var tabElement = controlElement.Descendants().First();
                    if (tabElement != null && tabElement.HasElements)
                    {
                        if (tabElement.Elements().First().Attribute("widget").Value.Equals("Tab"))
                        {
                            className = "";
                        }
                    }
                }

                WriteLine(new string(' ', depth * 4) + "<div " + className + ">");
                rowStarted = true;
            }
            else if (controlElement.Attribute("widget").Value.Equals("Finder"))
            {
                // Search Snippet
                // var entity = controlElement.Attribute("entity").Value;
                var property = controlElement.Attribute("property").Value;

                WriteLine(new string(' ', depth * 4) + "<div class=\"search-group\">");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.SageLabelFor(model => model.Data." + property + ", new { @id = \"lbl" + property + "\", @class = \"required\" })");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.KoSageTextBoxFor(model => model.Data." + property + ", new { @sagevalue = \"Data." + property + "\", @valueUpdate = \"'input'\" }, new { @id = \"txt" + property + "\", @class = \"default\", @formatTextbox = \"alphaNumeric\" })");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.KoSageButton(\"btnLoad" + property + "\", null, new { @id = \"btnLoad\", @class = \"icon btn-go\", @tabindex = \" - 1\" })");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.KoSageButton(\"btnFinder" + property + "\", null, new { @class = \"icon btn-search\", @id = \"btnFinder" + property + "\", @tabindex = \" - 1\" })");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.ValidationMessageFor(model => model.Data." + property + ")");
                WriteLine(new string(' ', depth * 4) + "</div>");
            }
            else if (controlElement.Attribute("widget").Value.Equals("Textbox"))
            {
                // Input Snippet
                var property = controlElement.Attribute("property").Value;

                WriteLine(new string(' ', depth * 4) + "<div class=\"input-group\">");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.SageLabelFor(model => model.Data." + property + ")");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.KoSageTextBoxFor(model => model.Data." + property + ", new { @value = \"Data." + property + "\", @valueUpdate = \"'input'\" }, new { @id = \"txt" + property + "\", @class = \"large\" })");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.ValidationMessageFor(model => model.Data." + property + ", null, new { @class = \"\" })");
                WriteLine(new string(' ', depth * 4) + "</div>");
            }
            else if (controlElement.Attribute("widget").Value.Equals("Dropdown"))
            {
                // Dropdown Snippet
                var property = controlElement.Attribute("property").Value;

                WriteLine(new string(' ', depth * 4) + "<div class=\"dropdown-group\">");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.SageLabelFor(model => model.Data." + property + ")");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.KoSageDropDownList(\"ddl" + property + "\", new { @options = \"Get" + property + "\", @value = \"Data." + property + "\", @optionsText = \"'Text'\", @optionsValue = \"'Value'\" , @disable = \"Data.HasModifyAccess\" }, new { @id = \"ddl" + property + "\", @class = \"default\" })");
                WriteLine(new string(' ', depth * 4) + "</div>");
            }
            else if (controlElement.Attribute("widget").Value.Equals("DateTime"))
            {
                // Datepicker Snippet
                // var entity = controlElement.Attribute("entity").Value;
                var property = controlElement.Attribute("property").Value;

                WriteLine(new string(' ', depth * 4) + "<div class=\"datepicker-group\">");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.SageLabelFor(model => model.Data." + property + ")");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.KoSageTextBoxFor(model => model.Data." + property + ", new { @sageDatePicker = \"Data." + property + "\", @sagedisable = \"Data.Is" + property + "Disabled\" }, new { @id = \"txt" + property + "\", @class = \"datepicker default\" })");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.ValidationMessageFor(model => model.Data." + property + ")");
                WriteLine(new string(' ', depth * 4) + "</div>");
            }
            else if (controlElement.Attribute("widget").Value.Equals("Checkbox"))
            {
                // Checkbox Snippet
                // var entity = controlElement.Attribute("entity").Value;
                var property = controlElement.Attribute("property").Value;

                WriteLine(new string(' ', depth * 4) + "<div class=\"ctrl-group\">");
                WriteLine(new string(' ', (depth + 1) * 4) + "<div class=\"child\">");
                WriteLine(new string(' ', (depth + 2) * 4) + "@Html.KoSageCheckBoxFor(model => model.Data." + property + ", new { @sagechecked = \"Data." + property + "\", @sagedisable = \"Data.Is" + property + "Disabled\"} , new { @id = \"chk" + property + "\", @autofocus = \"autofocus\" })");
                WriteLine(new string(' ', (depth + 2) * 4) + "@Html.SageLabelFor(model => model.Data." + property + ", new { @class = \"checkBox-info\" })");
                WriteLine(new string(' ', (depth + 1) * 4) + "</div>");
                WriteLine(new string(' ', depth * 4) + "</div>");
            }
            else if (controlElement.Attribute("widget").Value.Equals("RadioButtons"))
            {
                // Radio Buttons Snippet
                // var entity = controlElement.Attribute("entity").Value;
                var property = controlElement.Attribute("property").Value;
                var enumHelper = view.Enums[property];
                var enumName = enumHelper.Name;
                var resxName = view.Properties[BusinessView.Constants.ResxName];

                WriteLine(new string(' ', depth * 4) + "<div class=\"sub-section\">");
                WriteLine(new string(' ', (depth + 1) * 4) + "<div class=\"section-heading\">");
                WriteLine(new string(' ', (depth + 2) * 4) + "<h3>@Html.SageLabelFor(model => model.Data." + property + ")</h3>");
                WriteLine(new string(' ', (depth + 1) * 4) + "</div>");
                WriteLine(new string(' ', (depth + 1) * 4) + "<div class=\"section-body\">");
                WriteLine(new string(' ', (depth + 2) * 4) + "<div class=\"ctrl-group ctrl-group-inline ctrl-group-inline-lg\">");

                foreach (var value in enumHelper.Values)
                {
                    // Locals - Used to split out prefix and replace invalid characters
                    var tmp = value.Key.Split(':');
                    var valueName = tmp[1];
                    if (!settings.ResourceKeys.Contains(valueName))
				    {
					    valueName = settings.ResourceKeys.FirstOrDefault(e => e.Equals(valueName, StringComparison.CurrentCultureIgnoreCase));
				    }

                    WriteLine(new string(' ', (depth + 3) * 4) + "<div class=\"child\">");
                    WriteLine(new string(' ', (depth + 4) * 4) + "@Html.KoSageRadioButtonFor(model => model.Data." + property + ", (int)" + enumName + "." + valueName + ", new { @sagechecked = \"Data." + enumName + "\", @sagedisable = \"Data.HasModifyAccess\" }, new { @id = \"chk" + property + valueName + "\" })");
                    WriteLine(new string(' ', (depth + 4) * 4) + "@Html.SageLabel(\"lbl" + property + valueName + "\", " + resxName + "." + valueName + ", new { @class = \"\", @for = \"chk" + property + valueName + "\" })");
                    WriteLine(new string(' ', (depth + 3) * 4) + "</div>");
                }
                
                WriteLine(new string(' ', (depth + 2) * 4) + "</div>");
                WriteLine(new string(' ', (depth + 1) * 4) + "</div>");
                WriteLine(new string(' ', depth * 4) + "</div>");
            }
            else if (controlElement.Attribute("widget").Value.Equals("Tab"))
            {
                // Tab Snippet
                var id = controlElement.Attribute("id").Value;
                var entityName = view.Properties[BusinessView.Constants.EntityName];
                var resxName = view.Properties[BusinessView.Constants.ResxName];

                WriteLine(new string(' ', depth * 4) + "<div id=\"" + id + "\" class=\"xsmall tab-group\">");
                WriteLine(new string(' ', (depth + 1) * 4) + "<ul>");
                // Iterate tab pages
                var tabCount = 0;
                foreach (var tabPageElement in controlElement.Descendants().First().Elements())
                {
                    // Tab Page Snippet
                    var pageId = tabPageElement.Attribute("id").Value;
                    var elementType = tabPageElement.Attribute("type").Value;
                    var activePage = string.Empty;
                    tabCount++;

                    // Determine class
                    if (tabCount == 1)
                    {
                        activePage = " class=\"k-state-active\"";
                    }

                    WriteLine(new string(' ', (depth + 2) * 4) + "<" + elementType + activePage + " id=\"tab" + pageId + "\">@" + resxName + "." + pageId + "</" + elementType + ">");
                }

                WriteLine(new string(' ', (depth + 1) * 4) + "</ul>");

                // Need to specify partial views
                foreach (var tabPageElement in controlElement.Descendants().First().Elements())
                {
                    // Tab Page Snippet
                    var pageId = tabPageElement.Attribute("id").Value;

                    WriteLine(new string(' ', (depth + 1) * 4) + "@Html.Partial(Constants." + entityName + pageId + ")");
                }

                WriteLine(new string(' ', depth * 4) + "</div>");
            }

            // children?
            if (controlElement.HasElements && !controlElement.Attribute("widget").Value.Equals("Tab"))
            {
                ReadXMLRecursion(depth, controlElement.Descendants().First());
            }

            // End element
            if (rowStarted)
            {
                WriteLine(new string(' ', depth * 4) + "</div>");
            }
        }
    }
#>
