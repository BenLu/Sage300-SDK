<# /* The MIT License (MIT) */ #>
<# /* Copyright (c) 1994-2020 The Sage Group plc or its licensors.  All rights reserved. */ #>
<# /* */ #>
<# /* Permission is hereby granted, free of charge, to any person obtaining a copy of */ #>
<# /* this software and associated documentation files (the "Software"), to deal in */ #>
<# /* the Software without restriction, including without limitation the rights to use, */ #>
<# /* copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the */ #>
<# /* Software, and to permit persons to whom the Software is furnished to do so, */ #>
<# /* subject to the following conditions: */ #>
<# /* */ #>
<# /* The above copyright notice and this permission notice shall be included in all */ #>
<# /* copies or substantial portions of the Software. */ #>
<# /* */ #>
<# /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, */ #>
<# /* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A */ #>
<# /* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT */ #>
<# /* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF */ #>
<# /* CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE */ #>
<# /* OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */ #>
<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#@ parameter type="System.Xml.Linq.XElement" name="element" #>
<#
    // Locals
    var entityName = view.Properties[BusinessView.Constants.EntityName];
    var resxName = view.Properties[BusinessView.Constants.ResxName];
    var moduleId = settings.ModuleId;
    var copyright = settings.Copyright;
    var companyNamespace = settings.CompanyNamespace;
    var modelName = view.Properties[BusinessView.Constants.ModelName];

    var webModuleNamespace = (settings.DoesAreasExist ? (settings.WebProjectIncludesModule ? moduleId + "." : string.Empty) + 
	"Web.Areas." + moduleId : moduleId + ".Web");

    var xmlLayout = settings.XmlLayout;
#>
@* <#=copyright#> *@

@using Sage.CA.SBS.ERP.Sage300.Common.Web.AreaConstants
@using Sage.CA.SBS.ERP.Sage300.Common.Models.Enums
@using Sage.CA.SBS.ERP.Sage300.Common.Web.HtmlHelperExtension
@using CommonResx = Sage.CA.SBS.ERP.Sage300.Common.Resources.CommonResx
@using AnnotationsResx = Sage.CA.SBS.ERP.Sage300.Common.Resources.AnnotationsResx

@using <#=resxName#> = <#=companyNamespace#>.<#=moduleId#>.Resources.Forms.<#=resxName#>
@using <#=companyNamespace#>.<#=moduleId#>.Web.Areas.<#=moduleId#>.Constants

@model <#=companyNamespace#>.<#=webModuleNamespace#>.Models.<#=entityName#>ViewModel<<#=companyNamespace#>.<#=moduleId#>.Models.<#=modelName#>>

<div>
<# 
// Counter for indentation
int depth = 0;

// Iterate xml and apply snippets directly to template
if (element.HasElements)
{
    // Recursion
    ReadXMLRecursion(depth, element);
}
#>
</div>

<#+
    // Class Feature Block in T4
    private void ReadXMLRecursion(int depth, XElement element)
    {
        // Local references
        bool rowStarted = false;
        depth++;

        // Iterate elements
        foreach (var controlElement in element.Elements())
        {
            // If row is found
            if (controlElement.Attribute("newRow").Value.Equals("true"))
            {
                // Start a row
                WriteLine(new string(' ', depth * 4) + "<div class=\"form-group\">");
                rowStarted = true;
            }
            else if (controlElement.Attribute("widget").Value.Equals("Finder"))
            {
                // Search Snippet
                // var entity = controlElement.Attribute("entity").Value;
                var property = controlElement.Attribute("property").Value;

                WriteLine(new string(' ', depth * 4) + "<div class=\"search-group\">");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.SageLabelFor(model => model.Data." + property + ", new { @id = \"lbl" + property + "\", @class = \"required\" })");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.KoSageTextBoxFor(model => model.Data." + property + ", new { @sagevalue = \"Data." + property + "\", @valueUpdate = \"'input'\" }, new { @id = \"txt" + property + "\", @class = \"default\", @formatTextbox = \"alphaNumeric\" })");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.KoSageButton(\"btnLoad" + property + "\", null, new { @id = \"btnLoad\", @class = \"icon btn-go\", @tabindex = \" - 1\" })");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.KoSageButton(\"btnFinder" + property + "\", null, new { @class = \"icon btn-search\", @id = \"btnFinder" + property + "\", @tabindex = \" - 1\" })");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.ValidationMessageFor(model => model.Data." + property + ")");
                WriteLine(new string(' ', depth * 4) + "</div>");
            }
            else if (controlElement.Attribute("widget").Value.Equals("Textbox"))
            {
                // Input Snippet
                var property = controlElement.Attribute("property").Value;

                WriteLine(new string(' ', depth * 4) + "<div class=\"input-group\">");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.SageLabelFor(model => model.Data." + property + ")");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.KoSageTextBoxFor(model => model.Data." + property + ", new { @value = \"Data." + property + "\", @valueUpdate = \"'input'\" }, new { @id = \"txt" + property + "\", @class = \"large\" })");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.ValidationMessageFor(model => model.Data." + property + ", null, new { @class = \"\" })");
                WriteLine(new string(' ', depth * 4) + "</div>");
            }
            else if (controlElement.Attribute("widget").Value.Equals("Dropdown"))
            {
                // Dropdown Snippet
                var property = controlElement.Attribute("property").Value;

                WriteLine(new string(' ', depth * 4) + "<div class=\"dropdown-group\">");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.SageLabelFor(model => model.Data." + property + ")");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.KoSageDropDownList(\"ddl" + property + "\", new { @options = \"Get" + property + "\", @value = \"Data." + property + "\", @optionsText = \"'Text'\", @optionsValue = \"'Value'\" , @disable = \"Data.HasModifyAccess\" }, new { @id = \"ddl" + property + "\", @class = \"default\" })");
                WriteLine(new string(' ', depth * 4) + "</div>");
            }
            else if (controlElement.Attribute("widget").Value.Equals("DateTime"))
            {
                // Datepicker Snippet
                // var entity = controlElement.Attribute("entity").Value;
                var property = controlElement.Attribute("property").Value;

                WriteLine(new string(' ', depth * 4) + "<div class=\"datepicker-group\">");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.SageLabelFor(model => model.Data." + property + ")");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.KoSageTextBoxFor(model => model.Data." + property + ", new { @sageDatePicker = \"Data." + property + "\", @sagedisable = \"Data.Is" + property + "Disabled\" }, new { @id = \"txt" + property + "\", @class = \"datepicker default\" })");
                WriteLine(new string(' ', (depth + 1) * 4) + "@Html.ValidationMessageFor(model => model.Data." + property + ")");
                WriteLine(new string(' ', depth * 4) + "</div>");
            }
            else if (controlElement.Attribute("widget").Value.Equals("Checkbox"))
            {
                // Checkbox Snippet
                // var entity = controlElement.Attribute("entity").Value;
                var property = controlElement.Attribute("property").Value;

                WriteLine(new string(' ', depth * 4) + "<div class=\"ctrl-group\">");
                WriteLine(new string(' ', (depth + 1) * 4) + "<div class=\"child\">");
                WriteLine(new string(' ', (depth + 2) * 4) + "@Html.KoSageCheckBoxFor(model => model.Data." + property + ", new { @sagechecked = \"Data." + property + "\", @sagedisable = \"Data.Is" + property + "Disabled\"} , new { @id = \"chk" + property + "\", @autofocus = \"autofocus\" })");
                WriteLine(new string(' ', (depth + 2) * 4) + "@Html.SageLabelFor(model => model.Data." + property + ", new { @class = \"checkBox-info\" })");
                WriteLine(new string(' ', (depth + 1) * 4) + "</div>");
                WriteLine(new string(' ', depth * 4) + "</div>");
            }
            else if (controlElement.Attribute("widget").Value.Equals("RadioButtons"))
            {
                // Radio Buttons Snippet
                // var entity = controlElement.Attribute("entity").Value;
                var property = controlElement.Attribute("property").Value;
                var enumHelper = view.Enums[property];
                var enumName = enumHelper.Name;
                var resxName = view.Properties[BusinessView.Constants.ResxName];

                WriteLine(new string(' ', depth * 4) + "<div class=\"sub-section\">");
                WriteLine(new string(' ', (depth + 1) * 4) + "<div class=\"section-heading\">");
                WriteLine(new string(' ', (depth + 2) * 4) + "<h3>@Html.SageLabelFor(model => model.Data." + property + ")</h3>");
                WriteLine(new string(' ', (depth + 1) * 4) + "</div>");
                WriteLine(new string(' ', (depth + 1) * 4) + "<div class=\"section-body\">");
                WriteLine(new string(' ', (depth + 2) * 4) + "<div class=\"ctrl-group ctrl-group-inline ctrl-group-inline-lg\">");

                foreach (var value in enumHelper.Values)
                {
                    // Locals - Used to split out prefix and replace invalid characters
                    var tmp = value.Key.Split(':');
                    var valueName = tmp[1];
                    if (!settings.ResourceKeys.Contains(valueName))
				    {
					    valueName = settings.ResourceKeys.FirstOrDefault(e => e.Equals(valueName, StringComparison.CurrentCultureIgnoreCase));
				    }

                    WriteLine(new string(' ', (depth + 3) * 4) + "<div class=\"child\">");
                    WriteLine(new string(' ', (depth + 4) * 4) + "@Html.KoSageRadioButtonFor(model => model.Data." + property + ", (int)" + enumName + "." + valueName + ", new { @sagechecked = \"Data." + enumName + "\", @sagedisable = \"Data.HasModifyAccess\" }, new { @id = \"chk" + property + valueName + "\" })");
                    WriteLine(new string(' ', (depth + 4) * 4) + "@Html.SageLabel(\"lbl" + property + valueName + "\", " + resxName + "." + valueName + ", new { @class = \"\", @for = \"chk" + property + valueName + "\" })");
                    WriteLine(new string(' ', (depth + 3) * 4) + "</div>");
                }
                
                WriteLine(new string(' ', (depth + 2) * 4) + "</div>");
                WriteLine(new string(' ', (depth + 1) * 4) + "</div>");
                WriteLine(new string(' ', depth * 4) + "</div>");
            }
            else if (controlElement.Attribute("widget").Value.Equals("Tab"))
            {
                // Tab Snippet
                var id = controlElement.Attribute("id").Value;
                var resxName = view.Properties[BusinessView.Constants.ResxName];
                var entityName = view.Properties[BusinessView.Constants.EntityName];

                WriteLine(new string(' ', depth * 4) + "<div id=\" + id + \" class=\"xsmall tab-group\">");
                WriteLine(new string(' ', (depth + 1) * 4) + "<ul>");
                // Iterate tab pages
                foreach (var tabPageElement in controlElement.Descendants().First().Elements())
                {
                    // Tab Page Snippet
                    var pageId = tabPageElement.Attribute("id").Value;
                    var activePage = tabPageElement.Attribute("widget").Value;

                    // Determine for class name
                    if (activePage == "TabPage")
                    {
                        activePage = " class=\"k-state-active\"";
                    }

                    WriteLine(new string(' ', (depth + 2) * 4) + "<li" + activePage + " id=\"tab " + pageId + "\">@" + resxName + "." + pageId + "</li>");
                }

                WriteLine(new string(' ', (depth + 1) * 4) + "</ul>");

                // Need to specify partial views
                foreach (var tabPageElement in controlElement.Descendants().First().Elements())
                {
                    // Tab Page Snippet
                    var pageId = tabPageElement.Attribute("id").Value;

                    WriteLine(new string(' ', (depth + 1) * 4) + "@Html.Partial(Constants." + entityName + pageId + ")");
                }

                WriteLine(new string(' ', depth * 4) + "</div>");
            }

            // children?
            if (controlElement.HasElements)
            {
                ReadXMLRecursion(depth, controlElement.Descendants().First());
            }

            // End element
            if (rowStarted)
            {
                WriteLine(new string(' ', depth * 4) + "</div>");
            }
        }
    }
#>
