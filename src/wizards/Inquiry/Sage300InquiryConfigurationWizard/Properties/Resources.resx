<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Back" xml:space="preserve">
    <value>Back</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Blank" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\images\Blank24.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="InquiryDescription" xml:space="preserve">
    <value>Description:</value>
  </data>
  <data name="Dash" xml:space="preserve">
    <value>-</value>
  </data>
  <data name="Error" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\images\ProgressError.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>File Name</value>
  </data>
  <data name="Filter" xml:space="preserve">
    <value>JSON Files (*InquiryConfiguration.json)|*InquiryConfiguration.json</value>
  </data>
  <data name="FinderProperty" xml:space="preserve">
    <value>Finder Property</value>
  </data>
  <data name="Finish" xml:space="preserve">
    <value>Finish</value>
  </data>
  <data name="Folder" xml:space="preserve">
    <value>Folder:</value>
  </data>
  <data name="Generate" xml:space="preserve">
    <value>Generate</value>
  </data>
  <data name="GeneratingFile" xml:space="preserve">
    <value>Generating File {0}...</value>
  </data>
  <data name="InvalidSettingRequiredField" xml:space="preserve">
    <value>The {0} has not been specified.</value>
  </data>
  <data name="InvalidSettingRequiredProperty" xml:space="preserve">
    <value>At least one property must be included.</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="Next" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="Inquiry" xml:space="preserve">
    <value>Inquiry:</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Step" xml:space="preserve">
    <value>Step</value>
  </data>
  <data name="StepDescriptionCreateEdit" xml:space="preserve">
    <value>This will generate a configuration file for an Inquiry.</value>
  </data>
  <data name="StepDescriptionGenerate" xml:space="preserve">
    <value>Select 'Generate' to generate the configuration file for this inquiry based upon the content from the previous steps.</value>
  </data>
  <data name="StepDescriptionGenerated" xml:space="preserve">
    <value>The file noted below has been generated for this inquiry configuration.</value>
  </data>
  <data name="StepTitleCreateEdit" xml:space="preserve">
    <value>Add/Edit an Inquiry Configuration</value>
  </data>
  <data name="StepTitleGenerate" xml:space="preserve">
    <value>Generate an Inquiry Configuration</value>
  </data>
  <data name="StepTitleGenerated" xml:space="preserve">
    <value>Generated an Inquiry Configuration</value>
  </data>
  <data name="Success" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\images\ProgressSuccess.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="InquiryDescriptionTip" xml:space="preserve">
    <value>The description of the inquiry configuration</value>
  </data>
  <data name="FolderNameTip" xml:space="preserve">
    <value>The folder for the inquiry configuration</value>
  </data>
  <data name="JsonToGenerateTip" xml:space="preserve">
    <value>The {0} file will be generated with the following content:</value>
  </data>
  <data name="InquiryIdTip" xml:space="preserve">
    <value>A 36 character GUID to uniquely identify the inquiry configuration</value>
  </data>
  <data name="Assembly" xml:space="preserve">
    <value>Assembly:</value>
  </data>
  <data name="AssemblyTip" xml:space="preserve">
    <value>Select an Assembly containing the model to be used for the inquiry configuration</value>
  </data>
  <data name="ErrorCreatingFile" xml:space="preserve">
    <value>Error creating {0}</value>
  </data>
  <data name="FilterAll" xml:space="preserve">
    <value>All Files (*.*)|*.*</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="FolderFinderTip" xml:space="preserve">
    <value>Lookup an existing folder for the inquiry configuration</value>
  </data>
  <data name="InquiryFinderTip" xml:space="preserve">
    <value>Lookup an existing inquiry configuration</value>
  </data>
  <data name="InquiryNewTip" xml:space="preserve">
    <value>Select to create a new inquiry configuration</value>
  </data>
  <data name="GeneratedMessage" xml:space="preserve">
    <value>This file was generated by a tool.</value>
  </data>
  <data name="GeneratedWarning" xml:space="preserve">
    <value>Changes to this file may cause incorrect behavior and will be lost if the file is regenerated.</value>
  </data>
  <data name="InquiryConfiguration" xml:space="preserve">
    <value>Inquiry Configuration</value>
  </data>
  <data name="Model" xml:space="preserve">
    <value>Model:</value>
  </data>
  <data name="ModelTip" xml:space="preserve">
    <value>Select a model for the inquiry configuration</value>
  </data>
  <data name="Action" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Area" xml:space="preserve">
    <value>Area</value>
  </data>
  <data name="Controller" xml:space="preserve">
    <value>Controller</value>
  </data>
  <data name="Drilldown" xml:space="preserve">
    <value>Drilldown</value>
  </data>
  <data name="Field" xml:space="preserve">
    <value>Field</value>
  </data>
  <data name="Filterable" xml:space="preserve">
    <value>Filterable</value>
  </data>
  <data name="FullTypeName" xml:space="preserve">
    <value>Full Type Name</value>
  </data>
  <data name="Include" xml:space="preserve">
    <value>Include</value>
  </data>
  <data name="Index" xml:space="preserve">
    <value>Index</value>
  </data>
  <data name="Property" xml:space="preserve">
    <value>Property</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Enums" xml:space="preserve">
    <value>Enums</value>
  </data>
</root>