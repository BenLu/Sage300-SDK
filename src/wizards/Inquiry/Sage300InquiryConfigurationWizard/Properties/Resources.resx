<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Back" xml:space="preserve">
    <value>Back</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Blank" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\images\Blank24.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="InquiryDescription" xml:space="preserve">
    <value>Description:</value>
  </data>
  <data name="Dash" xml:space="preserve">
    <value>-</value>
  </data>
  <data name="Error" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\images\ProgressError.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>File Name</value>
  </data>
  <data name="Filter" xml:space="preserve">
    <value>JSON Files (*InquiryConfiguration.json)|*InquiryConfiguration.json</value>
  </data>
  <data name="FinderProperty" xml:space="preserve">
    <value>Finder Property</value>
  </data>
  <data name="Finish" xml:space="preserve">
    <value>Finish</value>
  </data>
  <data name="Folder" xml:space="preserve">
    <value>Folder:</value>
  </data>
  <data name="Generate" xml:space="preserve">
    <value>Generate</value>
  </data>
  <data name="GeneratingFile" xml:space="preserve">
    <value>Generating File {0}...</value>
  </data>
  <data name="InvalidSettingRequiredField" xml:space="preserve">
    <value>The {0} has not been specified or is invalid.</value>
  </data>
  <data name="InvalidSettingRequiredColumn" xml:space="preserve">
    <value>At least one column must be included.</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="Next" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="Inquiry" xml:space="preserve">
    <value>Inquiry:</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Step" xml:space="preserve">
    <value>Step</value>
  </data>
  <data name="StepDescriptionCreateEdit" xml:space="preserve">
    <value>This will generate configuration files.</value>
  </data>
  <data name="StepDescriptionGenerate" xml:space="preserve">
    <value>Select 'Generate' to generate configuration files based upon the content from the previous steps.</value>
  </data>
  <data name="StepDescriptionGenerated" xml:space="preserve">
    <value>The configuration files noted below have been generated.</value>
  </data>
  <data name="StepTitleCreateEdit" xml:space="preserve">
    <value>Add/Edit</value>
  </data>
  <data name="StepTitleGenerate" xml:space="preserve">
    <value>Generate</value>
  </data>
  <data name="StepTitleGenerated" xml:space="preserve">
    <value>Generated</value>
  </data>
  <data name="Success" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\images\ProgressSuccess.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="InquiryDescriptionTip" xml:space="preserve">
    <value>The description of the inquiry configuration</value>
  </data>
  <data name="FolderNameTip" xml:space="preserve">
    <value>The folder for the inquiry configuration</value>
  </data>
  <data name="JsonToGenerateTip" xml:space="preserve">
    <value>The {0} and {1} files will be generated:</value>
  </data>
  <data name="InquiryIdTip" xml:space="preserve">
    <value>A 36 character GUID to uniquely identify the inquiry configuration</value>
  </data>
  <data name="ErrorCreatingFile" xml:space="preserve">
    <value>Error creating {0}</value>
  </data>
  <data name="FilterAll" xml:space="preserve">
    <value>All Files (*.*)|*.*</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="FolderFinderTip" xml:space="preserve">
    <value>Lookup an existing folder for the inquiry configuration</value>
  </data>
  <data name="InquiryFinderTip" xml:space="preserve">
    <value>Lookup an existing inquiry configuration</value>
  </data>
  <data name="InquiryNewTip" xml:space="preserve">
    <value>Select to create a new inquiry configuration</value>
  </data>
  <data name="GeneratedMessage" xml:space="preserve">
    <value>This file was generated by a tool.</value>
  </data>
  <data name="GeneratedWarning" xml:space="preserve">
    <value>Changes to this file may cause incorrect behavior and will be lost if the file is regenerated.</value>
  </data>
  <data name="InquiryConfiguration" xml:space="preserve">
    <value>Inquiry Configuration</value>
  </data>
  <data name="Action" xml:space="preserve">
    <value>Action:</value>
  </data>
  <data name="Area" xml:space="preserve">
    <value>Area:</value>
  </data>
  <data name="Controller" xml:space="preserve">
    <value>Controller:</value>
  </data>
  <data name="DrilldownTab" xml:space="preserve">
    <value>Drilldown</value>
  </data>
  <data name="Field" xml:space="preserve">
    <value>Field</value>
  </data>
  <data name="Filterable" xml:space="preserve">
    <value>Specifies if the Inquiry Grid for this column will allow filtering</value>
  </data>
  <data name="FullTypeName" xml:space="preserve">
    <value>Full Type Name</value>
  </data>
  <data name="Include" xml:space="preserve">
    <value>Include</value>
  </data>
  <data name="Index" xml:space="preserve">
    <value>Index</value>
  </data>
  <data name="Property" xml:space="preserve">
    <value>Property</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Enums" xml:space="preserve">
    <value>Enums</value>
  </data>
  <data name="ActionTip" xml:space="preserve">
    <value>Specify the action (method) for the drilldown</value>
  </data>
  <data name="AreaTip" xml:space="preserve">
    <value>Specify the area (module) for the drilldown</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Captions" xml:space="preserve">
    <value>Captions:</value>
  </data>
  <data name="Column" xml:space="preserve">
    <value>Column:</value>
  </data>
  <data name="ColumnInstructions" xml:space="preserve">
    <value>Click a column to Drag and Drop for display order or Double-Click on a column to edit the properties.</value>
  </data>
  <data name="ColumnNameTip" xml:space="preserve">
    <value>A column in the Sage 300 business view to be used for filters</value>
  </data>
  <data name="ColumnTab" xml:space="preserve">
    <value>Column</value>
  </data>
  <data name="ColumnTabTip" xml:space="preserve">
    <value>The order of the column, whether or not it is displayed and the localized captions can be modified</value>
  </data>
  <data name="ColumnTip" xml:space="preserve">
    <value>The included column being modified</value>
  </data>
  <data name="ColumnView" xml:space="preserve">
    <value>Specifies if this SQLcolumn can be found in a business view for the filtered list</value>
  </data>
  <data name="ColumnViewIdTip" xml:space="preserve">
    <value>A valid Sage 300 business view to be used for filters</value>
  </data>
  <data name="ColumnViewTip" xml:space="preserve">
    <value>Checked to specify column is in a view</value>
  </data>
  <data name="Company" xml:space="preserve">
    <value>Company:</value>
  </data>
  <data name="CompanyTip" xml:space="preserve">
    <value>A valid Sage 300 company</value>
  </data>
  <data name="ControllerTip" xml:space="preserve">
    <value>Specify the controller for the drilldown</value>
  </data>
  <data name="Credentials" xml:space="preserve">
    <value>Application Credentials</value>
  </data>
  <data name="DisplayColumn" xml:space="preserve">
    <value>Specifies if this column will be displayed in the Inquiry Grid else it will be hidden</value>
  </data>
  <data name="DisplayColumnTip" xml:space="preserve">
    <value>Checked to display the column in the grid</value>
  </data>
  <data name="DisplayOrder" xml:space="preserve">
    <value>Order:</value>
  </data>
  <data name="DisplayOrderTip" xml:space="preserve">
    <value>The display order of the colun in the grid</value>
  </data>
  <data name="DrilldownFromColumn" xml:space="preserve">
    <value>Specifies the drilldown criteria for this column</value>
  </data>
  <data name="DrilldownFromColumnTip" xml:space="preserve">
    <value>Checked to drilldown from column</value>
  </data>
  <data name="DrilldownTabTip" xml:space="preserve">
    <value>The properties for drilling down from the column can be specified or modified</value>
  </data>
  <data name="FilterableTip" xml:space="preserve">
    <value>Checked to allow column to be filtered</value>
  </data>
  <data name="FilteringTab" xml:space="preserve">
    <value>Filtering</value>
  </data>
  <data name="FilteringTabTip" xml:space="preserve">
    <value>The properties for filtering on the column can be specified or modified</value>
  </data>
  <data name="Filters" xml:space="preserve">
    <value>Filters:</value>
  </data>
  <data name="FiltersTip" xml:space="preserve">
    <value>Filters to be used for the column</value>
  </data>
  <data name="Languages" xml:space="preserve">
    <value>Captions for column in grid</value>
  </data>
  <data name="LanguagesTip" xml:space="preserve">
    <value>Specify the captions for the required languages</value>
  </data>
  <data name="Parameters" xml:space="preserve">
    <value>Parameters:</value>
  </data>
  <data name="ParametersTip" xml:space="preserve">
    <value>Specify parameter name(s) of the action (method)</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password:</value>
  </data>
  <data name="PasswordTip" xml:space="preserve">
    <value>A valid Sage 300 password</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SqlTip" xml:space="preserve">
    <value>Enter a well-formatted SQL statement whose columns will be defined in the next step</value>
  </data>
  <data name="User" xml:space="preserve">
    <value>User:</value>
  </data>
  <data name="UserTip" xml:space="preserve">
    <value>A valid Sage 300 user</value>
  </data>
  <data name="UseBusinessView" xml:space="preserve">
    <value>Specifies if a Business View will be used for the datasource else a SQL Statement will be used</value>
  </data>
  <data name="UseViewTip" xml:space="preserve">
    <value>A Business View or a SQL statement may be used for this inquiry configuration</value>
  </data>
  <data name="Version" xml:space="preserve">
    <value>Version:</value>
  </data>
  <data name="VersionTip" xml:space="preserve">
    <value>A valid Sage 300 version</value>
  </data>
  <data name="ViewColumnsTip" xml:space="preserve">
    <value>Select columns from the business view to be included in the configuration</value>
  </data>
  <data name="ViewId" xml:space="preserve">
    <value>View ID:</value>
  </data>
  <data name="ViewIdTip" xml:space="preserve">
    <value>A valid Sage 300 business view</value>
  </data>
  <data name="Caption" xml:space="preserve">
    <value>Caption</value>
  </data>
  <data name="DataType" xml:space="preserve">
    <value>Data Type:</value>
  </data>
  <data name="DataTypeTip" xml:space="preserve">
    <value>Specify the data type for the column</value>
  </data>
  <data name="EditColumn" xml:space="preserve">
    <value>Edit Column</value>
  </data>
  <data name="InvalidSettingCredentials" xml:space="preserve">
    <value>Unable to establish connection with entered credentials.</value>
  </data>
  <data name="InvalidSettingDoesNotExist" xml:space="preserve">
    <value>The {0} specified does not exist.</value>
  </data>
  <data name="InvalidSettingOrderByClause" xml:space="preserve">
    <value>The inquiry engine will supply the 'ORDER BY' syntax.</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="Parameter" xml:space="preserve">
    <value>Parameter</value>
  </data>
  <data name="Sql" xml:space="preserve">
    <value>SQL</value>
  </data>
  <data name="SqlHelpTip" xml:space="preserve">
    <value>Describes the required structure of the SQL statement and provides a couple of examples</value>
  </data>
  <data name="StepDescriptionColumns" xml:space="preserve">
    <value>Provides the ability to modify existing properties, add captions, drill down targets, and more.</value>
  </data>
  <data name="StepDescriptionSourceView" xml:space="preserve">
    <value>Specify a Business View for the data source.</value>
  </data>
  <data name="StepTitleColumns" xml:space="preserve">
    <value>Columns</value>
  </data>
  <data name="StepTitleSource" xml:space="preserve">
    <value>Data Source</value>
  </data>
  <data name="Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="Display" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="OrderByClause" xml:space="preserve">
    <value>Order By Clause:</value>
  </data>
  <data name="OrderByClauseTip" xml:space="preserve">
    <value>Specify the order by clause, if any, without the ORDER BY verb</value>
  </data>
  <data name="SqlSource" xml:space="preserve">
    <value>Specify the SQL Statement in the space below. Select the Help icon for information on SQL format and requirements.</value>
  </data>
  <data name="SqlStatementTabTip" xml:space="preserve">
    <value>The SQL statement can be specified or modified</value>
  </data>
  <data name="WhereClause" xml:space="preserve">
    <value>Where Clause:</value>
  </data>
  <data name="WhereClauseTip" xml:space="preserve">
    <value>Specify the where clause, if any, without the WHERE verb</value>
  </data>
  <data name="InquiryName" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="InquiryNameTip" xml:space="preserve">
    <value>The name of the inquiry configuration</value>
  </data>
  <data name="InvalidSettingWhereClause" xml:space="preserve">
    <value>The inquiry engine will supply the 'WHERE' syntax.</value>
  </data>
  <data name="InvalidSettingFilter" xml:space="preserve">
    <value>A filter is not properly spcified.</value>
  </data>
  <data name="StepDescriptionSourceSql" xml:space="preserve">
    <value>Specify a SQL statement for the data source.</value>
  </data>
  <data name="Columns" xml:space="preserve">
    <value>Columns:</value>
  </data>
  <data name="InvalidSettingJsonFile" xml:space="preserve">
    <value>The contents of the JSON file caused an error while parsing.</value>
  </data>
  <data name="Example1" xml:space="preserve">
    <value>Example 1</value>
  </data>
  <data name="Example2" xml:space="preserve">
    <value>Example 2</value>
  </data>
  <data name="Example3" xml:space="preserve">
    <value>Example 3</value>
  </data>
  <data name="Instructions" xml:space="preserve">
    <value>Instructions</value>
  </data>
  <data name="InvalidSettingRequiredColumns" xml:space="preserve">
    <value>There are no Wrapper columns specified.</value>
  </data>
  <data name="SqlHelp" xml:space="preserve">
    <value>SQL Help</value>
  </data>
  <data name="InvalidSettingDuplicateCols" xml:space="preserve">
    <value>There is at least one column name specified more than once.</value>
  </data>
  <data name="SqlInstructions1" xml:space="preserve">
    <value>In the textbox provided, create or copy &amp; paste a SQL statement that will be used to display data in an inquiry grid.</value>
  </data>
  <data name="SqlInstructions2" xml:space="preserve">
    <value>It is recommended that the SQL statement be developed in a tool such as SQL Server Management Studio or similar to provide a well-formatted, proper and working SQL statement.</value>
  </data>
  <data name="SqlInstructions3" xml:space="preserve">
    <value>The Inquiry Engine will create a wrapper for the SQL statement based upon the columns returned by the SQL statement. Note: These columns are manually specified in the exact order of the return columns of the SQL statement in the wizard as the wizard does not parse or validate the format or content of the SQL statement.</value>
  </data>
  <data name="SqlInstructions4" xml:space="preserve">
    <value>The Inquiry Engine will apply the supplied 'where clause' to the generated wrapper if a 'where clause' is supplied. This 'where clause' is applied to the wrapper and is considered the 'first-level' sort or filter. It is separate from any 'where clauses' used in the SQL statement itself. The 'WHERE' key word will not be specified in the wizard field (i.e. IDCUST = {0} not WHERE IDCUST = {0}).</value>
  </data>
  <data name="SqlInstructions5" xml:space="preserve">
    <value>The Inquiry Engine will apply the required 'order by clause' to the generated wrapper. This 'order by clause' is applied to the wrapper. It is separate from any 'order by clauses' used in the SQL statement itself. The 'ORDER BY' key word will not be specified in the wizard field (i.e. IDCUST not ORDER BY IDCUST).</value>
  </data>
  <data name="SqlInstructions6" xml:space="preserve">
    <value>The examples on the following tabs show various SQL statements (with their wrappers, where and order by clauses already applied). But, remember that the SQL statement provided will NOT include the wrapper, the 'where clause' or the 'order by clause'. The SQL statement examples provide the ability to understand the proper format required by the wizard.</value>
  </data>
  <data name="FilterableColumn" xml:space="preserve">
    <value>Filterable</value>
  </data>
  <data name="InvalidSettingColumnSpaces" xml:space="preserve">
    <value>There is at least one column name that a space in the name.</value>
  </data>
  <data name="InvalidSettingOrderByCol" xml:space="preserve">
    <value>The {0} column for the {1} was not found in the list of SQL columns.</value>
  </data>
  <data name="SqlStatement" xml:space="preserve">
    <value>SQL Statement</value>
  </data>
  <data name="WrapperColsClauses" xml:space="preserve">
    <value>Wrapper Columns and Clauses</value>
  </data>
  <data name="WrapperInstructions" xml:space="preserve">
    <value>Specify the columns for the Inquiry Engine's Wrapper that will align with the columns in the SQL Statement. Note: The column names can be named differently than the SQL Statement columns. The Where Clause, if specified, and the Order By Clause must use column names from the columns list and not the SQL Statement.</value>
  </data>
  <data name="WrapperTabTip" xml:space="preserve">
    <value>The Columns, Where clause and Order By clause can be specified or modified</value>
  </data>
</root>