<# /* The MIT License (MIT) */ #>
<# /* Copyright (c) 1994-2019 The Sage Group plc or its licensors.  All rights reserved. */ #>
<# /* */ #>
<# /* Permission is hereby granted, free of charge, to any person obtaining a copy of */ #>
<# /* this software and associated documentation files (the "Software"), to deal in */ #>
<# /* the Software without restriction, including without limitation the rights to use, */ #>
<# /* copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the */ #>
<# /* Software, and to permit persons to whom the Software is furnished to do so, */ #>
<# /* subject to the following conditions: */ #>
<# /* */ #>
<# /* The above copyright notice and this permission notice shall be included in all */ #>
<# /* copies or substantial portions of the Software. */ #>
<# /* */ #>
<# /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, */ #>
<# /* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A */ #>
<# /* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT */ #>
<# /* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF */ #>
<# /* CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE */ #>
<# /* OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */ #>
<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
    // Locals
    var moduleId = settings.ModuleId;
    var modelName = view.Properties[BusinessView.Constants.ModelName];
    var copyright = settings.Copyright;
    var extension = settings.Extension;
    var companyNamespace = settings.CompanyNamespace;
    var resourceName = view.Properties[BusinessView.Constants.ResourceName];
    var controllerSettings = settings.ControllerSettings;
	var RestrictedViewResourceControllerValue = settings.Verbs;
#>
// <#=copyright#>

using System.Web.OData.Builder;
using Microsoft.Practices.Unity;
using Sage.CA.SBS.ERP.Sage300.<#=moduleId#>.WebApi.Models;
using Sage.CA.SBS.ERP.Sage300.Common.WebApi.Attributes;
using Sage.CA.SBS.ERP.Sage300.Common.WebApi.BusinessRepository;
using Sage.CA.SBS.ERP.Sage300.Common.WebApi.Controllers;
using Sage.CA.SBS.ERP.Sage300.Common.WebApi.Interfaces;
using Microsoft.Web.Http;
using System.Web.OData.Routing;
using System.Linq;

namespace <#=companyNamespace#>.<#=moduleId#>.WebApi.Controllers<#=extension#>
{
    /// <summary>
    /// Class <#=resourceName#>Controller
    /// </summary>
    [ControllerName("<#=resourceName#>")]
    [ODataRoutePrefix("<#=resourceName#>")]
    <#=RestrictedViewResourceControllerValue#>

    public partial class <#=resourceName#>Controller : ViewResourceController<<#=modelName#>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="<#=resourceName#>Controller"/> class.
        /// </summary>
        /// <param name="container">The container</param>
        public <#=resourceName#>Controller(IUnityContainer container) : base(container)
        {
        }

        /// <summary>
        /// Registers this resource as a Web API endpoint
        /// </summary>
        /// <param name="builder"></param>
        public static void RegisterODataEntity(ODataModelBuilder builder)
        {
            builder.EntitySet<<#=modelName#>>("<#=resourceName#>");
<#
    foreach (var detail in controllerSettings.Details)
    {
#>
            builder.ComplexType<<#=detail.ModelName#>>();
<#
    }
#>
        }

        /// <summary>
        /// Specifies the Sage views and their relationships that backs this resource
        /// </summary>
        /// <returns>An instance of IViewEntity which contains the Sage views and corresponding relationships</returns>
        protected override IViewResourceEntity GetViewEntityHierarchy()
        {
<#
    DefineEntities(controllerSettings, "");
    DefineRelationships(controllerSettings, "");
#>
            return <#=controllerSettings.ModelName#>Entity;
        }
    }
}

<#+
    public void DefineEntities(ControllerSettings current, string Prefix)
    {
	    var keyType = (current.KeyProperties.Count == 0) ? "" : current.KeyType == ViewKeyType.Sequenced ? "ViewKeyType.Sequenced" : "ViewKeyType.Ordered";
        var keySegments = "";
        foreach (var keyProperty in current.KeyProperties)
        {
            keySegments += string.Format(@", (m => m.{0})", keyProperty);
        }

#>
        var <#=Prefix#><#=current.ModelName#>Entity = ViewResourceEntity<<#=current.ModelName#>>.Create(<#=keyType#><#=keySegments#>);
<#+
        foreach (var detailSettings in current.Details)
        {
            DefineEntities(detailSettings, Prefix + current.ModelName + "_");
        }
    }
#>
<#+
    public void DefineRelationships(ControllerSettings current, string Prefix)
    {
        foreach (var detailSettings in current.Details)
        {
#>
            <#=Prefix#><#=current.ModelName#>Entity.AddDetail(<#=Prefix#><#=current.ModelName#>_<#=detailSettings.ModelName#>Entity, (m => m.<#=detailSettings.PropertyName#>));
<#+
            DefineRelationships(detailSettings, Prefix + current.ModelName + "_");
        }
    }
#>
