<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Template Quick Reference Guide</title>
    <link rel="stylesheet" href="SDK.css" type="text/css" />
    <link rel="stylesheet" href="SDK-section-counters.css" type="text/css" />
    <!-- THESE DON'T SEEM TO WORK
            @media print {
              td {
                widows: 3;
                page-break-inside: avoid; }
              tbody {
                widows: 3;
                page-break-inside: avoid; }
              table {
                widows: 3;
                page-break-inside: avoid; }
              tr {
                widows: 3;
                page-break-inside: avoid; } }
          -->
  </head>

  <body>
    <h1>Sage 300 SDK<br />
     Template Quick-Reference Guide<br />
    <br />
     Version&nbsp;6.3A<br />
    <br />
     August&nbsp;15,&nbsp;2014</h1>
    <!-- ================================================================ -->
    <hr />

    <p style="text-align: center; font-size: larger;">Copyright &copy; 2001,
    2003, 2006, 2007, 2014 Sage Software, Inc.  All rights reserved.</p>
    <hr />
    <!-- ================================================================ -->

    <ol>
      <li>
        <a href="#x075">Protocols</a>

        <ol>
          <li class="tightest"><a href="#x076">Basic</a></li>

          <li class="tightest">
            <a href="#x077">Modifiers</a>

            <ol>
              <li class="tightest"><a href="#x078">Composites</a></li>

              <li class="tightest"><a href="#x079">Miscellaneous</a></li>
            </ol>
          </li>
        </ol>
      </li>

      <li>
        <a href="#x080">Behaviour Specializations</a>

        <ol>
          <li class="tightest"><a href="#x081">Conditional Features</a></li>

          <li class="tightest">
            <a href="#x082">Call-outs</a>

            <ol>
              <li class="tightest"><a href="#x148">Pseudo-overrides</a></li>
            </ol>
          </li>

          <li class="tightest">
            <a href="#x083">Overrides</a>

            <ol>
              <li class="tightest"><a href="#x084">View entrypoints</a></li>

              <li class="tightest"><a href="#x085">Structure Dereferencing
              Functions</a></li>

              <li class="tightest"><a href="#x086">File Functions</a></li>

              <li class="tightest"><a href="#x087">Miscellaneous</a></li>
            </ol>
          </li>
        </ol>
      </li>

      <li>
        <a href="#x088">Structures</a>

        <ol>
          <li class="tightest"><a href="#x089">Programmer-Defined</a></li>

          <li class="tightest">
            <a href="#x090">Template-Defined</a>

            <ol>
              <li class="tightest"><a href="#x091">View Handle</a></li>

              <li class="tightest"><a href="#x133">x133 $$$$$$$$$$
              TBLMAP</a></li>

              <li class="tightest"><a href="#x134">x134 $$$$$$$$$$
              KEYMAP</a></li>

              <li class="tightest"><a href="#x135">x135 $$$$$$$$$$
              IDXMAP</a></li>

              <li class="tightest"><a href="#x136">x136 $$$$$$$$$$
              CMPNAME</a></li>

              <li class="tightest"><a href="#x137">x137 $$$$$$$$$$
              PERMISSIONMAP</a></li>

              <li class="tightest"><a href="#x138">x138 $$$$$$$$$$
              DETAILMAP</a></li>

              <li class="tightest"><a href="#x139">x139 $$$$$$$$$$
              CMPKEY</a></li>

              <li class="tightest"><a href="#x140">x140 $$$$$$$$$$
              CMPNOTIFYCONTEXT</a></li>

              <li class="tightest"><a href="#x141">x141 $$$$$$$$$$
              PRESENTATIONINFO</a></li>

              <li class="tightest"><a href="#x142">x142 $$$$$$$$$$
              IDXCONFLICT</a></li>

              <li class="tightest"><a href="#x143">x143 $$$$$$$$$$
              REVLEVEL</a></li>

              <li class="tightest"><a href="#x144">x144 $$$$$$$$$$
              REVNODE</a></li>

              <li class="tightest"><a href="#x145">x145 $$$$$$$$$$
              NOTIFYCONTEXT</a></li>

              <li class="tightest"><a href="#x146">x146 $$$$$$$$$$
              TYPEOPERATIONS</a></li>

              <li class="tightest"><a href="#x147">x147 $$$$$$$$$$
              ENTRYSTATE</a></li>
            </ol>
          </li>
        </ol>
      </li>

      <li>
        <a href="#x092">Variables</a>

        <ol>
          <li class="tightest"><a href="#x093">View Structure</a></li>

          <li class="tightest"><a href="#x094">Template Data</a></li>
        </ol>
      </li>

      <li>
        <a href="#x095">Template Helper Functions</a>

        <ol>
          <li class="tightest"><a href="#x096">Structure Dereferencing</a></li>

          <li class="tightest">
            <a href="#x097">Composite Management</a>

            <ol>
              <li class="tightest"><a href="#x098">Header Composite
              Summation</a></li>
            </ol>
          </li>

          <li class="tightest"><a href="#x099">Error Reporting</a></li>

          <li class="tightest"><a href="#x100">View Entrypoints</a></li>

          <li class="tightest"><a href="#x101">File Functions</a></li>

          <li class="tightest"><a href="#x102">Nested Details</a></li>

          <li class="tightest"><a href="#x103">Subclass Views</a></li>

          <li class="tightest"><a href="#x104">Validation</a></li>

          <li class="tightest"><a href="#x105">Error Codes</a></li>

          <li class="tightest">
            <a href="#x106">Record and Field Value Manipulation</a>

            <ol>
              <li class="tightest"><a href="#x107">Initializing Values</a></li>

              <li class="tightest"><a href="#x122">Generating Unique Key
              Values</a></li>

              <li class="tightest"><a href="#x108">Copying and Setting
              Values</a></li>

              <li class="tightest"><a href="#x109">Comparing Field
              Values</a></li>
            </ol>
          </li>

          <li class="tightest"><a href="#x110">Scratch Memory
          Management</a></li>

          <li class="tightest"><a href="#x111">Record Filtering and
          Retrieval</a></li>

          <li class="tightest"><a href="#x112">Notification Management</a></li>

          <li class="tightest"><a href="#x124">Type-Safe Field I/O</a></li>

          <li class="tightest"><a href="#x113">Miscellaneous</a></li>
        </ol>
      </li>

      <li>
        <a href="#x114">Template-Defined Macros</a>

        <ol>
          <li class="tightest"><a href="#x115">Symbolic Constants</a></li>

          <li class="tightest"><a href="#x117">View Error Checking</a></li>

          <li class="tightest"><a href="#x118">Database Error Checking</a></li>

          <li class="tightest"><a href="#x119">Filter Error Checking</a></li>

          <li class="tightest"><a href="#x120">Presentation Structure
          Building</a></li>

          <li class="tightest"><a href="#x123">Logging Debug
          Information</a></li>

          <li class="tightest">
            <a href="#x125">x125 $$$$$$$$$$$$$</a>

            <ol>
              <li class="tightest"><a href="#x129">x129 $$$$$$$$$$$$$</a></li>

              <li class="tightest"><a href="#x130">x130 $$$$$$$$$$$$$</a></li>

              <li class="tightest"><a href="#x131">x131 $$$$$$$$$$$$$</a></li>

              <li class="tightest"><a href="#x132">x132 $$$$$$$$$$$$$</a></li>
            </ol>
          </li>

          <li class="tightest">
            <a href="#x126">x126 $$$$$$$$$$$</a>

            <ol>
              <li class="tightest"><a href="#x127">x127 $$$$$$$$$$$$</a></li>

              <li class="tightest"><a href="#x128">x128 $$$$$$$$$$$$</a></li>
            </ol>
          </li>

          <li class="tightest"><a href="#x121">Miscellaneous</a></li>
        </ol>
      </li>
    </ol>
    <hr />
    <!-- ================================================================== -->

    <h2><a id="x075" name="x075">Protocols</a></h2>

    <p>Protocol definitions allow you to specify the basic behaviour and
    structure of a view. All are preprocessor symbols that you define in the
    <i>zzzz</i>1.H file.</p>

    <h3><a id="x076" name="x076">Basic</a></h3>

    <p>Only a single basic protocol may be defined.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Symbol&nbsp;</td>

          <td class="head">Protocol</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>BATCH_VIEW&nbsp;</td>

          <td>Batch part of a batch/header/detail</td>
        </tr>

        <tr class="grey">
          <td>DETAIL_VIEW&nbsp;</td>

          <td>Detail part of header/detail or batch/header/detail</td>
        </tr>

        <tr>
          <td>FLAT_VIEW&nbsp;</td>

          <td>Flat</td>
        </tr>

        <tr class="grey">
          <td>HEADER_VIEW&nbsp;</td>

          <td>Header part of header/detail or batch/header/detail</td>
        </tr>

        <tr>
          <td>SUPER_VIEW&nbsp;</td>

          <td>Superview</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x077" name="x077">Modifiers</a></h3>

    <p>Any number of modifiers may be specified. These further refine the basic
    behaviour of the view.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Modifier&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>BATCH_VIEW&nbsp;</td>

          <td><a href="#func.xxxxInsert"><i>xxxx</i>Insert</a>, <a
          href="#func.xxxxUpdate"><i>xxxx</i>Update</a> and <a
          href="#func.xxxxDelete"><i>xxxx</i>Delete</a> entrypoints are
          permitted only if this view&rsquo;s header record currently
          exists</td>
        </tr>

        <tr class="grey">
          <td>DTL_SEG_COUNT&nbsp;</td>

          <td>The number of segments being added to the header&#39;s base
          key</td>
        </tr>

        <tr>
          <td>HAS_REVISIONS&nbsp;</td>

          <td>Database record operations are buffered via the revision API.
          There are three states: NO_REVISIONS, ORDER_REVISIONS and
          SEQUENCE_REVISIONS</td>
        </tr>

        <tr class="grey">
          <td>HDR_HAS_REVISIONS&nbsp;</td>

          <td>Revisioned details are nested. That is, detail views may
          themselves have details. Define it to the number of ancestors views
          that are revisioned. Defaults to 0, indicating revisions are not
          nested. For example, 1&nbsp;indicates the view&rsquo;s header is
          revisioned. The view&rsquo;s nesting level is 1 +
          HDR_HAS_REVISIONS</td>
        </tr>

        <tr>
          <td>REV_SEQ_SKIP&nbsp;</td>

          <td>Skip value for sequenced revision list views</td>
        </tr>

        <tr class="grey">
          <td>RSC_COUNT&nbsp;</td>

          <td>Number of security resources for this view</td>
        </tr>

        <tr>
          <td>STUB_VIEW&nbsp;</td>

          <td>The file functions are all overridden in order to talk to a
          non-database back end file system. For example, ISAM or linked
          lists.</td>
        </tr>

        <tr class="grey">
          <td>SUBCLASS_VIEW&nbsp;</td>

          <td>This view subclasses another. There are three states:
          OVERRIDE_SUBCLASS, ALTER_SUBCLASS and JOIN_SUBCLASS</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x078" name="x078">Composites</a></h4>

    <p>Define how many composites you have by type.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Composite&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>DMND_CMP_COUNT&nbsp;</td>

          <td>Demand hierarchical composite count</td>
        </tr>

        <tr class="grey">
          <td>DTL_CMP_COUNT&nbsp;</td>

          <td>Detail composite count</td>
        </tr>

        <tr>
          <td>HCHY_CMP_COUNT&nbsp;</td>

          <td>Hierarchical composite count</td>
        </tr>

        <tr class="grey">
          <td>HDR_CMP_COUNT&nbsp;</td>

          <td>Header composite count. If specified it must be 1</td>
        </tr>

        <tr>
          <td>IMP_CMP_COUNT&nbsp;</td>

          <td>Implicit composite count</td>
        </tr>

        <tr class="grey">
          <td>MAN_CMP_COUNT&nbsp;</td>

          <td>Manual implicit composite count</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x079" name="x079">Miscellaneous</a></h4>

    <p>These define the basic structure of the view.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Symbol&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>BASE_TBL_COUNT&nbsp;</td>

          <td>Altering base view&#39;s table count</td>
        </tr>

        <tr class="grey">
          <td>CALC_TBL_COUNT&nbsp;</td>

          <td>Number of calculated tables</td>
        </tr>

        <tr>
          <td>FAKE_KEY_COUNT&nbsp;</td>

          <td>This is currently reserved for future use</td>
        </tr>

        <tr class="grey">
          <td>FLD_IDX_COUNT&nbsp;</td>

          <td>Number of field indexes published from the view</td>
        </tr>

        <tr>
          <td>FLD_IDX_LIMIT&nbsp;</td>

          <td>Highest-valued field index + 1</td>
        </tr>

        <tr class="grey">
          <td>FLD_IDX_PFX&nbsp;</td>

          <td>Incorporate application prefix into field indexes, required for
          subclass views</td>
        </tr>

        <tr>
          <td>KEY_COUNT&nbsp;</td>

          <td>Total number of keys published by the view</td>
        </tr>

        <tr class="grey">
          <td>TABLEHANDLE&nbsp;</td>

          <td>Table handle type definition</td>
        </tr>

        <tr>
          <td>TBL_COUNT&nbsp;</td>

          <td>Number of physical tables</td>
        </tr>

        <tr class="grey">
          <td><i>tttt</i>_FLD_AUDIT&nbsp;</td>

          <td>First field of audit stamp (0-based)</td>
        </tr>

        <tr>
          <td><i>tttt</i>_KEY_COUNT&nbsp;</td>

          <td>Number of keys of the primary table</td>
        </tr>
      </tbody>
    </table>

    <h2><a id="x080" name="x080">Behaviour Specializations</a></h2>

    <p>You can specify your own specializations to the template&rsquo;s default
    behaviours.</p>

    <h3><a id="x081" name="x081">Conditional Features</a></h3>

    <p>These are things that select different behaviours, but require no
    coding. Define the corresponding symbols in the <i>zzzz</i>1.H file.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Symbol&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>A4W_API_VERSION&nbsp;</td>

          <td>What version of the API the view needs to call. Defaults to
          0x054A. When using the version 5.4A and later of the template you
          will not be permitted to use any version of the API less than
          5.4A</td>
        </tr>

        <tr class="grey">
          <td>DO_CALLOUTERRORS&nbsp;</td>

          <td>Redundant. The template permanently performs this behaviour.
          [Indicates that all call-outs have return signatures useful for
          indicating success or failure. Formerly, some had the return
          signature void; these change to ERRNUM with this feature.]</td>
        </tr>

        <tr>
          <td>DO_CASCADEPOST&nbsp;<br />
          DO_CASCADEPOSTFIRST&nbsp;</td>

          <td>$$$$$$$$$$ CASCADEPOST_DEFAULT or CASCADEPOST_FIRST or
          CASCADEPOST_AFTERHEADER</td>
        </tr>

        <tr class="grey">
          <td>DO_CLEARAUDIT&nbsp;</td>

          <td>Clear the audit stamp if <a
          href="#func.xxxxPut"><i>xxxx</i>Put</a> is called on a key field
          segment</td>
        </tr>

        <tr>
          <td>DO_CMPNAMESTRUCT&nbsp;</td>

          <td>Redefines the CMPNAME structure, enabling more precise and
          specific treatment of composites, especially when opened</td>
        </tr>

        <tr class="grey">
          <td>DO_DELETEFILTERDELETE&nbsp;</td>

          <td>Activate the use of viewFilterDelete when the view cascades
          deletion to details. By default only <a
          href="#func.xxxxFilterDelete"><i>xxxx</i>FilterDelete</a> cascades
          deletions via viewFilterDelete</td>
        </tr>

        <tr>
          <td>DO_ENTRYSTATEEXTRA&nbsp;</td>

          <td>Extend the entry state with the ENTRYSTATEEXTRA structure</td>
        </tr>

        <tr class="grey">
          <td>DO_EXTENDEDERRORS&nbsp;</td>

          <td>Control the level at which extended errors are understood and
          handled. Extended errors are always used in <i>zzzz</i>.C.
          NO_EXTENDEDERRORS (default, only <i>zzzz</i>.C understands),
          PROCESS_EXTENDEDERRORS (<i>zzzz</i>1.C understands),
          RETURN_EXTENDEDERRORS (returned to the outside), and
          UNIVERSAL_EXTENDEDERRORS (everyone understands and returns)</td>
        </tr>

        <tr>
          <td>DO_FETCHCOUNT&nbsp;</td>

          <td>Define the default number of records retrieved at once when
          dbFetch is called. Defaults to 8 if not defined. Used only when the
          view is opened read-only</td>
        </tr>

        <tr class="grey">
          <td>DO_HELPERSOUTOFLINE&nbsp;</td>

          <td>Suppress inlining of some template helper functions, mostly
          structure dereferencing functions</td>
        </tr>

        <tr>
          <td>DO_INITBYFIELD&nbsp;</td>

          <td>Redundant. The template permanently performs this behaviour.
          [Initialize fields individually by type. Does not obviate the need
          for InitNonBlankFields call-out.]</td>
        </tr>

        <tr class="grey">
          <td>DO_LAZYPUT&nbsp;</td>

          <td>Suppress automatic propagation of foreign keys to composites that
          are opened by the view. You are responsible for calling PutCmpKey
          where necessary. The template always propagates explicit
          compositions.</td>
        </tr>

        <tr>
          <td>DO_LAZYVERIFY&nbsp;</td>

          <td>Perform record validation initiated from <a
          href="#func.xxxxUpdate"><i>xxxx</i>Update</a> lazily. Unchanged
          fields and keys will not be validated, though record-level validation
          still will be.</td>
        </tr>

        <tr class="grey">
          <td>DO_LOADCOMPANYINFO&nbsp;</td>

          <td>$$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>DO_NOREADOPTIMIZING&nbsp;</td>

          <td>No longer supported. [Suppressed dynamic optimizations made when
          the view is opened read-only.]</td>
        </tr>

        <tr class="grey">
          <td>DO_NOREVISIONOPTIMIZING&nbsp;</td>

          <td>No longer supported. [Suppressed dynamic optimizations made when
          the view is opened to suppress revisions.]</td>
        </tr>

        <tr>
          <td>DO_OLDFILEERROR&nbsp;</td>

          <td>Selects old fileError usage. This is useful primarily if you have
          overridden fileError and don&rsquo;t want to rewrite it.</td>
        </tr>

        <tr class="grey">
          <td>DO_OLDINITBODYCASCADE&nbsp;</td>

          <td>$$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>DO_OLDMAPTODETAILS&nbsp;</td>

          <td>No longer supported. [Reactivated the old behaviour of
          MapToDetails and its use by the template. This was that DeleteDetails
          was called conditionally, and MapToDetail is prototyped
          differently.]</td>
        </tr>

        <tr class="grey">
          <td>DO_OLDPERMISSION&nbsp;</td>

          <td>No longer supported. [Selected the obsolete behaviour of
          permission determination, which was determined statically at view
          open time. Does not take into account secGlobalAccess.]</td>
        </tr>

        <tr>
          <td>DO_OLDPOST&nbsp;</td>

          <td>Select the obsolete behaviour of <a
          href="#func.xxxxPost"><i>xxxx</i>Post</a> in a non-revisioned view,
          which was to perform either <a
          href="#func.xxxxInsert"><i>xxxx</i>Insert</a> or <a
          href="#func.xxxxUpdate"><i>xxxx</i>Update</a>. Not recommended.</td>
        </tr>

        <tr class="grey">
          <td>DO_OLDSUBCLASSFIELDBLK&nbsp;</td>

          <td>$$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>DO_OLDVERIFYDIRTY&nbsp;</td>

          <td>$$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>DO_PASSIVECONCURRENCY&nbsp;</td>

          <td>Redundant. The template permanently performs this behaviour. [Use
          true passive concurrency in <a
          href="#func.xxxxUpdate"><i>xxxx</i>Update</a> and <a
          href="#func.xxxxDelete"><i>xxxx</i>Delete</a>. This suppresses record
          locks where possible.]</td>
        </tr>

        <tr>
          <td>DO_PUTSAVECURRENT&nbsp;</td>

          <td>Save the current record during <a
          href="#func.xxxxPut"><i>xxxx</i>Put</a> prior to the new value is
          stored. Permits PutEtc to refer to any field&rsquo;s last value.
          Implied by the activation of DO_SAFEPUTETC.</td>
        </tr>

        <tr class="grey">
          <td>DO_REALSUPPORT&nbsp;</td>

          <td>Redundant. The template permanently performs this behaviour.
          [Activates floating point arithmetic support.]</td>
        </tr>

        <tr>
          <td>DO_RECORDREAD&nbsp;</td>

          <td>Keep a copy of the original record as last read or initialized.
          Automatically activated in the presence of ConcurrencyEtc</td>
        </tr>

        <tr class="grey">
          <td>DO_REVPEDANTIC&nbsp;</td>

          <td>Suppress intelligent recreation of revision lists</td>
        </tr>

        <tr>
          <td>DO_SAFEPUTETC&nbsp;</td>

          <td>Augment the use of PutEtc, such that if PutEtc returns an error
          the <a href="#func.xxxxPut"><i>xxxx</i>Put</a> rolls back.</td>
        </tr>

        <tr class="grey">
          <td>DO_SCRATCHSTACK&nbsp;</td>

          <td>Deprecated. Set the size of the scratch stack pool. Defaults to
          0.</td>
        </tr>

        <tr>
          <td>DO_SELECTFETCH&nbsp;</td>

          <td>No longer supported. Callers should open views read-only using
          viewInstanceOpen instead. [Enabled use of dbSelect/dbFetch.]</td>
        </tr>

        <tr class="grey">
          <td>DO_STANDARDERRORS&nbsp;</td>

          <td>Redundant. The template permanently performs this behaviour.</td>
        </tr>

        <tr>
          <td>DO_SUPPRESSDUPLICATE&nbsp;</td>

          <td>Suppress the reporting of an error message if <a
          href="#func.xxxxInsert"><i>xxxx</i>Insert</a> or <a
          href="#func.xxxxUpdate"><i>xxxx</i>Update</a> encounter a duplicate
          key error. Note that ERRNUM_RECORD_DUPLICATE is still returned.</td>
        </tr>

        <tr class="grey">
          <td>DO_TRANSLEVELCHECK&nbsp;</td>

          <td>Suppress transaction bracketing of database update operations if
          a transaction is already open</td>
        </tr>

        <tr>
          <td>DO_VIEWHANDLE&nbsp;</td>

          <td>Extend the view handle with the VEXTRA structure. This feature is
          not needed when compiling with C++; instead you should edit the
          VEXTRA structure defined in the <i>zzzz</i>3.H modifiable file.</td>
        </tr>

        <tr class="grey">
          <td>TEMPLATE_WARNING_LEVEL&nbsp;</td>

          <td>Controls how verbose the template is when reporting warnings on
          the consistency and correctness of your settings. 0 is the most
          verbose, reporting all questionable conditions. 1&nbsp;(the default)
          suppresses trivial warnings. 2 suppresses all warnings. Compilation
          continues in the presence of warnings. Error are always reported and
          halt compilation, regardless of this setting.</td>
        </tr>

        <tr>
          <td>VALIDATE_BUFFER&nbsp;</td>

          <td>Set the strictness of validations for the sizes of buffers passed
          to <a href="#func.xxxxGet"><i>xxxx</i>Get</a>, <a
          href="#func.xxxxPut"><i>xxxx</i>Put</a>, <a
          href="#func.xxxxBlkGet"><i>xxxx</i>BlkGet</a>, <a
          href="#func.xxxxBlkPut"><i>xxxx</i>BlkPut</a>. The choices are:
          VALIDATE_NO_BUFFER that makes no checks, VALIDATE_FIXED_BUFFER that
          checks any types that are of a fixed size (default),
          VALIDATE_BCD_BUFFER that checks BCD-encoded numbers also, and
          VALIDATE_ANY_BUFFER that checks all types</td>
        </tr>

        <tr class="grey">
          <td>VALIDATE_DATA&nbsp;</td>

          <td>Set the strictness of validations for internal data
          representation. The choices are: VALIDATE_NO_DATA that makes no
          checks, VALIDATE_BCD_DATA that checks BCD-encoded numbers (default),
          and VALIDATE_DATETIME_DATA that checks BCDs as well as dates and
          times</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x082" name="x082">Call-outs</a></h3>

    <p>Call-outs are functions that fulfill a specific task. Define the symbol
    in the <i>zzzz</i>1.H file and fill in the corresponding function(s) in the
    <i>zzzz</i>1.C file</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Symbol&nbsp;</td>

          <td class="head">Functions&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>DO_ATTRIBETC&nbsp;</td>

          <td>AttribGet, AttribPut, AttribTest, AttribClear&nbsp;</td>

          <td>Return the field&#39;s current attributes. The AttribPut,
          AttribTest and AttribClear functions should be written in terms of
          AttribGet. Called by <a
          href="#func.xxxxAttrib"><i>xxxx</i>Attrib</a>, <a
          href="#func.xxxxGet"><i>xxxx</i>Get</a>, <a
          href="#func.xxxxPresents"><i>xxxx</i>Presents</a>, <a
          href="#func.xxxxPut"><i>xxxx</i>Put</a>, <a
          href="#func.xxxxOrder"><i>xxxx</i>Order</a>, <a
          href="#func.xxxxFilterSelect"><i>xxxx</i>FilterSelect</a>, <a
          href="#func.xxxxOpen"><i>xxxx</i>Open</a>, <a
          href="#func.xxxxInstanceOpen"><i>xxxx</i>InstanceOpen</a>, <a
          href="#func.xxxxUpdate"><i>xxxx</i>Update</a>, <a
          href="#func.xxxxVerify"><i>xxxx</i>Verify</a>, <a
          href="#func.xxxxDelete"><i>xxxx</i>Delete</a>, <a
          href="#func.xxxxFilterDelete"><i>xxxx</i>FilterDelete</a>, <a
          href="#func.xxxxInit"><i>xxxx</i>Init</a>, <a
          href="#func.xxxxRecordClear"><i>xxxx</i>RecordClear</a>, <a
          href="#func.xxxxRecordGenerate"><i>xxxx</i>RecordGenerate</a>, <a
          href="#func.xxxxInsert"><i>xxxx</i>Insert</a>, <a
          href="#func.xxxxCancel"><i>xxxx</i>Cancel</a>, <a
          href="#func.xxxxRevisionCancel"><i>xxxx</i>RevisionCancel</a>, <a
          href="#func.xxxxFetch"><i>xxxx</i>Fetch</a>, <a
          href="#func.xxxxFetchLock"><i>xxxx</i>FetchLock</a>, <a
          href="#func.xxxxFilterFetch"><i>xxxx</i>FilterFetch</a>, <a
          href="#func.xxxxRead"><i>xxxx</i>Read</a>, <a
          href="#func.xxxxReadLock"><i>xxxx</i>ReadLock</a></td>
        </tr>

        <tr class="grey">
          <td>DO_CALCULATEFIELDS&nbsp;</td>

          <td>CalculateFields&nbsp;</td>

          <td>Calculate fields in the calculated record. Called by <a
          href="#func.xxxxOpen"><i>xxxx</i>Open</a>, <a
          href="#func.xxxxInstanceOpen"><i>xxxx</i>InstanceOpen</a>, <a
          href="#func.xxxxInit"><i>xxxx</i>Init</a>, <a
          href="#func.xxxxRecordClear"><i>xxxx</i>RecordClear</a>, <a
          href="#func.xxxxRecordGenerate"><i>xxxx</i>RecordGenerate</a>, <a
          href="#func.xxxxCancel"><i>xxxx</i>Cancel</a>, <a
          href="#func.xxxxRevisionCancel"><i>xxxx</i>RevisionCancel</a>, <a
          href="#func.xxxxFetch"><i>xxxx</i>Fetch</a>, <a
          href="#func.xxxxFetchLock"><i>xxxx</i>FetchLock</a>, <a
          href="#func.xxxxFilterFetch"><i>xxxx</i>FilterFetch</a>, <a
          href="#func.xxxxRead"><i>xxxx</i>Read</a>, <a
          href="#func.xxxxReadLock"><i>xxxx</i>ReadLock</a></td>
        </tr>

        <tr>
          <td>DO_COMPOSEETC&nbsp;</td>

          <td>ComposeEtc&nbsp;</td>

          <td>Additional <a href="#func.xxxxCompose"><i>xxxx</i>Compose</a>
          logic. Called at the end of <a
          href="#func.xxxxCompose"><i>xxxx</i>Compose</a></td>
        </tr>

        <tr class="grey">
          <td>DO_CONCURRENCYETC&nbsp;</td>

          <td>ConcurrencyEtc&nbsp;</td>

          <td>Reconcile optimisitic concurrency conflict. Called by <a
          href="#func.xxxxUpdate"><i>xxxx</i>Update</a></td>
        </tr>

        <tr>
          <td>DO_CREATEETC&nbsp;</td>

          <td>CreateEtc&nbsp;</td>

          <td>Additional table creation logic. Called by <a
          href="#func.xxxxCreate"><i>xxxx</i>Create</a></td>
        </tr>

        <tr class="grey">
          <td>DO_DELETEVALID&nbsp;</td>

          <td>DeleteValid&nbsp;</td>

          <td>Return whether record deletion can proceed. Called by <a
          href="#func.xxxxDelete"><i>xxxx</i>Delete</a> and <a
          href="#func.xxxxFilterDelete"><i>xxxx</i>FilterDelete</a>.</td>
        </tr>

        <tr>
          <td>DO_GENERATEKEY&nbsp;<br />
          DO_GENERATEKEYDELAYED&nbsp;</td>

          <td>GenerateKey&nbsp;</td>

          <td>
            Generate a new unique key. Called by <a
            href="#func.xxxxInit"><i>xxxx</i>Init</a> when the last key segment
            is zeroes. Called by <a href="#func.xxxxInit"><i>xxxx</i>Init</a>
            and <a
            href="#func.xxxxRecordGenerate"><i>xxxx</i>RecordGenerate</a>.
            If the DO_GENERATEKEYDELAYED is defined, then GenerateKey()
            accepts an additional parameter, telling you which parts of the
            record to initialize. The additional parameter is a bitset, whose
            value is a disjunction of the following constants: GENERATEKEY_KEY,
            and GENERATEKEY_RECORD.
          </td>
        </tr>

        <tr class="grey">
          <td>DO_GETETC&nbsp;</td>

          <td>GetEtc&nbsp;</td>

          <td>Prepare field for retrieval. Called by <a
          href="#func.xxxxGet"><i>xxxx</i>Get</a> and <a
          href="#func.xxxxBlkGet"><i>xxxx</i>BlkGet</a></td>
        </tr>

        <tr>
          <td>DO_HEADERETC&nbsp;</td>

          <td>HeaderEtc&nbsp;</td>

          <td>Perform detail to header summation with the specified pair of
          fields. Also activates the headerFields[] array. Called by <a
          href="#func.xxxxInsert"><i>xxxx</i>Insert</a>, <a
          href="#func.xxxxUpdate"><i>xxxx</i>Update</a>, <a
          href="#func.xxxxDelete"><i>xxxx</i>Delete</a></td>
        </tr>

        <tr class="grey">
          <td>DO_INITFIELDSTRUCTETC&nbsp;</td>

          <td>InitFieldStructEtc&nbsp;</td>

          <td>Set the initial states of the field definition structures. Called
          by <a href="#func.xxxxOpen"><i>xxxx</i>Open</a> and <a
          href="#func.xxxxInstanceOpen"><i>xxxx</i>InstanceOpen</a>.</td>
        </tr>

        <tr>
          <td>DO_INITNONBLANKFIELDS&nbsp;</td>

          <td>InitNonBlankFields&nbsp;</td>

          <td>Initialize the content of the current record. Called by <a
          href="#func.xxxxOpen"><i>xxxx</i>Open</a>, <a
          href="#func.xxxxInstanceOpen"><i>xxxx</i>InstanceOpen</a>, <a
          href="#func.xxxxInit"><i>xxxx</i>Init</a>, <a
          href="#func.xxxxRecordClear"><i>xxxx</i>RecordClear</a>, <a
          href="#func.xxxxRecordGenerate"><i>xxxx</i>RecordGenerate</a>, <a
          href="#func.xxxxCancel"><i>xxxx</i>Cancel</a>, and <a
          href="#func.xxxxRevisionCancel"><i>xxxx</i>RevisionCancel</a></td>
        </tr>

        <tr class="grey">
          <td>DO_LIBMAINETC&nbsp;</td>

          <td>LibMainEtc&nbsp;</td>

          <td>Additional .DLL load logic. Called by LibMain.</td>
        </tr>

        <tr>
          <td>DO_OPENETC&nbsp;</td>

          <td>OpenEtc&nbsp;</td>

          <td>Additional open logic. Use in preference to overriding <a
          href="#func.xxxxInstanceOpen"><i>xxxx</i>InstanceOpen</a> and <a
          href="#func.xxxxOpen"><i>xxxx</i>Open</a> when additional resource
          need to allocated. Called by <a
          href="#func.xxxxInstanceOpen"><i>xxxx</i>InstanceOpen</a> and <a
          href="#func.xxxxOpen"><i>xxxx</i>Open</a></td>
        </tr>

        <tr class="grey">
          <td>DO_PREPOSTETC&nbsp;</td>

          <td>PrePostEtc&nbsp;</td>

          <td>Modify a revision record during posting before being written.
          Calls revExtract instead of revPost to commit database changes.
          Called by <a href="#func.xxxxPost"><i>xxxx</i>Post</a></td>
        </tr>

        <tr>
          <td>DO_PROCESSETC&nbsp;</td>

          <td>ProcessEtc&nbsp;</td>

          <td>Processing logic. Called by <a
          href="#func.xxxxProcess"><i>xxxx</i>Process</a></td>
        </tr>

        <tr class="grey">
          <td>DO_PUTETC&nbsp;</td>

          <td>PutEtc&nbsp;</td>

          <td>Additional <a href="#func.xxxxPut"><i>xxxx</i>Put</a> logic.
          Called at the end, whether or not the field has changed. Called by <a
          href="#func.xxxxPut"><i>xxxx</i>Put</a> and <a
          href="#func.xxxxBlkPut"><i>xxxx</i>BlkPut</a>.</td>
        </tr>

        <tr>
          <td>DO_REKEYEDREVISION&nbsp;</td>

          <td>RekeyedRevision&nbsp;</td>

          <td>Invoked during <i>xxxx</i>RevisionRekey(), after each record has
          been rekeyed.</td>
        </tr>

        <tr class="grey">
          <td>DO_REVPOSTETC&nbsp;</td>

          <td>RevPostEtc&nbsp;</td>

          <td>Additional revision posting logic. Lets you perform additional
          things after each record is committed. Called by <a
          href="#func.xxxxPost"><i>xxxx</i>Post</a></td>
        </tr>

        <tr>
          <td>DO_ROTOENTRYETC&nbsp;</td>

          <td>rotoEntryEtc&nbsp;</td>

          <td>Additional rotoEntry logic. Called by rotoEntry</td>
        </tr>

        <tr class="grey">
          <td>DO_VALIDATEFIELDDEPENDENCIES&nbsp;</td>

          <td>ValidateFieldDependencies&nbsp;</td>

          <td>Validate the current record. Called by <a
          href="#func.xxxxVerify"><i>xxxx</i>Verify</a></td>
        </tr>

        <tr>
          <td>DO_VALIDATEKEYS&nbsp;</td>

          <td>ValidateKey&nbsp;</td>

          <td>Validate the specified key. Called by <a
          href="#func.xxxxPut"><i>xxxx</i>Put</a>, <a
          href="#func.xxxxBlkPut"><i>xxxx</i>BlkPut</a> and <a
          href="#func.xxxxVerify"><i>xxxx</i>Verify</a></td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x148" name="x148">Pseudo-overrides</a></h3>

    <p>$$$$$$$$$$$$ Call-outs are functions that fulfill a specific task. Define the symbol
    in the <i>zzzz</i>1.H file and fill in the corresponding function(s) in the
    <i>zzzz</i>1.C file</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Symbol&nbsp;</td>

          <td class="head">Functions&nbsp;</td>

          <td class="head">Called By</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>DO_AUTOCANCELBODY&nbsp;</td>

          <td><a href="#func.AutoCancelBody">AutoCancelBody</a>&nbsp;</td>

          <td><a
          href="#func.xxxxPut"><i>xxxx</i>Put</a> and <a
          href="#func.xxxxBlkPut"><i>xxxx</i>BlkPut</a>.</td>
        </tr>

        <tr class="grey">
          <td>DO_FINDPRESENTSINFO&nbsp;</td>

          <td><a href="#func.FindPresentsInfo">FindPresentsInfo</a>&nbsp;</td>

          <td>Return a reference to the PRESENTSINFO of the field&rsquo;s
          presentation information. Called by <a
          href="#func.xxxxOpen"><i>xxxx</i>Open</a>, <a
          href="#func.xxxxInstanceOpen"><i>xxxx</i>InstanceOpen</a>, <a
          href="#func.xxxxInit"><i>xxxx</i>Init</a>, <a
          href="#func.xxxxRecordClear"><i>xxxx</i>RecordClear</a>, <a
          href="#func.xxxxRecordGenerate"><i>xxxx</i>RecordGenerate</a>, <a
          href="#func.xxxxCancel"><i>xxxx</i>Cancel</a>, <a
          href="#func.xxxxRevisionCancel"><i>xxxx</i>RevisionCancel</a>, <a
          href="#func.xxxxPut"><i>xxxx</i>Put</a>, <a
          href="#func.xxxxBlkPut"><i>xxxx</i>BlkPut</a>, <a
          href="#func.xxxxPresents"><i>xxxx</i>Presents</a> and <a
          href="#func.xxxxVerify"><i>xxxx</i>Verify</a></td>
        </tr>

        <tr>
          <td>DO_PUTCMPFIELD&nbsp;</td>

          <td><a href="#func.PutCmpField">PutCmpField</a>,
          <a href="#func.PutCmpFields">PutCmpFields</a>,
          <a href="#func.PutCmpFieldAux">PutCmpFieldAux</a>&nbsp;</td>

          <td><a href="#func.xxxxInit"><i>xxxx</i>Init</a>, <a
          href="#func.xxxxRecordClear"><i>xxxx</i>RecordClear</a>, <a
          href="#func.xxxxRecordGenerate"><i>xxxx</i>RecordGenerate</a>, <a
          href="#func.xxxxCancel"><i>xxxx</i>Cancel</a>, <a
          href="#func.xxxxRevisionCancel"><i>xxxx</i>RevisionCancel</a>, <a
          href="#func.xxxxPut"><i>xxxx</i>Put</a>, <a
          href="#func.xxxxFetch"><i>xxxx</i>Fetch</a>, <a
          href="#func.xxxxFetchLock"><i>xxxx</i>FetchLock</a>, <a
          href="#func.xxxxRead"><i>xxxx</i>Read</a>, and <a
          href="#func.xxxxReadLock"><i>xxxx</i>ReadLock</a></td>
        </tr>

        <tr class="grey">
          <td>DO_REPORTERROR&nbsp;</td>

          <td><a href="#func.ReportError">ReportError</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>DO_REPORTERRORVIAPIB&nbsp;</td>

          <td><a href="#func.ReportErrorViaPIB">ReportErrorViaPIB</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>DO_REPORTGENERICERROR&nbsp;</td>

          <td><a href="#func.ReportGenericError">ReportGenericError</a>&nbsp;</td>

          <td>Customize reporting of errors that by default are routed through
          the API&rsquo;s errPutGeneric function. Called by dbErrorV,
          filterErrorV &amp; revErrorV, which in turn are called by many of the
          view entrypoints.</td>
        </tr>

        <tr>
          <td>DO_REPORTGENERICERRORVIAPIB&nbsp;</td>

          <td><a href="#func.ReportGenericErrorViaPIB">ReportGenericErrorViaPIB</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$$</td>
        </tr>

      </tbody>
    </table>




    <h3><a id="x083" name="x083">Overrides</a></h3>

    <p>With an override you can rewrite entire functions that the template
    normally implements. In this way you can insert functionality before, after
    or instead of the original template functionality. You can always call back
    to the original function. The tables which follow list the symbol to define
    in the <i>zzzz</i>1.H file, the function to redefine in the <i>zzzz</i>1.C
    file, and the name of the function implementing the original functionality.
    There are no descriptions in this section, as all these functions are
    described in the &ldquo;Template Helper Functions&rdquo; section below.</p>

    <h4><a id="x084" name="x084">View entrypoints</a></h4>

    <p>Each of the main entrypoints to a view can each be overridden. This
    includes rotoEntry, which calls the individual entrypoints.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Symbol&nbsp;</td>

          <td class="head">Function&nbsp;</td>

          <td class="head">Original Functionality</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>DO_ROTOENTRY&nbsp;</td>

          <td><a href="#func.rotoEntry">rotoEntry</a>&nbsp;</td>

          <td>rotoEntryBase</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>Attribs&nbsp;</td>

          <td><a href="#func.xxxxAttribs"><i>xxxx</i>Attribs</a>&nbsp;</td>

          <td><i>xxxx</i>BaseAttribs</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>BlkGet&nbsp;</td>

          <td><a href="#func.xxxxBlkGet"><i>xxxx</i>BlkGet</a>&nbsp;</td>

          <td><i>xxxx</i>BaseBlkGet</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>BlkPut&nbsp;</td>

          <td><a href="#func.xxxxBlkPut"><i>xxxx</i>BlkPut</a>&nbsp;</td>

          <td><i>xxxx</i>BaseBlkPut</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>Browse&nbsp;</td>

          <td><a href="#func.xxxxBrowse"><i>xxxx</i>Browse</a>&nbsp;</td>

          <td><i>xxxx</i>BaseBrowse</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>Cancel&nbsp;</td>

          <td><a href="#func.xxxxCancel"><i>xxxx</i>Cancel</a>&nbsp;</td>

          <td><i>xxxx</i>BaseCancel</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>Close&nbsp;</td>

          <td><a href="#func.xxxxClose"><i>xxxx</i>Close</a>&nbsp;</td>

          <td><i>xxxx</i>BaseClose</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>CmpNames&nbsp;</td>

          <td><a href="#func.xxxxCmpNames"><i>xxxx</i>CmpNames</a>&nbsp;</td>

          <td><i>xxxx</i>BaseCmpNames</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>Compose&nbsp;</td>

          <td><a href="#func.xxxxCompose"><i>xxxx</i>Compose</a>&nbsp;</td>

          <td><i>xxxx</i>BaseCompose</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>Create&nbsp;</td>

          <td><a href="#func.xxxxCreate"><i>xxxx</i>Create</a>&nbsp;</td>

          <td><i>xxxx</i>BaseCreate</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>Delete&nbsp;</td>

          <td><a href="#func.xxxxDelete"><i>xxxx</i>Delete</a>&nbsp;</td>

          <td><i>xxxx</i>BaseDelete</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>Dirty&nbsp;</td>

          <td><a href="#func.xxxxDirty"><i>xxxx</i>Dirty</a>&nbsp;</td>

          <td><i>xxxx</i>BaseDirty</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>Drop&nbsp;</td>

          <td><a href="#func.xxxxDrop"><i>xxxx</i>Drop</a>&nbsp;</td>

          <td><i>xxxx</i>BaseDrop</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>Exists&nbsp;</td>

          <td><a href="#func.xxxxExists"><i>xxxx</i>Exists</a>&nbsp;</td>

          <td><i>xxxx</i>BaseExists</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>Fetch&nbsp;</td>

          <td><a href="#func.xxxxFetch"><i>xxxx</i>Fetch</a>&nbsp;</td>

          <td><i>xxxx</i>BaseFetch</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>FetchLock&nbsp;</td>

          <td><a href="#func.xxxxFetchLock"><i>xxxx</i>FetchLock</a>&nbsp;</td>

          <td><i>xxxx</i>BaseFetchLock</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>Field&nbsp;</td>

          <td><a href="#func.xxxxField"><i>xxxx</i>Field</a>&nbsp;</td>

          <td><i>xxxx</i>BaseField</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>Fields&nbsp;</td>

          <td><a href="#func.xxxxFields"><i>xxxx</i>Fields</a>&nbsp;</td>

          <td><i>xxxx</i>BaseFields</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>FilterCount&nbsp;</td>

          <td><a
          href="#func.xxxxFilterCount"><i>xxxx</i>FilterCount</a>&nbsp;</td>

          <td><i>xxxx</i>BaseFilterCount</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>FilterDelete&nbsp;</td>

          <td><a
          href="#func.xxxxFilterDelete"><i>xxxx</i>FilterDelete</a>&nbsp;</td>

          <td><i>xxxx</i>BaseFilterDelete</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>FilterFetch&nbsp;</td>

          <td><a
          href="#func.xxxxFilterFetch"><i>xxxx</i>FilterFetch</a>&nbsp;</td>

          <td><i>xxxx</i>BaseFilterFetch</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>FilterSelect&nbsp;</td>

          <td><a
          href="#func.xxxxFilterSelect"><i>xxxx</i>FilterSelect</a>&nbsp;</td>

          <td><i>xxxx</i>BaseFilterSelect</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>Get&nbsp;</td>

          <td><a href="#func.xxxxGet"><i>xxxx</i>Get</a>&nbsp;</td>

          <td><i>xxxx</i>BaseGet</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>Init&nbsp;</td>

          <td><a href="#func.xxxxInit"><i>xxxx</i>Init</a>&nbsp;</td>

          <td><i>xxxx</i>BaseInit</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>Insert&nbsp;</td>

          <td><a href="#func.xxxxInsert"><i>xxxx</i>Insert</a>&nbsp;</td>

          <td><i>xxxx</i>BaseInsert</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>InstanceNotify&nbsp;</td>

          <td><a
          href="#func.xxxxInstanceNotify"><i>xxxx</i>InstanceNotify</a>&nbsp;</td>

          <td><i>xxxx</i>BaseInstanceNotify</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>InstanceOpen&nbsp;</td>

          <td><a
          href="#func.xxxxInstanceOpen"><i>xxxx</i>InstanceOpen</a>&nbsp;</td>

          <td><i>xxxx</i>BaseInstanceOpen</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>InstanceProtocol&nbsp;</td>

          <td><a
          href="#func.xxxxInstanceProtocol"><i>xxxx</i>InstanceProtocol</a>&nbsp;</td>

          <td><i>xxxx</i>BaseInstanceProtocol</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>InstanceSecurity&nbsp;</td>

          <td><a
          href="#func.xxxxInstanceSecurity"><i>xxxx</i>InstanceSecurity</a>&nbsp;</td>

          <td><i>xxxx</i>BaseInstanceSecurity</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>Key&nbsp;</td>

          <td><a href="#func.xxxxKey"><i>xxxx</i>Key</a>&nbsp;</td>

          <td><i>xxxx</i>BaseKey</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>Keys&nbsp;</td>

          <td><a href="#func.xxxxKeys"><i>xxxx</i>Keys</a>&nbsp;</td>

          <td><i>xxxx</i>BaseKeys</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>Name&nbsp;</td>

          <td><a href="#func.xxxxName"><i>xxxx</i>Name</a>&nbsp;</td>

          <td><i>xxxx</i>BaseName</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>Open&nbsp;</td>

          <td><a href="#func.xxxxOpen"><i>xxxx</i>Open</a>&nbsp;</td>

          <td><i>xxxx</i>BaseOpen</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>Order&nbsp;</td>

          <td><a href="#func.xxxxOrder"><i>xxxx</i>Order</a>&nbsp;</td>

          <td><i>xxxx</i>BaseOrder</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>Post&nbsp;</td>

          <td><a href="#func.xxxxPost"><i>xxxx</i>Post</a>&nbsp;</td>

          <td><i>xxxx</i>BasePost</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>Presents&nbsp;</td>

          <td><a href="#func.xxxxPresents"><i>xxxx</i>Presents</a>&nbsp;</td>

          <td><i>xxxx</i>BasePresents</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>Process&nbsp;</td>

          <td><a href="#func.xxxxProcess"><i>xxxx</i>Process</a>&nbsp;</td>

          <td><i>xxxx</i>BaseProcess</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>Put&nbsp;</td>

          <td><a href="#func.xxxxPut"><i>xxxx</i>Put</a>&nbsp;</td>

          <td><i>xxxx</i>BasePut</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>Read&nbsp;</td>

          <td><a href="#func.xxxxRead"><i>xxxx</i>Read</a>&nbsp;</td>

          <td><i>xxxx</i>BaseRead</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>ReadLock&nbsp;</td>

          <td><a href="#func.xxxxReadLock"><i>xxxx</i>ReadLock</a>&nbsp;</td>

          <td><i>xxxx</i>BaseReadLock</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>RecordClear&nbsp;</td>

          <td><a
          href="#func.xxxxRecordClear"><i>xxxx</i>RecordClear</a>&nbsp;</td>

          <td><i>xxxx</i>BaseRecordClear</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>RecordGenerate&nbsp;</td>

          <td><a
          href="#func.xxxxRecordGenerate"><i>xxxx</i>RecordGenerate</a>&nbsp;</td>

          <td><i>xxxx</i>BaseRecordGenerate</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>RevisionCancel&nbsp;</td>

          <td><a
          href="#func.xxxxRevisionCancel"><i>xxxx</i>RevisionCancel</a>&nbsp;</td>

          <td><i>xxxx</i>BaseRevisionCancel</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>RevisionExists&nbsp;</td>

          <td><a
          href="#func.xxxxRevisionExists"><i>xxxx</i>RevisionExists</a>&nbsp;</td>

          <td><i>xxxx</i>BaseRevisionExists</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>RevisionPost&nbsp;</td>

          <td><a
          href="#func.xxxxRevisionPost"><i>xxxx</i>RevisionPost</a>&nbsp;</td>

          <td><i>xxxx</i>BaseRevisionPost</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>RevisionRekey&nbsp;</td>

          <td><a
          href="#func.xxxxRevisionRekey"><i>xxxx</i>RevisionRekey</a>&nbsp;</td>

          <td><i>xxxx</i>BaseRevisionRekey</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>RevisionUnposted&nbsp;</td>

          <td><a
          href="#func.xxxxRevisionUnposted"><i>xxxx</i>RevisionUnposted</a>&nbsp;</td>

          <td><i>xxxx</i>BaseRevisionUnposted</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>Security&nbsp;</td>

          <td><a href="#func.xxxxSecurity"><i>xxxx</i>Security</a>&nbsp;</td>

          <td><i>xxxx</i>BaseSecurity</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>TableEmpty&nbsp;</td>

          <td><a
          href="#func.xxxxTableEmpty"><i>xxxx</i>TableEmpty</a>&nbsp;</td>

          <td><i>xxxx</i>BaseTableEmpty</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>Type&nbsp;</td>

          <td><a href="#func.xxxxType"><i>xxxx</i>Type</a>&nbsp;</td>

          <td><i>xxxx</i>BaseType</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>UnLock&nbsp;</td>

          <td><a href="#func.xxxxUnLock"><i>xxxx</i>UnLock</a>&nbsp;</td>

          <td><i>xxxx</i>BaseUnLock</td>
        </tr>

        <tr class="grey">
          <td>DO_<i>xxxx</i>Update&nbsp;</td>

          <td><a href="#func.xxxxUpdate"><i>xxxx</i>Update</a>&nbsp;</td>

          <td><i>xxxx</i>BaseUpdate</td>
        </tr>

        <tr>
          <td>DO_<i>xxxx</i>Verify&nbsp;</td>

          <td><a href="#func.xxxxVerify"><i>xxxx</i>Verify</a>&nbsp;</td>

          <td><i>xxxx</i>BaseVerify</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x085" name="x085">Structure Dereferencing Functions</a></h4>

    <p>You can override most of the structure dereferencing functions, and
    miscellaneous helper functions. Rather than fill in a function, however,
    you define a macro, which is then called by the corresponding helper
    function from the template.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Macro&nbsp;</td>

          <td class="head">Helper&nbsp;</td>

          <td class="head">Original Functionality</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>DoFindCmp&nbsp;</td>

          <td><a href="#func.FindCmp">FindCmp</a>&nbsp;</td>

          <td>InlineFindCmp</td>
        </tr>

        <tr class="grey">
          <td>DoFindCmpDef&nbsp;</td>

          <td><a href="#func.FindCmpDef">FindCmpDef</a>&nbsp;</td>

          <td>InlineFindCmpDef</td>
        </tr>

        <tr>
          <td>DoFindCmpField&nbsp;</td>

          <td><a href="#func.FindCmpField">FindCmpField</a>&nbsp;</td>

          <td>InlineFindCmpField</td>
        </tr>

        <tr class="grey">
          <td>DoFindCmpForeign&nbsp;</td>

          <td><a href="#func.FindCmpForeign">FindCmpForeign</a>&nbsp;</td>

          <td>InlineFindCmpForeign</td>
        </tr>

        <tr>
          <td>DoFindCmpKey&nbsp;</td>

          <td><a href="#func.FindCmpKey">FindCmpKey</a>&nbsp;</td>

          <td>InlineFindCmpKey</td>
        </tr>

        <tr class="grey">
          <td>DoFindCmpName&nbsp;</td>

          <td><a href="#func.FindCmpName">FindCmpName</a>&nbsp;</td>

          <td>InlineFindCmpName</td>
        </tr>

        <tr>
          <td>DoFindCmpNotify&nbsp;</td>

          <td><a href="#func.FindCmpNotify">FindCmpNotify</a>&nbsp;</td>

          <td>InlineFindCmpNotify</td>
        </tr>

        <tr class="grey">
          <td>DoFindDetailMap&nbsp;</td>

          <td><a href="#func.FindDetailMap">FindDetailMap</a>&nbsp;</td>

          <td>InlineFindDetailMap</td>
        </tr>

        <tr>
          <td>DoFindFieldIndex&nbsp;</td>

          <td><a href="#func.FindFieldIndex">FindFieldIndex</a>&nbsp;</td>

          <td>InlineFindFieldIndex</td>
        </tr>

        <tr class="grey">
          <td>DoFindFieldMap&nbsp;</td>

          <td><a href="#func.FindFieldMap">FindFieldMap</a>&nbsp;</td>

          <td>InlineFindFieldMap</td>
        </tr>

        <tr>
          <td>DoFindFieldValue&nbsp;</td>

          <td><a href="#func.FindFieldValue">FindFieldValue</a>&nbsp;</td>

          <td>InlineFindFieldValue</td>
        </tr>

        <tr class="grey">
          <td>DoFindGenStub&nbsp;</td>

          <td><a href="#func.FindGenStub">FindGenStub</a>&nbsp;</td>

          <td>InlineFindGenStub</td>
        </tr>

        <tr>
          <td>DoFindImpOpen&nbsp;</td>

          <td><a href="#func.FindImpOpen">FindImpOpen</a>&nbsp;</td>

          <td>InlineFindImpOpen</td>
        </tr>

        <tr class="grey">
          <td>DoFindImpRead&nbsp;</td>

          <td><a href="#func.FindImpRead">FindImpRead</a>&nbsp;</td>

          <td>InlineFindImpRead</td>
        </tr>

        <tr>
          <td>DoFindKeyDef&nbsp;</td>

          <td><a href="#func.FindKeyDef">FindKeyDef</a>&nbsp;</td>

          <td>InlineFindKeyDef</td>
        </tr>

        <tr class="grey">
          <td>DoFindPermissionMap&nbsp;</td>

          <td><a
          href="#func.FindPermissionMap">FindPermissionMap</a>&nbsp;</td>

          <td>InlineFindPermissionMap</td>
        </tr>

        <tr>
          <td>DoFindRecord&nbsp;</td>

          <td><a href="#func.FindRecord">FindRecord</a>&nbsp;</td>

          <td>InlineFindRecord</td>
        </tr>

        <tr class="grey">
          <td>DoFindRecordNotify&nbsp;</td>

          <td><a href="#func.FindRecordNotify">FindRecordNotify</a>&nbsp;</td>

          <td>InlineFindRecordNotify</td>
        </tr>

        <tr>
          <td>DoFindRecordRead&nbsp;</td>

          <td><a href="#func.FindRecordRead">FindRecordRead</a>&nbsp;</td>

          <td>InlineFindRecordRead</td>
        </tr>

        <tr class="grey">
          <td>DoFindRecordTemp&nbsp;</td>

          <td><a href="#func.FindRecordTemp">FindRecordTemp</a>&nbsp;</td>

          <td>InlineFindRecordTemp</td>
        </tr>

        <tr>
          <td>DoFindRevCache</td>

          <td><a href="#func.FindRevCache">FindRevCache</a></td>

          <td>InlineFindRevCache</td>
        </tr>

        <tr class="grey">
          <td>DoFindRevLevel</td>

          <td><a href="#func.FindRevLevel">FindRevLevel</a></td>

          <td>InlineFindRevLevel</td>
        </tr>

        <tr>
          <td>DoFindTableHandle&nbsp;</td>

          <td><a href="#func.FindTableHandle">FindTableHandle</a>&nbsp;</td>

          <td>InlineFindTableHandle</td>
        </tr>

        <tr class="grey">
          <td>DoFindTableInfo</td>

          <td><a href="#func.FindTableInfo">FindTableInfo</a></td>

          <td>InlineFindTableInfo</td>
        </tr>

        <tr>
          <td>DoFindTableMap&nbsp;</td>

          <td><a href="#func.FindTableMap">FindTableMap</a>&nbsp;</td>

          <td>InlineFindTableMap</td>
        </tr>

        <tr class="grey">
          <td>DoFindTableRev&nbsp;</td>

          <td><a href="#func.FindTableRev">FindTableRev</a>&nbsp;</td>

          <td>InlineFindTableRev</td>
        </tr>

        <tr>
          <td>DoFindTableWidth</td>

          <td><a href="#func.FindTableWidth">FindTableWidth</a></td>

          <td>InlineFindTableWidth</td>
        </tr>

        <tr class="grey">
          <td>DoMapToInternalComposite&nbsp;</td>

          <td><a
          href="#func.MapToInternalComposite">MapToInternalComposite</a>&nbsp;</td>

          <td>InlineMapToInternalComposite</td>
        </tr>

        <tr>
          <td>DoMapToNewFieldIndex&nbsp;</td>

          <td><a
          href="#func.MapToNewFieldIndex">MapToNewFieldIndex</a>&nbsp;</td>

          <td>InlineMapToNewFieldIndex</td>
        </tr>

        <tr class="grey">
          <td>DoMaxDatabaseError&nbsp;</td>

          <td><a href="#func.MaxDatabaseError">MaxDatabaseError</a>&nbsp;</td>

          <td>InlineMaxDatabaseError</td>
        </tr>

        <tr>
          <td>DoMaxError&nbsp;</td>

          <td><a href="#func.MaxError">MaxError</a>&nbsp;</td>

          <td>InlineMaxError</td>
        </tr>

        <tr class="grey">
          <td>DoValidIndex&nbsp;</td>

          <td><a href="#func.ValidIndex">ValidIndex</a>&nbsp;</td>

          <td>InlineValidIndex</td>
        </tr>

        <tr>
          <td>DoValidIndexBase&nbsp;</td>

          <td><a href="#func.ValidIndexBase">ValidIndexBase</a>&nbsp;</td>

          <td>InlineValidIndexBase</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x086" name="x086">File Functions</a></h4>

    <p>You can redefine any of the file functions. You can also override all at
    once with the STUB_VIEW protocol modifier. One use is to call other data
    providers (e.g. &ndash; linked lists, or the ISAM API).</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Symbol&nbsp;</td>

          <td class="head">Function&nbsp;</td>

          <td class="head">Original Functionality</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>DO_fileAdd&nbsp;</td>

          <td><a href="#func.fileAdd">fileAdd</a>&nbsp;</td>

          <td>fileAddBase</td>
        </tr>

        <tr class="grey">
          <td>DO_fileBegin&nbsp;</td>

          <td><a href="#func.fileBegin">fileBegin</a>&nbsp;</td>

          <td>fileBeginBase</td>
        </tr>

        <tr>
          <td>DO_fileCancel&nbsp;</td>

          <td><a href="#func.fileCancel">fileCancel</a>&nbsp;</td>

          <td>fileCancelBase</td>
        </tr>

        <tr class="grey">
          <td>DO_fileClose&nbsp;</td>

          <td><a href="#func.fileClose">fileClose</a>&nbsp;</td>

          <td>fileCloseBase</td>
        </tr>

        <tr>
          <td>DO_fileCommit&nbsp;</td>

          <td><a href="#func.fileCommit">fileCommit</a>&nbsp;</td>

          <td>fileCommitBase</td>
        </tr>

        <tr class="grey">
          <td>DO_fileCreate&nbsp;</td>

          <td><a href="#func.fileCreate">fileCreate</a>&nbsp;</td>

          <td>fileCreateBase</td>
        </tr>

        <tr>
          <td>DO_fileDelete&nbsp;</td>

          <td><a href="#func.fileDelete">fileDelete</a>&nbsp;</td>

          <td>fileDeleteBase</td>
        </tr>

        <tr class="grey">
          <td>DO_fileDirty&nbsp;</td>

          <td><a href="#func.fileDirty">fileDirty</a>&nbsp;</td>

          <td>fileDirtyBase</td>
        </tr>

        <tr>
          <td>DO_fileDrop&nbsp;</td>

          <td><a href="#func.fileDrop">fileDrop</a>&nbsp;</td>

          <td>fileDropBase</td>
        </tr>

        <tr class="grey">
          <td>DO_fileError&nbsp;</td>

          <td><a href="#func.fileError">fileError</a>&nbsp;</td>

          <td>fileErrorBase</td>
        </tr>

        <tr>
          <td>DO_fileFilterSegs&nbsp;</td>

          <td><a href="#func.fileFilterSegs">fileFilterSegs</a>&nbsp;</td>

          <td>fileFilterSegsBase</td>
        </tr>

        <tr class="grey">
          <td>DO_fileFirst&nbsp;</td>

          <td><a href="#func.fileFirst">fileFirst</a>&nbsp;</td>

          <td>fileFirstBase</td>
        </tr>

        <tr>
          <td>DO_fileGet&nbsp;</td>

          <td><a href="#func.fileGet">fileGet</a>&nbsp;</td>

          <td>fileGetBase</td>
        </tr>

        <tr class="grey">
          <td>DO_fileInfo&nbsp;</td>

          <td><a href="#func.fileInfo">fileInfo</a>&nbsp;</td>

          <td>fileInfoBase</td>
        </tr>

        <tr>
          <td>DO_fileInsert&nbsp;</td>

          <td><a href="#func.fileInsert">fileInsert</a>&nbsp;</td>

          <td>fileInsertBase</td>
        </tr>

        <tr class="grey">
          <td>DO_fileIsLocked&nbsp;</td>

          <td><a href="#func.fileIsLocked">fileIsLocked</a>&nbsp;</td>

          <td>fileIsLockedBase</td>
        </tr>

        <tr>
          <td>DO_fileLocate&nbsp;</td>

          <td><a href="#func.fileLocate">fileLocate</a>&nbsp;</td>

          <td>fileLocateBase</td>
        </tr>

        <tr class="grey">
          <td>DO_fileLock&nbsp;</td>

          <td><a href="#func.fileLock">fileLock</a>&nbsp;</td>

          <td>fileLockBase</td>
        </tr>

        <tr>
          <td>DO_fileNext&nbsp;</td>

          <td><a href="#func.fileNext">fileNext</a>&nbsp;</td>

          <td>fileNextBase</td>
        </tr>

        <tr class="grey">
          <td>DO_fileOpen&nbsp;</td>

          <td><a href="#func.fileOpen">fileOpen</a>&nbsp;</td>

          <td>fileOpenBase</td>
        </tr>

        <tr>
          <td>DO_fileOptLock&nbsp;</td>

          <td><a href="#func.fileOptLock">fileOptLock</a>&nbsp;</td>

          <td>fileOptLockBase</td>
        </tr>

        <tr class="grey">
          <td>DO_filePrePost&nbsp;</td>

          <td><a href="#func.filePrePost">filePrePost</a>&nbsp;</td>

          <td>filePrePostBase</td>
        </tr>

        <tr>
          <td>DO_filePost&nbsp;</td>

          <td><a href="#func.filePost">filePost</a>&nbsp;</td>

          <td>filePostBase</td>
        </tr>

        <tr class="grey">
          <td>DO_fileReverses&nbsp;</td>

          <td><a href="#func.fileReverses">fileReverses</a>&nbsp;</td>

          <td>fileReversesBase</td>
        </tr>

        <tr>
          <td>DO_fileRollback&nbsp;</td>

          <td><a href="#func.fileRollback">fileRollback</a>&nbsp;</td>

          <td>fileRollbackBase</td>
        </tr>

        <tr class="grey">
          <td>DO_fileUnLock&nbsp;</td>

          <td><a href="#func.fileUnLock">fileUnLock</a>&nbsp;</td>

          <td>fileUnLockBase</td>
        </tr>

        <tr>
          <td>DO_fileUpdate&nbsp;</td>

          <td><a href="#func.fileUpdate">fileUpdate</a>&nbsp;</td>

          <td>fileUpdateBase</td>
        </tr>

        <tr class="grey">
          <td>DO_fileDriverInfo&nbsp;</td>

          <td><a href="#func.fileDriverInfo">fileDriverInfo</a>&nbsp;</td>

          <td>fileDriverInfoBase</td>
        </tr>

        <tr>
          <td>DO_fileEmpty&nbsp;</td>

          <td><a href="#func.fileEmpty">fileEmpty</a>&nbsp;</td>

          <td>fileEmptyBase</td>
        </tr>

        <tr class="grey">
          <td>DO_fileLinkFlags&nbsp;</td>

          <td><a href="#func.fileLinkFlags">fileLinkFlags</a>&nbsp;</td>

          <td>fileLinkFlagsBase</td>
        </tr>

        <tr>
          <td>DO_fileFilterCount&nbsp;</td>

          <td><a href="#func.fileFilterCount">fileFilterCount</a>&nbsp;</td>

          <td>fileFilterCountBase</td>
        </tr>

        <tr class="grey">
          <td>DO_fileFilterDelete&nbsp;</td>

          <td><a href="#func.fileFilterDelete">fileFilterDelete</a>&nbsp;</td>

          <td>fileFilterDeleteBase</td>
        </tr>

        <tr>
          <td>DO_fileTransBegin&nbsp;</td>

          <td><a href="#func.fileTransBegin">fileTransBegin</a>&nbsp;</td>

          <td>FileTransBeginBase</td>
        </tr>

        <tr class="grey">
          <td>DO_fileTransCommit&nbsp;</td>

          <td><a href="#func.fileTransCommit">fileTransCommit</a>&nbsp;</td>

          <td>fileTransCommitBase</td>
        </tr>

        <tr>
          <td>DO_fileTransRollback&nbsp;</td>

          <td><a
          href="#func.fileTransRollback">fileTransRollback</a>&nbsp;</td>

          <td>fileTransRollbackBase</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x087" name="x087">Miscellaneous</a></h4>

    <p>These functions look akin to the call-outs, in that they have specific
    purposes. But they also have all the characteristics of overrides, in that
    they are existing template helper functions. For descriptions of the
    functions, look in section 5, &ldquo;Template Helper Functions&rdquo;.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Symbol&nbsp;</td>

          <td class="head">Function and Original Functionality&nbsp;</td>

          <td class="head">Called By</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>DO_APPLYHEADERFIELDS&nbsp;</td>

          <td><a href="#func.ApplyHeaderFields">ApplyHeaderFields</a><br />
           ApplyHeaderFieldsBase&nbsp;</td>

          <td><a href="#func.xxxxDelete"><i>xxxx</i>Delete</a>, <a
          href="#func.xxxxInsert"><i>xxxx</i>Insert</a>, and <a
          href="#func.xxxxUpdate"><i>xxxx</i>Update</a></td>
        </tr>

        <tr class="grey">
          <td>DO_BASENOTIFY&nbsp;</td>

          <td><a href="#func.BaseNotify">BaseNotify</a><br />
           BaseNotifyBase&nbsp;</td>

          <td>Base views firing notifications</td>
        </tr>

        <tr>
          <td>DO_CANCELBODY&nbsp;</td>

          <td><a href="#func.CancelBody">CancelBody</a><br />
           CancelBodyBase&nbsp;</td>

          <td><a href="#func.xxxxCancel"><i>xxxx</i>Cancel</a> and <a
          href="#func.xxxxRevisionCancel"><i>xxxx</i>RevisionCancel</a></td>
        </tr>

        <tr class="grey">
          <td>DO_COMPOSITENOTIFY&nbsp;</td>

          <td><a href="#func.CompositeNotify">CompositeNotify</a><br />
           CompositeNotifyBase&nbsp;</td>

          <td>Composite views firing notifications</td>
        </tr>

        <tr>
          <td>DO_DELETEBODY&nbsp;</td>

          <td><a href="#func.DeleteBody">DeleteBody</a><br />
           DeleteBodyBase&nbsp;</td>

          <td><a href="#func.xxxxDelete"><i>xxxx</i>Delete</a> and <a
          href="#func.xxxxFilterDelete"><i>xxxx</i>FilterDelete</a></td>
        </tr>

        <tr class="grey">
          <td>DO_DELETEDETAILSBODY&nbsp;</td>

          <td><a href="#func.DeleteDetailsBody">DeleteDetailsBody</a><br />
           DeleteDetailsBodyBase&nbsp;</td>

          <td><a href="#func.xxxxPost"><i>xxxx</i>Post</a> and <a
          href="#func.xxxxRevisionPost"><i>xxxx</i>RevisionPost</a></td>
        </tr>

        <tr>
          <td>DO_ENTRYSTATEPOP&nbsp;</td>

          <td><a href="#func.EntryStatePop">EntryStatePop</a><br />
           EntryStatePopBase&nbsp;</td>

          <td>rotoEntry, following any view entrypoints</td>
        </tr>

        <tr class="grey">
          <td>DO_ENTRYSTATEPUSH&nbsp;</td>

          <td><a href="#func.EntryStatePush">EntryStatePush</a><br />
           EntryStatePushBase&nbsp;</td>

          <td>rotoEntry, prior to any view entrypoints</td>
        </tr>

        <tr>
          <td>DO_GETPERMISSIONS&nbsp;</td>

          <td><a href="#func.GetPermissions">GetPermissions</a><br />
           GetPermissionsBase&nbsp;</td>

          <td><a href="#func.xxxxDelete"><i>xxxx</i>Delete</a>, <a
          href="#func.xxxxInsert"><i>xxxx</i>Insert</a>, <a
          href="#func.xxxxUpdate"><i>xxxx</i>Update</a>, <a
          href="#func.xxxxFilterDelete"><i>xxxx</i>FilterDelete</a>, <a
          href="#func.xxxxFilterFetch"><i>xxxx</i>FilterFetch</a>, <a
          href="#func.xxxxFetch"><i>xxxx</i>Fetch</a>, <a
          href="#func.xxxxFetchLock"><i>xxxx</i>FetchLock</a>, <a
          href="#func.xxxxRead"><i>xxxx</i>Read</a>, <a
          href="#func.xxxxProcess"><i>xxxx</i>Process</a>, <a
          href="#func.xxxxPost"><i>xxxx</i>Post</a>, and <a
          href="#func.xxxxRevisionPost"><i>xxxx</i>RevisionPost</a></td>
        </tr>

        <tr class="grey">
          <td>DO_INITBODYGEN&nbsp;</td>

          <td><a href="#func.InitBodyGen">InitBodyGen</a><br />
           InitBodyGenBase&nbsp;</td>

          <td><a href="#func.xxxxOpen"><i>xxxx</i>Open</a>, <a
          href="#func.xxxxInstanceOpen"><i>xxxx</i>InstanceOpen</a>, <a
          href="#func.xxxxInit"><i>xxxx</i>Init</a>, <a
          href="#func.xxxxRecordClear"><i>xxxx</i>RecordClear</a>, <a
          href="#func.xxxxRecordGenerate"><i>xxxx</i>RecordGenerate</a>, <a
          href="#func.xxxxCancel"><i>xxxx</i>Cancel</a>, and <a
          href="#func.xxxxRevisionCancel"><i>xxxx</i>RevisionCancel</a></td>
        </tr>

        <tr>
          <td>DO_MAPTODETAIL&nbsp;</td>

          <td><a href="#func.MapToDetail">MapToDetail</a><br />
           MapToDetailBase&nbsp;</td>

          <td><a href="#func.xxxxInsert"><i>xxxx</i>Insert</a>, <a
          href="#func.xxxxFilterDelete"><i>xxxx</i>FilterDelete</a>, <a
          href="#func.xxxxTableEmpty"><i>xxxx</i>TableEmpty</a>, <a
          href="#func.xxxxUpdate"><i>xxxx</i>Update</a>, <a
          href="#func.xxxxFilterFetch"><i>xxxx</i>FilterFetch</a>, <a
          href="#func.xxxxFetch"><i>xxxx</i>Fetch</a>, <a
          href="#func.xxxxFetchLock"><i>xxxx</i>FetchLock</a>, <a
          href="#func.xxxxRead"><i>xxxx</i>Read</a>, <a
          href="#func.xxxxReadLock"><i>xxxx</i>ReadLock</a>, <a
          href="#func.xxxxPut"><i>xxxx</i>Put</a>, <a
          href="#func.xxxxBlkPut"><i>xxxx</i>BlkPut</a>, <a
          href="#func.xxxxCancel"><i>xxxx</i>Cancel</a>, <a
          href="#func.xxxxRevisionCancel"><i>xxxx</i>RevisionCancel</a>, <a
          href="#func.xxxxPost"><i>xxxx</i>Post</a>, <a
          href="#func.xxxxRevisionPost"><i>xxxx</i>RevisionPost</a>, and <a
          href="#func.xxxxRevisionRekey"><i>xxxx</i>RevisionRekey</a></td>
        </tr>

        <tr>
          <td>DO_NOTIFYFIRE&nbsp;</td>

          <td><a href="#func.NotifyFire">NotifyFire</a>&nbsp;<br />
          NotifyFireBase&nbsp;</td>

          <td>$$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>DO_PUTCMPKEY&nbsp;</td>

          <td><a href="#func.PutCmpKey">PutCmpKey</a><br />
           PutCmpKeyBase&nbsp;</td>

          <td>Your callouts and overrides</td>
        </tr>

        <tr>
          <td>DO_REVERSEHEADERFIELDS&nbsp;</td>

          <td><a href="#func.ReverseHeaderFields">ReverseHeaderFields</a><br />
           ReverseHeaderFieldsBase&nbsp;</td>

          <td><a href="#func.xxxxDelete"><i>xxxx</i>Delete</a>, <a
          href="#func.xxxxInsert"><i>xxxx</i>Insert</a>, and <a
          href="#func.xxxxUpdate"><i>xxxx</i>Update</a></td>
        </tr>

        <tr>
          <td>DO_REVISIONINNERPOST&nbsp;</td>

          <td><a
          href="#func.RevisionInnerPost">RevisionInnerPost</a>&nbsp;<br />
          RevisionInnerPostBase&nbsp;</td>

          <td><a href="#func.xxxxPost"><i>xxxx</i>Post</a>, and <a
          href="#func.xxxxRevisionPost"><i>xxxx</i>RevisionPost</a></td>
        </tr>

        <tr class="grey">
          <td>DO_ROTOENTRY&nbsp;</td>

          <td><a href="#func.rotoEntry">rotoEntry</a><br />
           rotoEntryBase&nbsp;</td>

          <td>External callers of the view</td>
        </tr>

        <tr>
          <td>DO_SAVEHEADERFIELDS&nbsp;</td>

          <td><a href="#func.SaveHeaderFields">SaveHeaderFields</a><br />
           SaveHeaderFieldsBase&nbsp;</td>

          <td><a href="#func.xxxxInsert"><i>xxxx</i>Insert</a>, <a
          href="#func.xxxxUpdate"><i>xxxx</i>Update</a>, <a
          href="#func.xxxxFilterFetch"><i>xxxx</i>FilterFetch</a>, <a
          href="#func.xxxxFetch"><i>xxxx</i>Fetch</a>, <a
          href="#func.xxxxFetchLock"><i>xxxx</i>FetchLock</a>, <a
          href="#func.xxxxRead"><i>xxxx</i>Read</a>, <a
          href="#func.xxxxReadLock"><i>xxxx</i>ReadLock</a>, <a
          href="#func.xxxxOpen"><i>xxxx</i>Open</a>, <a
          href="#func.xxxxInstanceOpen"><i>xxxx</i>InstanceOpen</a>, <a
          href="#func.xxxxInit"><i>xxxx</i>Init</a>, <a
          href="#func.xxxxRecordClear"><i>xxxx</i>RecordClear</a>, <a
          href="#func.xxxxRecordGenerate"><i>xxxx</i>RecordGenerate</a>, <a
          href="#func.xxxxCancel"><i>xxxx</i>Cancel</a>, and <a
          href="#func.xxxxRevisionCancel"><i>xxxx</i>RevisionCancel</a></td>
        </tr>

        <tr class="grey">
          <td>DO_XXXFETCHFILTER&nbsp;</td>

          <td><a href="#func.xxxFetchFilter">xxxFetchFilter</a><br />
           xxxFetchFilterBase&nbsp;</td>

          <td><a href="#func.xxxxFilterFetch"><i>xxxx</i>FilterFetch</a>, <a
          href="#func.xxxxFetch"><i>xxxx</i>Fetch</a>, and <a
          href="#func.xxxxFetchLock"><i>xxxx</i>FetchLock</a></td>
        </tr>

        <tr>
          <td>DO_XXXREAD&nbsp;</td>

          <td><a href="#func.xxxRead">xxxRead</a><br />
           xxxReadBase&nbsp;</td>

          <td><a href="#func.xxxxRead"><i>xxxx</i>Read</a> and <a
          href="#func.xxxxReadLock"><i>xxxx</i>ReadLock</a></td>
        </tr>
      </tbody>
    </table>

    <h2><a id="x088" name="x088">Structures</a></h2>

    <p>Structures are very important in the template. They define the structure
    of a view in general enough terms that the zzzz.C file can perform many
    operations without knowing the specific intent or purpose of your view.</p>

    <h3><a id="x089" name="x089">Programmer-Defined</a></h3>

    <p>Any structures you define you must also maintain.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Structure&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>VEXTRA&nbsp;</td>

          <td>Programmer-defined view handle extensions. Activated by
          DO_VIEWHANDLE when compiling with C. When compiling with C++ VEXTRA
          is always available, must be edited in the <i>zzzz</i>3.H modifiable
          file, and is one of the base classes for V. Typically maintained by
          overriding view entrypoints.</td>
        </tr>

        <tr class="grey">
          <td>ENTRYSTATEEXTRA&nbsp;</td>

          <td>Programmer-defined entry state extensions. Activated by
          DO_ENTRYSTATEEXTRA. Use whenever there is additional state
          information (typically added in VEXTRA) that needs reentrancy
          protection. Typically maintained by overriding EntryStatePush and
          EntryStatePop</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x090" name="x090">Template-Defined</a></h3>

    <p>The template defines many structures, which it uses to manage the state
    of the view. All are potentially useful in your code. All also have a
    pointer type defined, prefixed with &ldquo;LP&rdquo;.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Structure&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a href="#x139">CMPKEY</a>&nbsp;</td>

          <td>Composite key information, retrieved when composites are composed
          in explicitly or opened implicitly</td>
        </tr>

        <tr class="grey">
          <td><a href="#x136">CMPNAME</a>&nbsp;</td>

          <td>Static composite definition. Define one initialized member in
          cmpNameList[] for each composite</td>
        </tr>

        <tr>
          <td><a href="#x140">CMPNOTIFYCONTEXT</a>&nbsp;</td>

          <td>Context for composite notification callback function
          CompositeNotify. Its use is setup automatically when you specify the
          CMPNAME_OPTION_NOTIFY flag in the CMPNAME member.</td>
        </tr>

        <tr class="grey">
          <td>DATUM&nbsp;</td>

          <td>Union of field types</td>
        </tr>

        <tr>
          <td>DB_ERRNUM&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a href="#x138">DETAILMAP</a>&nbsp;</td>

          <td>Static detail to header field index mapping. Define one
          initialized member in headerFields[] for each detail-to-header field
          mapping.</td>
        </tr>

        <tr>
          <td><a href="#x147">ENTRYSTATE</a>&nbsp;</td>

          <td>Reentrancy state</td>
        </tr>

        <tr class="grey">
          <td>FIELDCOMPARATOR&nbsp;</td>

          <td>Field value comparison function</td>
        </tr>

        <tr>
          <td>FL_ERRNUM&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a href="#x142">IDXCONFLICT</a>&nbsp;</td>

          <td>Conflicted field structure</td>
        </tr>

        <tr>
          <td><a href="#x135">IDXMAP</a>&nbsp;</td>

          <td>Static view field index storage mapping</td>
        </tr>

        <tr class="grey">
          <td><a href="#x134">KEYMAP</a>&nbsp;</td>

          <td>Static view key definition structure</td>
        </tr>

        <tr>
          <td><a href="#x145">NOTIFYCONTEXT</a>&nbsp;</td>

          <td>Registration record for a notification</td>
        </tr>

        <tr class="grey">
          <td><a href="#x137">PERMISSIONMAP</a>&nbsp;</td>

          <td>Security resource/permission mapping</td>
        </tr>

        <tr>
          <td><a href="#x141">PRESENTATIONINFO</a>&nbsp;</td>

          <td>Field presentation definition structure</td>
        </tr>

        <tr class="grey">
          <td>REV_ERRNUM&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>REVISION&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a href="#x143">REVLEVEL</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a href="#x144">REVNODE</a>&nbsp;</td>

          <td>Nested revision data</td>
        </tr>

        <tr class="grey">
          <td><a href="#x133">TBLMAP</a>&nbsp;</td>

          <td>Table definition structure</td>
        </tr>

        <tr>
          <td><a href="#x146">TYPEOPERATIONS</a>&nbsp;</td>

          <td>Static vector of functions implementing add, subtract and
          compare-to-zero operations. Used for calculating deltas</td>
        </tr>

        <tr class="grey">
          <td><a href="#x091">V</a>&nbsp;</td>

          <td>View handle, described in detail below</td>
        </tr>

        <tr>
          <td>VALIDATION&nbsp;</td>

          <td>$$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>VBASE&nbsp;</td>

          <td>Root of C++ object-oriented-capable V structure. VEXTRA is
          derived from this structure, and V is derived from VEXTRA.</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x091" name="x091">View Handle</a></h4>

    <p>The view handle is the dynamic state of an opened view. Not all the
    members listing are available under all circumstances.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Member&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>abKeyBefore&nbsp;</td>

          <td>key before insertion; currently only with
          SEQUENCE_REVISIONS$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>ahTable&nbsp;</td>

          <td>Opened database table handles</td>
        </tr>

        <tr>
          <td>alAttributes&nbsp;</td>

          <td>View field attributes</td>
        </tr>

        <tr class="grey">
          <td>aTableInfo&nbsp;</td>

          <td>Array of database table info structs$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>attributesNotify&nbsp;</td>

          <td>Copy of view field attributes for notification purposes</td>
        </tr>

        <tr class="grey">
          <td>bAhead&nbsp;</td>

          <td>Current browse direction</td>
        </tr>

        <tr>
          <td>bBrowseEnded&nbsp;</td>

          <td>Has the end of range been reached? Usually == !bBrowsing</td>
        </tr>

        <tr class="grey">
          <td>bBrowseInSync&nbsp;</td>

          <td>Are the database record state and current key value in sync?</td>
        </tr>

        <tr>
          <td>bBrowsing&nbsp;</td>

          <td>Is browsing underway, or does the query need to be
          re-evaluated?</td>
        </tr>

        <tr class="grey">
          <td>bCascades&nbsp;</td>

          <td>Suppress cascading changed fields to composites? Reserved for
          future use</td>
        </tr>

        <tr>
          <td>bDescendSupported&nbsp;</td>

          <td>Reverse browsing supported?</td>
        </tr>

        <tr class="grey">
          <td>bDirty&nbsp;</td>

          <td>Fields have changed since record was last established</td>
        </tr>

        <tr>
          <td>bExists&nbsp;</td>

          <td>Current record exists?</td>
        </tr>

        <tr class="grey">
          <td>bFieldChanged&nbsp;</td>

          <td>Field value is changing? Used only by <a
          href="#func.xxxxPut"><i>xxxx</i>Put</a></td>
        </tr>

        <tr>
          <td>bInherits&nbsp;</td>

          <td>Implicitly opened composites inherit flags received by <a
          href="#func.xxxxInstanceOpen"><i>xxxx</i>InstanceOpen</a></td>
        </tr>

        <tr class="grey">
          <td>bKeyGenerated&nbsp;</td>

          <td>Record&#39;s current key value was generated$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>bRawData&nbsp;</td>

          <td>Data put is not processed beyond normalization and storage.
          Reserved for future use</td>
        </tr>

        <tr class="grey">
          <td>bReadOnly&nbsp;</td>

          <td>Tables accessed only for reading? Set on opening the view.
          Permits speed optimization by using dbSelect and dbFetch</td>
        </tr>

        <tr>
          <td>bRevisioned&nbsp;</td>

          <td>Suppress use of revision API? Set on opening the view</td>
        </tr>

        <tr class="grey">
          <td>bSelectFromStart&nbsp;</td>

          <td>Origin as specified to the last <a
          href="#func.xxxxFilterSelect"><i>xxxx</i>FilterSelect</a> (reset at
          next fetch)</td>
        </tr>

        <tr>
          <td>bUnpostedRevisions&nbsp;</td>

          <td>Used instead of revDirty when
          HDR_HAS_REVISIONS&gt;0$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>bUnvalidated&nbsp;</td>

          <td>Suppress validations? Set on opening the view</td>
        </tr>

        <tr>
          <td>bVerified&nbsp;</td>

          <td>Entire record has been successfully verified</td>
        </tr>

        <tr class="grey">
          <td>bVerifying&nbsp;</td>

          <td>Inside <a href="#func.xxxxVerify"><i>xxxx</i>Verify</a>
          routine?</td>
        </tr>

        <tr>
          <td>cmp&nbsp;</td>

          <td>Composed views&#39; handles</td>
        </tr>

        <tr class="grey">
          <td>cmpFields&nbsp;</td>

          <td>Map foreign key fields to composite field indexes</td>
        </tr>

        <tr>
          <td>cmpForeign&nbsp;</td>

          <td>Indicates fields which are foreign keys</td>
        </tr>

        <tr class="grey">
          <td>cmpGenStub&nbsp;</td>

          <td>Generic stub trap flags</td>
        </tr>

        <tr>
          <td>cmpKey&nbsp;</td>

          <td>Composite key definitions</td>
        </tr>

        <tr class="grey">
          <td>cmpNotifyContext&nbsp;</td>

          <td>Array of CMPNOTIFYCONTEXT structures</td>
        </tr>

        <tr>
          <td>CompanyInfo&nbsp;</td>

          <td>COMPANYINFO data member, only populated if wOrgType is
          comapny or combined</td>
        </tr>

        <tr class="grey">
          <td>conflicts&nbsp;</td>

          <td>Fields in conflict</td>
        </tr>

        <tr>
          <td>currentFetchedRecord&nbsp;</td>

          <td>Which record from fetchedRecords is current</td>
        </tr>

        <tr class="grey">
          <td>dbFilter&nbsp;</td>

          <td>Filter string suitable to feed to dbSelect</td>
        </tr>

        <tr>
          <td>detailSave&nbsp;</td>

          <td>Saved detail field values affecting header composite</td>
        </tr>

        <tr class="grey">
          <td>eRevision&nbsp;</td>

          <td>Database error within filePost, filePrePost, PrePostEtc</td>
        </tr>

        <tr>
          <td>eValidation&nbsp;</td>

          <td>View error within validation function</td>
        </tr>

        <tr class="grey">
          <td>fetchedRecordCount&nbsp;</td>

          <td>Number of records last retrieved by dbFetch</td>
        </tr>

        <tr>
          <td>fetchedRecords&nbsp;</td>

          <td>Buffer of records retrieved by dbFetch</td>
        </tr>

        <tr class="grey">
          <td>filter&nbsp;</td>

          <td>Current filter structure</td>
        </tr>

        <tr>
          <td>filterExpressionCast&nbsp;</td>

          <td>Communicates either which composite to detailName, or which table
          to tableName</td>
        </tr>

        <tr class="grey">
          <td>hpib&nbsp;</td>

          <td>Caller&#39;s program information block, set on opening the
          view</td>
        </tr>

        <tr>
          <td>iHdrPKeySize&nbsp;</td>

          <td>Size (in bytes) of the header&rsquo;s primary key. Used when
          nested details are being managed</td>
        </tr>

        <tr class="grey">
          <td>impOpen&nbsp;</td>

          <td>Indicates composites which have been opened implicitly</td>
        </tr>

        <tr>
          <td>impRead&nbsp;</td>

          <td>Reserved &ndash; do not use</td>
        </tr>

        <tr class="grey">
          <td>myself&nbsp;</td>

          <td>This view&rsquo;s roto view handle</td>
        </tr>

        <tr>
          <td>nCurrentRange&nbsp;</td>

          <td>Filter working variable</td>
        </tr>

        <tr class="grey">
          <td>NextNotifyList&nbsp;</td>

          <td>Address of notification link within NotifyList</td>
        </tr>

        <tr>
          <td>NotifyList&nbsp;</td>

          <td>Singly-linked list of registered notifications</td>
        </tr>

        <tr class="grey">
          <td>OpenExtra&nbsp;</td>

          <td>Address of buffer with copy of extra data received by <a
          href="#func.xxxxInstanceOpen"><i>xxxx</i>InstanceOpen</a></td>
        </tr>

        <tr>
          <td>OpenExtraSize&nbsp;</td>

          <td>Size in bytes of extra data received by <a
          href="#func.xxxxInstanceOpen"><i>xxxx</i>InstanceOpen</a></td>
        </tr>

        <tr class="grey">
          <td>OpenFlags&nbsp;</td>

          <td>Flags received by <a
          href="#func.xxxxInstanceOpen"><i>xxxx</i>InstanceOpen</a></td>
        </tr>

        <tr>
          <td>OrgID&nbsp;</td>

          <td>Name of the database in which the view was opened</td>
        </tr>

        <tr class="grey">
          <td>permission&nbsp;</td>

          <td>Active security permission flags</td>
        </tr>

        <tr>
          <td>rangeFilter&nbsp;</td>

          <td>Filter string of ranges suitable to feed to dbSelect</td>
        </tr>

        <tr class="grey">
          <td>record&nbsp;</td>

          <td>Current database record(s)</td>
        </tr>

        <tr>
          <td>recordNotify&nbsp;</td>

          <td>Copy of current record for notification purposes</td>
        </tr>

        <tr class="grey">
          <td>recordRead&nbsp;</td>

          <td>Original record(s) as last read or initialized</td>
        </tr>

        <tr>
          <td>recordTemp&nbsp;</td>

          <td>Temporary copy of the record(s)</td>
        </tr>

        <tr class="grey">
          <td>refIntegrity&nbsp;</td>

          <td>Referential integrity options</td>
        </tr>

        <tr>
          <td>rev&nbsp;</td>

          <td>Revision handles corresponding with ahTable[]</td>
        </tr>

        <tr class="grey">
          <td>revCache&nbsp;</td>

          <td>cached EMPTY revision list handles; used as template so that
          revCreateFromHandle can be used$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>revLevel&nbsp;</td>

          <td>nested detail levels$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>revList&nbsp;</td>

          <td>List of revision lists when nested details are being
          managed.</td>
        </tr>

        <tr>
          <td>rotoID&nbsp;</td>

          <td>Long integer representation of this view&rsquo;s roto ID</td>
        </tr>

        <tr class="grey">
          <td>RotoLength&nbsp;</td>

          <td>Length of the RotoView passed in to rotoEntry</td>
        </tr>

        <tr>
          <td>RotoView&nbsp;</td>

          <td>The ROTOVIEW structure as passed in to rotoEntry</td>
        </tr>

        <tr class="grey">
          <td>ScratchAllocated&nbsp;</td>

          <td>Number of bytes currently allocated from ScratchStack</td>
        </tr>

        <tr>
          <td>ScratchHeap&nbsp;</td>

          <td>Pool of tracked memory handles</td>
        </tr>

        <tr class="grey">
          <td>ScratchStack&nbsp;</td>

          <td>Pool of memory available for short, temporary use. Allocated LIFO
          fashion</td>
        </tr>

        <tr>
          <td>SeriesInfo&nbsp;</td>

          <td>SMSERIESINFO data member</td>
        </tr>

        <tr class="grey">
          <td>subCmp&nbsp;</td>

          <td>Base view handle</td>
        </tr>

        <tr>
          <td>subCmpKey&nbsp;</td>

          <td>Primary key definition of base view</td>
        </tr>

        <tr class="grey">
          <td>subDateTemplate&nbsp;</td>

          <td>Date of base view&rsquo;s template</td>
        </tr>

        <tr>
          <td>subFields&nbsp;</td>

          <td>Number of fields in base view</td>
        </tr>

        <tr class="grey">
          <td>subFilter&nbsp;</td>

          <td>Filter string suitable to feed the base view</td>
        </tr>

        <tr>
          <td>subKeys&nbsp;</td>

          <td>Number of keys in base view</td>
        </tr>

        <tr class="grey">
          <td>subVersionTemplate&nbsp;</td>

          <td>Version of base view&rsquo;s template</td>
        </tr>

        <tr>
          <td>sysAccess&nbsp;</td>

          <td>Current value of SYSACCESS field</td>
        </tr>

        <tr class="grey">
          <td>wActualKey&nbsp;</td>

          <td>Key number as required by database API</td>
        </tr>

        <tr>
          <td>wDetailFilterSegments&nbsp;</td>

          <td>Number of key segments that are currently automatically pinned if
          this view has a header</td>
        </tr>

        <tr class="grey">
          <td>wDriverID&nbsp;</td>

          <td>Driver ID of database link</td>
        </tr>

        <tr>
          <td>wFetchCount&nbsp;</td>

          <td>Number of records to retrieve when dbFetch is used</td>
        </tr>

        <tr class="grey">
          <td>wKey&nbsp;</td>

          <td>Current key as passed to <a
          href="#func.xxxxOrder"><i>xxxx</i>Order</a></td>
        </tr>

        <tr>
          <td>wLinkNo&nbsp;</td>

          <td>Database link used to open the view and table(s)</td>
        </tr>

        <tr class="grey">
          <td>wNoOfKeys&nbsp;</td>

          <td>Actual number of keys for primary table</td>
        </tr>

        <tr>
          <td>wOrgType&nbsp;</td>

          <td>Type (company, combined or system) of the database in which the view was
          opened</td>
        </tr>

        <tr class="grey">
          <td>wPrimaryRecordLength&nbsp;</td>

          <td>Length, in bytes, of the primary record</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x133" name="x133">TBLMAP</a></h4>

    <p>The following structure is used in an array of tables. It is indexed by
    (IDXMAP).tblNo, with the special values noted in IDXMAP.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Member&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>table&nbsp;</td>

          <td>Database table definition $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>fields&nbsp;</td>

          <td>Table data field definitions $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>keys&nbsp;</td>

          <td>Table key definitions $$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x134" name="x134">KEYMAP</a></h4>

    <p>View key definition structure. Represents the segments of a key as a set
    of view field indexes (rather than database field numbers)</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Member&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>name&nbsp;</td>

          <td>resource ID of key name string $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>segments&nbsp;</td>

          <td># of segments (up to 10) $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>indexes&nbsp;</td>

          <td>array of view field index key segments $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>foreign&nbsp;</td>

          <td>corresponding foreign key # in composite view $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>system&nbsp;</td>

          <td>TRUE means system link $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>flags&nbsp;</td>

          <td>flags to pass viewInstanceOpen() $$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x135" name="x135">IDXMAP</a></h4>

    <p>View field index storage mapping. Defines a field&#39;s title, table,
    and database field index in that table, plus miscellaneous view
    representation and handling items.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Member&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>title&nbsp;</td>

          <td>resource ID of title string $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>tblNo&nbsp;</td>

          <td>index in TBLMAP array; -1 if not used $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>tblFieldNo&nbsp;</td>

          <td>field number in DBFIELD array of table $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>validate&nbsp;</td>

          <td>field validation routine; NULL if none $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>presents&nbsp;</td>

          <td>presentation information; NULL if none $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>flags&nbsp;</td>

          <td>Special features; set with FLD_* constants $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>attributes&nbsp;</td>

          <td>default attributes; XOR mask $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>cmpView&nbsp;</td>

          <td>reserved: set to 0 $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>cmpField&nbsp;</td>

          <td>reserved: set to 0 $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>characteristics&nbsp;</td>

          <td>0-terminated list of characteristics; NULL if none
          $$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x136" name="x136">CMPNAME</a></h4>

    <p>$$$$$$$$$$$$$</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Member&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>rotoID&nbsp;</td>

          <td>Composite view roto ID, with NULL terminator $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>flags&nbsp;</td>

          <td>flags to pass viewInstanceOpen() $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>foreign&nbsp;</td>

          <td>corresponding foreign key # in composite view $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>system&nbsp;</td>

          <td>TRUE means system link $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>options&nbsp;</td>

          <td>template-control options $$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x137" name="x137">PERMISSIONMAP</a></h4>

    <p>Structure mapping security resource to the standard permission bit sets.
    Associative structure, where lpsResource is the key. There may be a chain
    of resources, in which case their cummulative bit-wise AND is the
    permission bitset used.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Member&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>lpsResource&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>lPermission&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>AndResources&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x138" name="x138">DETAILMAP</a></h4>

    <p>Mapping from detail field index to header field index. Associative
    structure, where lDetail is the key. Used to associate fields in a detail
    view to fields in its header that depend on them.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Member&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>lDetail&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>lHeader&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x139" name="x139">CMPKEY</a></h4>

    <p>Composite key information</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Member&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>segments&nbsp;</td>

          <td># of segments in composite view $$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>indexes&nbsp;</td>

          <td>composite view&#39;s field indexes of key $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>types&nbsp;</td>

          <td>data types of above indexes $$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x140" name="x140">CMPNOTIFYCONTEXT</a></h4>

    <p>Composite notification contexts</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Member&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>lpv&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>composite&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x141" name="x141">PRESENTATIONINFO</a></h4>

    <p>Field presentation definition structure. An instance of this structure
    must be created and referenced for each field with presents info. Note that
    this is an internal structure, and is mapped by the template to the
    external representation.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Member&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>type&nbsp;</td>

          <td>One of PRESENTS_* above $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>elements&nbsp;</td>

          <td>number of list entries (only if type==&#39;L&#39;|&#39;I&#39;)
          $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>size&nbsp;</td>

          <td>size of buffer holding all strings (both
          type==&#39;L&#39;&amp;&#39;M&#39;) $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>mask&nbsp;</td>

          <td>mask string (only if type==&#39;M&#39;); strings if &#39;I&#39;
          $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>listNums&nbsp;</td>

          <td>array of integers mapping to strings (int listNums[elements])
          $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>listStrs&nbsp;</td>

          <td>array of resource IDs for strings (int listStrs[elements])
          $$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x142" name="x142">IDXCONFLICT</a></h4>

    <p>Conflicted field structure</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Member&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>field&nbsp;</td>

          <td>view field index $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>conflict&nbsp;</td>

          <td>is value truly conflicted, or just maybe? $$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x143" name="x143">REVLEVEL</a></h4>

    <p>$$$$$$$$$$$</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Member&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>AttachedRevision&nbsp;</td>

          <td>Revision node currently attached (via Fetch/Read/Insert)</td>
        </tr>

        <tr class="grey">
          <td>DetailKeySegments&nbsp;</td>

          <td># of segments detail adds to this header</td>
        </tr>

        <tr>
          <td>dirty&nbsp;</td>

          <td>Has anything been InnerPosted to this level?</td>
        </tr>

        <tr class="grey">
          <td>HeaderKeySegments&nbsp;</td>

          <td># of segments header&#39;s key has</td>
        </tr>

        <tr>
          <td>iHdrPKeySize&nbsp;</td>

          <td>Size of the Header&#39;s primary key</td>
        </tr>

        <tr class="grey">
          <td>protocol&nbsp;</td>

          <td>$$$$$$$$$</td>
        </tr>

        <tr>
          <td>RekeyPending&nbsp;</td>

          <td>deep copy of .revList, which are waiting to be rekeyed</td>
        </tr>

        <tr class="grey">
          <td>revList&nbsp;</td>

          <td>list of revision lists</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x144" name="x144">REVNODE</a></h4>

    <p>$$$$$$$$$$$</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Member&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>pNext&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>key&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>revList&nbsp;</td>

          <td>tree of REVNODEs rooted under this one $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>rev&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x145" name="x145">NOTIFYCONTEXT</a></h4>

    <p>chain of registered notification callbacks</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Member&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>next&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>notify&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>context&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>flags&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>lpv&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x146" name="x146">TYPEOPERATIONS</a></h4>

    <p>table of vectors to functions performing type-specific operations</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Member&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>iszero&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>add&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>subtract&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x147" name="x147">ENTRYSTATE</a></h4>

    <p>Re-entrancy state; used by Roto entries</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Member&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>bVerifying&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>bFieldChanged&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>ScratchAllocated&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>eRevision&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>eValidation&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>RotoView&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>RotoLength&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>filterExpressionCast&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>transLevel&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td>extra&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>

        <tr>
          <td>rvspyIndents&nbsp;</td>

          <td>$ $$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h2><a id="x092" name="x092">Variables</a></h2>

    <p>These are global data meant to be invariant. Global data should not be
    used to maintain state.</p>

    <h3><a id="x093" name="x093">View Structure</a></h3>

    <p>The following variables are declared in the <i>zzzz</i>1.C file, with
    initializers you specify. They define the static structure of the view.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Variable&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>cmpNameList&nbsp;</td>

          <td>List of composite roto Ids</td>
        </tr>

        <tr class="grey">
          <td>fldIdxMap&nbsp;</td>

          <td>Field index to database table mapping. Also defines fields&rsquo;
          characteristics. Integrates with GENTABLE.</td>
        </tr>

        <tr>
          <td>fldNumToIdx&nbsp;</td>

          <td>Field number to field index mapping. Integrates with
          GENTABLE.</td>
        </tr>

        <tr class="grey">
          <td>headerFields&nbsp;</td>

          <td>Detail to header field index mapping. Used in conjunction with
          HeaderEtc</td>
        </tr>

        <tr>
          <td>hierarchyKeyMap&nbsp;</td>

          <td>Foreign key definitions</td>
        </tr>

        <tr class="grey">
          <td>keyNumMap&nbsp;</td>

          <td>View&rsquo;s published key definition</td>
        </tr>

        <tr>
          <td>permission&nbsp;</td>

          <td>List of security resource/permission definitions</td>
        </tr>

        <tr class="grey">
          <td>subCmpName&nbsp;</td>

          <td>Roto ID to access base view</td>
        </tr>

        <tr>
          <td>tables&nbsp;</td>

          <td>List of table, key and field definitions for each database table
          referenced</td>
        </tr>

        <tr class="grey">
          <td><i>tttt</i>TableDef&nbsp;</td>

          <td>Database API table definition for table <i>tttt</i> </td>
        </tr>

        <tr>
          <td><i>tttt</i>FieldDef&nbsp;</td>

          <td>Database API field definitions for table <i>tttt</i> </td>
        </tr>

        <tr class="grey">
          <td><i>tttt</i>KeyDef&nbsp;</td>

          <td>Database API key definitions for table <i>tttt</i> </td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x094" name="x094">Template Data</a></h3>

    <p>The following variables are declared in the zzzz.C file. They facilitate
    the functioning of the template.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Variable&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td>aTypeComparators&nbsp;</td>

          <td>Array of FIELDCOMPARATOR functions, indexed by data type. All
          data types have a comparator, although FT_REAL has no support unless
          DO_REALSUPPORT is defined</td>
        </tr>

        <tr class="grey">
          <td>aTypeOperations&nbsp;</td>

          <td>Array of TYPEOPERATIONS structures, indexed by data type</td>
        </tr>

        <tr>
          <td>BCDOperations&nbsp;</td>

          <td>BCD number TYPEOPERATIONS</td>
        </tr>

        <tr class="grey">
          <td>ByteOperations&nbsp;</td>

          <td>Single byte integer or numeral string TYPEOPERATIONS</td>
        </tr>

        <tr>
          <td>GhostRoto&nbsp;</td>

          <td>Parameter used to communicate the roto instance handle to <a
          href="#func.xxxxCmpNames"><i>xxxx</i>CmpNames</a> for subclass
          views</td>
        </tr>

        <tr class="grey">
          <td>hDllModule&nbsp;</td>

          <td>Windows API module handle</td>
        </tr>

        <tr>
          <td>IntegerOperations&nbsp;</td>

          <td>Integer TYPEOPERATIONS</td>
        </tr>

        <tr class="grey">
          <td>LongOperations&nbsp;</td>

          <td>Long integer TYPEOPERATIONS</td>
        </tr>

        <tr>
          <td>RealOperations&nbsp;</td>

          <td>IEEE floating-point number TYPEOPERATIONS</td>
        </tr>

        <tr class="grey">
          <td>StringOperations&nbsp;</td>

          <td>Numeral string TYPEOPERATIONS</td>
        </tr>
      </tbody>
    </table>

    <h2><a id="x095" name="x095">Template Helper Functions</a></h2>

    <p>There are a plethora of helper functions defined by the template in the
    <i>zzzz</i>.C and <i>zzzz</i>2.H files. They fall into a dozen categories,
    plus some odds and ends.</p>

    <h3><a id="x096" name="x096">Structure Dereferencing</a></h3>

    <p>Structure dereferencing functions return a reference to some structure
    kept by the view. Both static and dynamic structures can be dereferenced.
    All structures kept by the view can dereferenced in this manner. It is
    preferred that these functions be used rather than directly referencing
    them.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Reference Returned To</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.FindCmp" name="func.FindCmp">FindCmp</a>&nbsp;</td>

          <td>Composed view&rsquo;s handle</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FindCmpDef"
          name="func.FindCmpDef">FindCmpDef</a>&nbsp;</td>

          <td>Composite definition</td>
        </tr>

        <tr>
          <td><a id="func.FindCmpField"
          name="func.FindCmpField">FindCmpField</a>&nbsp;</td>

          <td>Foreign key field to composite field index mapping</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FindCmpForeign"
          name="func.FindCmpForeign">FindCmpForeign</a>&nbsp;</td>

          <td>Indicator whether field is a foreign key</td>
        </tr>

        <tr>
          <td><a id="func.FindCmpKey"
          name="func.FindCmpKey">FindCmpKey</a>&nbsp;</td>

          <td>Composite key definition</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FindCmpName"
          name="func.FindCmpName">FindCmpName</a>&nbsp;</td>

          <td>Composite roto ID</td>
        </tr>

        <tr>
          <td><a id="func.FindCmpNotify"
          name="func.FindCmpNotify">FindCmpNotify</a>&nbsp;</td>

          <td>Composite notification callback context</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FindDetailMap"
          name="func.FindDetailMap">FindDetailMap</a>&nbsp;</td>

          <td>Detail to header field index mapping</td>
        </tr>

        <tr>
          <td><a id="func.FindFieldDef"
          name="func.FindFieldDef">FindFieldDef</a>&nbsp;</td>

          <td>Database table field definition</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FindFieldIndex"
          name="func.FindFieldIndex">FindFieldIndex</a>&nbsp;</td>

          <td>Field number to field index mapping</td>
        </tr>

        <tr>
          <td><a id="func.FindFieldMap"
          name="func.FindFieldMap">FindFieldMap</a>&nbsp;</td>

          <td>View field definition</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FindFieldValue"
          name="func.FindFieldValue">FindFieldValue</a>&nbsp;</td>

          <td>A field&rsquo;s value in the current record.</td>
        </tr>

        <tr>
          <td><a id="func.FindFieldValueAux"
          name="func.FindFieldValueAux">FindFieldValueAux</a>&nbsp;</td>

          <td>A field&rsquo;s value in a given record set.</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FindGenStub"
          name="func.FindGenStub">FindGenStub</a>&nbsp;</td>

          <td>Generic stub flag</td>
        </tr>

        <tr>
          <td><a id="func.FindImpOpen"
          name="func.FindImpOpen">FindImpOpen</a>&nbsp;</td>

          <td>Composite implicitly opened flag</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FindImpRead"
          name="func.FindImpRead">FindImpRead</a>&nbsp;</td>

          <td>Composite implicitly read flag</td>
        </tr>

        <tr>
          <td><a id="func.FindKeyDef"
          name="func.FindKeyDef">FindKeyDef</a>&nbsp;</td>

          <td>Published key definition</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FindKeyMap"
          name="func.FindKeyMap">FindKeyMap</a>&nbsp;</td>

          <td>Foreign key definition</td>
        </tr>

        <tr>
          <td><a id="func.FindPermissionMap"
          name="func.FindPermissionMap">FindPermissionMap</a>&nbsp;</td>

          <td>List of security resource/permission definitions</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FindPresentsInfo"
          name="func.FindPresentsInfo">FindPresentsInfo</a>&nbsp;</td>

          <td>Field&rsquo;s presentation information</td>
        </tr>

        <tr>
          <td><a id="func.FindRecord"
          name="func.FindRecord">FindRecord</a>&nbsp;</td>

          <td>Current record set</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FindRecordRead"
          name="func.FindRecordRead">FindRecordRead</a>&nbsp;</td>

          <td>Record set as last read or initialized</td>
        </tr>

        <tr>
          <td><a id="func.FindRecordTemp"
          name="func.FindRecordTemp">FindRecordTemp</a>&nbsp;</td>

          <td>Temporary copy of current record set</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FindRecordNotify"
          name="func.FindRecordNotify">FindRecordNotify</a>&nbsp;</td>

          <td>Copy of the current record set as at the start rotoEntry</td>
        </tr>

        <tr>
          <td><a id="func.FindRevCache"
          name="func.FindRevCache">FindRevCache</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FindRevLevel"
          name="func.FindRevLevel">FindRevLevel</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.FindTableHandle"
          name="func.FindTableHandle">FindTableHandle</a>&nbsp;</td>

          <td>Database table handle</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FindTableInfo"
          name="func.FindTableInfo">FindTableInfo</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.FindTableMap"
          name="func.FindTableMap">FindTableMap</a>&nbsp;</td>

          <td>Database table, key and field definition</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FindTableRev"
          name="func.FindTableRev">FindTableRev</a>&nbsp;</td>

          <td>Revision handle</td>
        </tr>

        <tr>
          <td><a id="func.FindTableWidth"
          name="func.FindTableWidth">FindTableWidth</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x097" name="x097">Composite Management</a></h3>

    <p>Managing composites and communication with them is central to most
    views.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.AutoCancel"
          name="func.AutoCancel">AutoCancel</a>&nbsp;</td>

          <td>Automatically cancel details if the header portion of the key
          changes</td>
        </tr>

        <tr class="grey">
          <td><a id="func.AutoCancelBody"
          name="func.AutoCancelBody">AutoCancelBody</a>&nbsp;</td>

          <td>Indicate whether the specified field falls within the header
          portion of a detail&rsquo;s key. If so, automatic cancellation of
          the details is indicated.</td>
        </tr>

        <tr>
          <td><a id="func.CancelBody"
          name="func.CancelBody">CancelBody</a>&nbsp;</td>

          <td>Cancel revisions, to the specified level if nested</td>
        </tr>

        <tr class="grey">
          <td><a id="func.CloseImpViews"
          name="func.CloseImpViews">CloseImpViews</a>&nbsp;</td>

          <td>Close implicitly opened views</td>
        </tr>

        <tr>
          <td><a id="func.CloseOneView"
          name="func.CloseOneView">CloseOneView</a>&nbsp;</td>

          <td>Close one implicitly opened view</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ComposeDemand"
          name="func.ComposeDemand">ComposeDemand</a>&nbsp;</td>

          <td>Perform demand composition with given view handle</td>
        </tr>

        <tr>
          <td><a id="func.ComposeDetail"
          name="func.ComposeDetail">ComposeDetail</a>&nbsp;</td>

          <td>Perform detail composition with given view handle</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ComposeHeader"
          name="func.ComposeHeader">ComposeHeader</a>&nbsp;</td>

          <td>Perform header composition with given view handle</td>
        </tr>

        <tr>
          <td><a id="func.ComposeHierarchical"
          name="func.ComposeHierarchical">ComposeHierarchical</a>&nbsp;</td>

          <td>Perform hierarchical composition with given view handle</td>
        </tr>

        <tr class="grey">
          <td><a id="func.CompositeCategory"
          name="func.CompositeCategory">CompositeCategory</a>&nbsp;</td>

          <td>Return what category a published composite is: header, detail,
          hierarchy or demand</td>
        </tr>

        <tr>
          <td><a id="func.CompositeNotify"
          name="func.CompositeNotify">CompositeNotify</a>&nbsp;</td>

          <td>Default notification callback function for composites</td>
        </tr>

        <tr class="grey">
          <td><a id="func.DeleteDetails"
          name="func.DeleteDetails">DeleteDetails</a>&nbsp;</td>

          <td>Propagate deletion to detail composites</td>
        </tr>

        <tr>
          <td><a id="func.DeleteDetailsBody"
          name="func.DeleteDetailsBody">DeleteDetailsBody</a>&nbsp;</td>

          <td>Delete the details from a single composite</td>
        </tr>

        <tr class="grey">
          <td><a id="func.DemandOpen"
          name="func.DemandOpen">DemandOpen</a>&nbsp;</td>

          <td>Force open a demand or implicit composite</td>
        </tr>

        <tr>
          <td><a id="func.DetailKeyWithinHeader"
          name="func.DetailKeyWithinHeader">DetailKeyWithinHeader</a>&nbsp;</td>

          <td>Indicate whether the detail&rsquo;s current order shares the
          header&rsquo;s key segments</td>
        </tr>

        <tr class="grey">
          <td><a id="func.GenericStub"
          name="func.GenericStub">GenericStub</a>&nbsp;</td>

          <td>Indicate whether the composite is the generic stub</td>
        </tr>

        <tr>
          <td><a id="func.GetTemplateVersion"
          name="func.GetTemplateVersion">GetTemplateVersion</a>&nbsp;</td>

          <td>Retrieves the template version and date of the given
          composite</td>
        </tr>

        <tr class="grey">
          <td><a id="func.isGenericStub"
          name="func.isGenericStub">isGenericStub</a>&nbsp;</td>

          <td>Indicate whether the composite is the generic stub</td>
        </tr>

        <tr>
          <td><a id="func.LoadOneView"
          name="func.LoadOneView">LoadOneView</a>&nbsp;</td>

          <td>Implicitly load a composite. Applies only to demand, implicit and
          manual composites</td>
        </tr>

        <tr class="grey">
          <td><a id="func.MapToDetailBase"
          name="func.MapToDetailBase">MapToDetailBase</a>&nbsp;</td>

          <td>Base functionality for mapping an operation to one detail
          composite</td>
        </tr>

        <tr>
          <td><a id="func.MapToDetails"
          name="func.MapToDetails">MapToDetails</a>&nbsp;</td>

          <td>Map operation to all detail composites</td>
        </tr>

        <tr class="grey">
          <td><a id="func.MapToNestedDetails"
          name="func.MapToNestedDetails">MapToNestedDetails</a>&nbsp;</td>

          <td>Like MapToDetails, but selectively translates VIEW_OP_POST and
          VIEW_OP_CANCEL to VIEW_OP_REVISION_POST and
          VIEW_OP_REVISION_CANCEL</td>
        </tr>

        <tr>
          <td><a id="func.OpenImpViews"
          name="func.OpenImpViews">OpenImpViews</a>&nbsp;</td>

          <td>Open all implicit composites</td>
        </tr>

        <tr class="grey">
          <td><a id="func.OpenOneView"
          name="func.OpenOneView">OpenOneView</a>&nbsp;</td>

          <td>Implicitly open a composite. Applies only to demand, implicit and
          manual composites</td>
        </tr>

        <tr>
          <td><a id="func.PullHeaderKey"
          name="func.PullHeaderKey">PullHeaderKey</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.PutCmpDetailSequence"
          name="func.PutCmpDetailSequence">PutCmpDetailSequence</a>&nbsp;</td>

          <td>Rekeys nested detail records when the view uses sequenced
          revisions and a record was inserted</td>
        </tr>

        <tr>
          <td><a id="func.PutCmpField"
          name="func.PutCmpField">PutCmpField</a>&nbsp;</td>

          <td>Propagate to any composites having the given field as part of
          their foreign key</td>
        </tr>

        <tr class="grey">
          <td><a id="func.PutCmpFieldAux"
          name="func.PutCmpFieldAux">PutCmpFieldAux</a>&nbsp;</td>

          <td>Propagate to a subset of composites having the given field as
          part of their foreign key</td>
        </tr>

        <tr>
          <td><a id="func.PutCmpFields"
          name="func.PutCmpFields">PutCmpFields</a>&nbsp;</td>

          <td>Propagate all foreign keys to their composites</td>
        </tr>

        <tr class="grey">
          <td><a id="func.PutCmpKey"
          name="func.PutCmpKey">PutCmpKey</a>&nbsp;</td>

          <td>Propagate the given foreign key to its composite</td>
        </tr>

        <tr>
          <td><a id="func.PutCmpKeyBase"
          name="func.PutCmpKeyBase">PutCmpKeyBase</a>&nbsp;</td>

          <td>Base functionality of PutCmpKey</td>
        </tr>

        <tr class="grey">
          <td><a id="func.QueryKeyTypes"
          name="func.QueryKeyTypes">QueryKeyTypes</a>&nbsp;</td>

          <td>Retrieve the individual fields&rsquo; types from the segments of
          the composite&rsquo;s key</td>
        </tr>

        <tr>
          <td><a id="func.SupportsAPIversion"
          name="func.SupportsAPIversion">SupportsAPIversion</a>&nbsp;</td>

          <td>Queries what template version the given composite supports</td>
        </tr>

        <tr class="grey">
          <td><a id="func.UnloadOneView"
          name="func.UnloadOneView">UnloadOneView</a>&nbsp;</td>

          <td>Unload an implicitly loaded composite</td>
        </tr>

        <tr>
          <td><a id="func.UnpostedDetail"
          name="func.UnpostedDetail">UnpostedDetail</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.UnpostedDetails"
          name="func.UnpostedDetails">UnpostedDetails</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x098" name="x098">Header Composite Summation</a></h4>

    <p>These functions manage the process of summating detail fields to the
    header.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.AddDeltaBCD"
          name="func.AddDeltaBCD">AddDeltaBCD</a>&nbsp;</td>

          <td>Add a BCD number to an accumulating delta</td>
        </tr>

        <tr class="grey">
          <td><a id="func.AddDeltaByte"
          name="func.AddDeltaByte">AddDeltaByte</a>&nbsp;</td>

          <td>Add a single byte integer or numeral string to an accumulating
          delta</td>
        </tr>

        <tr>
          <td><a id="func.AddDeltaInteger"
          name="func.AddDeltaInteger">AddDeltaInteger</a>&nbsp;</td>

          <td>Add an integer to an accumulating delta</td>
        </tr>

        <tr class="grey">
          <td><a id="func.AddDeltaLong"
          name="func.AddDeltaLong">AddDeltaLong</a>&nbsp;</td>

          <td>Add a long integer to an accumulating delta</td>
        </tr>

        <tr>
          <td><a id="func.AddDeltaReal"
          name="func.AddDeltaReal">AddDeltaReal</a>&nbsp;</td>

          <td>Add an IEEE floating-point number to an accumulating delta</td>
        </tr>

        <tr class="grey">
          <td><a id="func.AddDeltaString"
          name="func.AddDeltaString">AddDeltaString</a>&nbsp;</td>

          <td>Add a numeral string to an accumulating delta</td>
        </tr>

        <tr>
          <td><a id="func.ApplyHeaderDelta"
          name="func.ApplyHeaderDelta">ApplyHeaderDelta</a>&nbsp;</td>

          <td>Apply the detail-to-header mapping of one field. It calculates
          the delta between the field&rsquo;s original and new value, and only
          applies it if it is non-zero</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ApplyHeaderFields"
          name="func.ApplyHeaderFields">ApplyHeaderFields</a>&nbsp;</td>

          <td>Apply detail-to-header field mappings</td>
        </tr>

        <tr>
          <td><a id="func.isZeroDeltaBCD"
          name="func.isZeroDeltaBCD">isZeroDeltaBCD</a>&nbsp;</td>

          <td>Compares an accumulating BCD number delta to zero</td>
        </tr>

        <tr class="grey">
          <td><a id="func.isZeroDeltaByte"
          name="func.isZeroDeltaByte">isZeroDeltaByte</a>&nbsp;</td>

          <td>Compares an accumulating single byte integer or numeral string
          delta to zero</td>
        </tr>

        <tr>
          <td><a id="func.isZeroDeltaInteger"
          name="func.isZeroDeltaInteger">isZeroDeltaInteger</a>&nbsp;</td>

          <td>Compares an accumulating integer delta to zero</td>
        </tr>

        <tr class="grey">
          <td><a id="func.isZeroDeltaLong"
          name="func.isZeroDeltaLong">isZeroDeltaLong</a>&nbsp;</td>

          <td>Compares an accumulating long integer delta to zero</td>
        </tr>

        <tr>
          <td><a id="func.isZeroDeltaReal"
          name="func.isZeroDeltaReal">isZeroDeltaReal</a>&nbsp;</td>

          <td>Compares an accumulating IEEE floating-point number delta to
          zero</td>
        </tr>

        <tr class="grey">
          <td><a id="func.isZeroDeltaString"
          name="func.isZeroDeltaString">isZeroDeltaString</a>&nbsp;</td>

          <td>Compares an accumulating numeral string delta to zero</td>
        </tr>

        <tr>
          <td><a id="func.ReverseHeaderFields"
          name="func.ReverseHeaderFields">ReverseHeaderFields</a>&nbsp;</td>

          <td>Rollback detail-to-header field mappings on error</td>
        </tr>

        <tr class="grey">
          <td><a id="func.SaveHeaderFields"
          name="func.SaveHeaderFields">SaveHeaderFields</a>&nbsp;</td>

          <td>Save detail field values for subsequent detail-to-header field
          mappings</td>
        </tr>

        <tr>
          <td><a id="func.SubtractDeltaBCD"
          name="func.SubtractDeltaBCD">SubtractDeltaBCD</a>&nbsp;</td>

          <td>Subtract a BCD number to an accumulating delta</td>
        </tr>

        <tr class="grey">
          <td><a id="func.SubtractDeltaByte"
          name="func.SubtractDeltaByte">SubtractDeltaByte</a>&nbsp;</td>

          <td>Subtract a single byte integer or numeral string to an
          accumulating delta</td>
        </tr>

        <tr>
          <td><a id="func.SubtractDeltaInteger"
          name="func.SubtractDeltaInteger">SubtractDeltaInteger</a>&nbsp;</td>

          <td>Subtract an integer to an accumulating delta</td>
        </tr>

        <tr class="grey">
          <td><a id="func.SubtractDeltaLong"
          name="func.SubtractDeltaLong">SubtractDeltaLong</a>&nbsp;</td>

          <td>Subtract a long integer to an accumulating delta</td>
        </tr>

        <tr>
          <td><a id="func.SubtractDeltaReal"
          name="func.SubtractDeltaReal">SubtractDeltaReal</a>&nbsp;</td>

          <td>Subtract an IEEE floating-point number to an accumulating
          delta</td>
        </tr>

        <tr class="grey">
          <td><a id="func.SubtractDeltaString"
          name="func.SubtractDeltaString">SubtractDeltaString</a>&nbsp;</td>

          <td>Subtract an numeral string to an accumulating delta</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x099" name="x099">Error Reporting</a></h3>

    <p>These functions report errors on the message stack. Some also take
    addition message text for insertion in the final message.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Error Reported</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.dbError" name="func.dbError">dbError</a>&nbsp;</td>

          <td>Detect and report an error from the database API</td>
        </tr>

        <tr class="grey">
          <td><a id="func.dbErrorV"
          name="func.dbErrorV">dbErrorV</a>&nbsp;</td>

          <td>Detect and report an error, using the view handle, from the
          database API</td>
        </tr>

        <tr>
          <td><a id="func.filterError"
          name="func.filterError">filterError</a>&nbsp;</td>

          <td>Detect and report an error from the filter API</td>
        </tr>

        <tr class="grey">
          <td><a id="func.filterErrorV"
          name="func.filterErrorV">filterErrorV</a>&nbsp;</td>

          <td>Detect and report an error, using the view handle, from the
          filter API</td>
        </tr>

        <tr>
          <td><a id="func.ReportBaseError"
          name="func.ReportBaseError">ReportBaseError</a>&nbsp;</td>

          <td>Depracated. Use ReportErrorViaPIB instead. [General subclass
          error]</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ReportBaseLoadError"
          name="func.ReportBaseLoadError">ReportBaseLoadError</a>&nbsp;</td>

          <td>Subclass loading base view</td>
        </tr>

        <tr>
          <td><a id="func.ReportBaseMemoryError"
          name="func.ReportBaseMemoryError">ReportBaseMemoryError</a>&nbsp;</td>

          <td>Subclass memory allocation</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ReportCompositeKeyError"
          name="func.ReportCompositeKeyError">ReportCompositeKeyError</a>&nbsp;</td>

          <td>Key mismatch with composite</td>
        </tr>

        <tr>
          <td><a id="func.ReportDatumError"
          name="func.ReportDatumError">ReportDatumError</a>&nbsp;</td>

          <td>Invalid datum</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ReportDisabledError"
          name="func.ReportDisabledError">ReportDisabledError</a>&nbsp;</td>

          <td>Disabled field access</td>
        </tr>

        <tr>
          <td><a id="func.ReportError"
          name="func.ReportError">ReportError</a>&nbsp;</td>

          <td>General error</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ReportErrorViaPIB"
          name="func.ReportErrorViaPIB">ReportErrorViaPIB</a>&nbsp;</td>

          <td>General error</td>
        </tr>

        <tr>
          <td><a id="func.ReportFieldError"
          name="func.ReportFieldError">ReportFieldError</a>&nbsp;</td>

          <td>Invalid field number</td>
        </tr>

        <tr class="grey">
          <td><a id="#func.ReportGenericError"
          name="#func.ReportGenericError">ReportGenericError</a>&nbsp;</td>

          <td>$$$$$$$$$$ errPutGeneric.</td>
        </tr>

        <tr>
          <td><a id="func.ReportGenericErrorViaPIB"
          name="func.ReportGenericErrorViaPIB">ReportGenericErrorViaPIB</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ReportIndexError"
          name="func.ReportIndexError">ReportIndexError</a>&nbsp;</td>

          <td>Invalid field index</td>
        </tr>

        <tr>
          <td><a id="func.ReportKeyError"
          name="func.ReportKeyError">ReportKeyError</a>&nbsp;</td>

          <td>Invalid key number</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ReportListError"
          name="func.ReportListError">ReportListError</a>&nbsp;</td>

          <td>Datum mismatch against presentation list</td>
        </tr>

        <tr>
          <td><a id="func.ReportLoadError"
          name="func.ReportLoadError">ReportLoadError</a>&nbsp;</td>

          <td>Composite load</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ReportMaskError"
          name="func.ReportMaskError">ReportMaskError</a>&nbsp;</td>

          <td>Datum mismatch against presentation mask</td>
        </tr>

        <tr>
          <td><a id="func.ReportMemoryError"
          name="func.ReportMemoryError">ReportMemoryError</a>&nbsp;</td>

          <td>Memory allocation failure</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ReportReadonlyError"
          name="func.ReportReadonlyError">ReportReadonlyError</a>&nbsp;</td>

          <td>Attempt to <a href="#func.xxxxPut"><i>xxxx</i>Put</a> to
          read-only field</td>
        </tr>

        <tr>
          <td><a id="func.ReportReverseError"
          name="func.ReportReverseError">ReportReverseError</a>&nbsp;</td>

          <td>Reverse scrolling not supported</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ReportRotoError"
          name="func.ReportRotoError">ReportRotoError</a>&nbsp;</td>

          <td>Invalid ROTOENTRY</td>
        </tr>

        <tr>
          <td><a id="func.ReportSecurityError"
          name="func.ReportSecurityError">ReportSecurityError</a>&nbsp;</td>

          <td>No permissions for requested operation</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ReportSubclassComposeError"
          name="func.ReportSubclassComposeError">ReportSubclassComposeError</a>&nbsp;</td>

          <td>Subclass composite list mismatch with base view</td>
        </tr>

        <tr>
          <td><a id="func.revError"
          name="func.revError">revError</a>&nbsp;</td>

          <td>Detect and report an error from the revision API</td>
        </tr>

        <tr class="grey">
          <td><a id="func.revErrorV"
          name="func.revErrorV">revErrorV</a>&nbsp;</td>

          <td>Detect and report an error, using the view handle, from the
          revision API</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x100" name="x100">View Entrypoints</a></h3>

    <p>The standard view entrypoints are described in greater detail in chapter
    2 of the <i>C Reference Guide</i>.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.identifyEntry"
          name="func.identifyEntry">identifyEntry</a>&nbsp;</td>

          <td>Identification entrypoint to views. Unmarshals parameters and
          calls the appropriate entrypoint. Export ordinal is 999</td>
        </tr>

        <tr class="grey">
          <td><a id="func.rotoEntry"
          name="func.rotoEntry">rotoEntry</a>&nbsp;</td>

          <td>Standard entrypoint to views. Unmarshals parameters and calls the
          appropriate entrypoint. Export ordinal is 1000</td>
        </tr>

        <tr>
          <td><a id="func.xxxxAttribs"
          name="func.xxxxAttribs"><i>xxxx</i>Attribs</a>&nbsp;</td>

          <td>Return field attributes</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxBlkGet"
          name="func.xxxxBlkGet"><i>xxxx</i>BlkGet</a>&nbsp;</td>

          <td>Get block of field values</td>
        </tr>

        <tr>
          <td><a id="func.xxxxBlkPut"
          name="func.xxxxBlkPut"><i>xxxx</i>BlkPut</a>&nbsp;</td>

          <td>Put block of field values</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxBrowse"
          name="func.xxxxBrowse"><i>xxxx</i>Browse</a>&nbsp;</td>

          <td>Browse with filter and direction</td>
        </tr>

        <tr>
          <td><a id="func.xxxxCancel"
          name="func.xxxxCancel"><i>xxxx</i>Cancel</a>&nbsp;</td>

          <td>Cancel transaction</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxClose"
          name="func.xxxxClose"><i>xxxx</i>Close</a>&nbsp;</td>

          <td>Close view</td>
        </tr>

        <tr>
          <td><a id="func.xxxxCmpNames"
          name="func.xxxxCmpNames"><i>xxxx</i>CmpNames</a>&nbsp;</td>

          <td>Return composite names</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxCompose"
          name="func.xxxxCompose"><i>xxxx</i>Compose</a>&nbsp;</td>

          <td>Compose in composite views</td>
        </tr>

        <tr>
          <td><a id="func.xxxxCreate"
          name="func.xxxxCreate"><i>xxxx</i>Create</a>&nbsp;</td>

          <td>Create data</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxDelete"
          name="func.xxxxDelete"><i>xxxx</i>Delete</a>&nbsp;</td>

          <td>Delete record</td>
        </tr>

        <tr>
          <td><a id="func.xxxxDirty"
          name="func.xxxxDirty"><i>xxxx</i>Dirty</a>&nbsp;</td>

          <td>Return whether the record is dirty</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxDrop"
          name="func.xxxxDrop"><i>xxxx</i>Drop</a>&nbsp;</td>

          <td>Drop data</td>
        </tr>

        <tr>
          <td><a id="func.xxxxExists"
          name="func.xxxxExists"><i>xxxx</i>Exists</a>&nbsp;</td>

          <td>Return whether the record exists</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxFetch"
          name="func.xxxxFetch"><i>xxxx</i>Fetch</a>&nbsp;</td>

          <td>Fetch the next record</td>
        </tr>

        <tr>
          <td><a id="func.xxxxFetchLock"
          name="func.xxxxFetchLock"><i>xxxx</i>FetchLock</a>&nbsp;</td>

          <td>Fetch and lock the next record</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxField"
          name="func.xxxxField"><i>xxxx</i>Field</a>&nbsp;</td>

          <td>Return field information</td>
        </tr>

        <tr>
          <td><a id="func.xxxxFields"
          name="func.xxxxFields"><i>xxxx</i>Fields</a>&nbsp;</td>

          <td>Return field count</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxFilterCount"
          name="func.xxxxFilterCount"><i>xxxx</i>FilterCount</a>&nbsp;</td>

          <td>Count how many records match a given criteria</td>
        </tr>

        <tr>
          <td><a id="func.xxxxFilterDelete"
          name="func.xxxxFilterDelete"><i>xxxx</i>FilterDelete</a>&nbsp;</td>

          <td>Delete a set of records</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxFilterFetch"
          name="func.xxxxFilterFetch"><i>xxxx</i>FilterFetch</a>&nbsp;</td>

          <td>Fetch the next record, optionally locking it</td>
        </tr>

        <tr>
          <td><a id="func.xxxxFilterSelect"
          name="func.xxxxFilterSelect"><i>xxxx</i>FilterSelect</a>&nbsp;</td>

          <td>Browse with order, filter, direction and origin</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxGet"
          name="func.xxxxGet"><i>xxxx</i>Get</a>&nbsp;</td>

          <td>Get field value</td>
        </tr>

        <tr>
          <td><a id="func.xxxxInit"
          name="func.xxxxInit"><i>xxxx</i>Init</a>&nbsp;</td>

          <td>Initialize record</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxInsert"
          name="func.xxxxInsert"><i>xxxx</i>Insert</a>&nbsp;</td>

          <td>Insert record</td>
        </tr>

        <tr>
          <td><a id="func.xxxxInstanceNotify"
          name="func.xxxxInstanceNotify"><i>xxxx</i>InstanceNotify</a>&nbsp;</td>

          <td>Register a callback to receive notifications</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxInstanceOpen"
          name="func.xxxxInstanceOpen"><i>xxxx</i>InstanceOpen</a>&nbsp;</td>

          <td>Open view, with flags to modify behaviour</td>
        </tr>

        <tr>
          <td><a id="func.xxxxInstanceProtocol"
          name="func.xxxxInstanceProtocol"><i>xxxx</i>InstanceProtocol</a>&nbsp;</td>

          <td>Return the view&rsquo;s protocol and pertinent behavioural
          modifiers</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxInstanceSecurity"
          name="func.xxxxInstanceSecurity"><i>xxxx</i>InstanceSecurity</a>&nbsp;</td>

          <td>Return security permissions, parameterized by the view
          handle</td>
        </tr>

        <tr>
          <td><a id="func.xxxxKey"
          name="func.xxxxKey"><i>xxxx</i>Key</a>&nbsp;</td>

          <td>Return key information</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxKeys"
          name="func.xxxxKeys"><i>xxxx</i>Keys</a>&nbsp;</td>

          <td>Return key count</td>
        </tr>

        <tr>
          <td><a id="func.xxxxName"
          name="func.xxxxName"><i>xxxx</i>Name</a>&nbsp;</td>

          <td>Return field name</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxOpen"
          name="func.xxxxOpen"><i>xxxx</i>Open</a>&nbsp;</td>

          <td>Open view</td>
        </tr>

        <tr>
          <td><a id="func.xxxxOrder"
          name="func.xxxxOrder"><i>xxxx</i>Order</a>&nbsp;</td>

          <td>Set order</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxPost"
          name="func.xxxxPost"><i>xxxx</i>Post</a>&nbsp;</td>

          <td>Commit transaction</td>
        </tr>

        <tr>
          <td><a id="func.xxxxPresents"
          name="func.xxxxPresents"><i>xxxx</i>Presents</a>&nbsp;</td>

          <td>Return field presentation</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxProcess"
          name="func.xxxxProcess"><i>xxxx</i>Process</a>&nbsp;</td>

          <td>Invoke process</td>
        </tr>

        <tr>
          <td><a id="func.xxxxPut"
          name="func.xxxxPut"><i>xxxx</i>Put</a>&nbsp;</td>

          <td>Put field value</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxRead"
          name="func.xxxxRead"><i>xxxx</i>Read</a>&nbsp;</td>

          <td>Retrieve record</td>
        </tr>

        <tr>
          <td><a id="func.xxxxReadLock"
          name="func.xxxxReadLock"><i>xxxx</i>ReadLock</a>&nbsp;</td>

          <td>Retrieve and lock record</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxRecordClear"
          name="func.xxxxRecordClear"><i>xxxx</i>RecordClear</a>&nbsp;</td>

          <td>Initialize record</td>
        </tr>

        <tr>
          <td><a id="func.xxxxRecordGenerate"
          name="func.xxxxRecordGenerate"><i>xxxx</i>RecordGenerate</a>&nbsp;</td>

          <td>Initialize record and generate a new primary key value,
          optionally inserting it</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxRevisionCancel"
          name="func.xxxxRevisionCancel"><i>xxxx</i>RevisionCancel</a>&nbsp;</td>

          <td>Cancel nested details</td>
        </tr>

        <tr>
          <td><a id="func.xxxxRevisionExists"
          name="func.xxxxRevisionExists"><i>xxxx</i>RevisionExists</a>&nbsp;</td>

          <td>Return whether nested detail record is saved and/or committed.
          Not currently implemented</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxRevisionPost"
          name="func.xxxxRevisionPost"><i>xxxx</i>RevisionPost</a>&nbsp;</td>

          <td>Commit nested details</td>
        </tr>

        <tr>
          <td><a id="func.xxxxRevisionRekey"
          name="func.xxxxRevisionRekey"><i>xxxx</i>RevisionRekey</a>&nbsp;</td>

          <td>Change the value of one of the header&rsquo;s primary key
          segments for all of the detail records belonging to that header</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxRevisionUnposted"
          name="func.xxxxRevisionUnposted"><i>xxxx</i>RevisionUnposted</a>&nbsp;</td>

          <td>Return whether there are uncommitted nested detail records</td>
        </tr>

        <tr>
          <td><a id="func.xxxxSecurity"
          name="func.xxxxSecurity"><i>xxxx</i>Security</a>&nbsp;</td>

          <td>Return security permissions</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxTableEmpty"
          name="func.xxxxTableEmpty"><i>xxxx</i>TableEmpty</a>&nbsp;</td>

          <td>Delete all records from the view&rsquo;s table(s)</td>
        </tr>

        <tr>
          <td><a id="func.xxxxType"
          name="func.xxxxType"><i>xxxx</i>Type</a>&nbsp;</td>

          <td>Return field type</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxUnLock"
          name="func.xxxxUnLock"><i>xxxx</i>UnLock</a>&nbsp;</td>

          <td>Unlock record</td>
        </tr>

        <tr>
          <td><a id="func.xxxxUpdate"
          name="func.xxxxUpdate"><i>xxxx</i>Update</a>&nbsp;</td>

          <td>Update record</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxVerify"
          name="func.xxxxVerify"><i>xxxx</i>Verify</a>&nbsp;</td>

          <td>Verify record</td>
        </tr>

        <tr>
          <td><a id="func.xxxxVersionAPI"
          name="func.xxxxVersionAPI"><i>xxxx</i>VersionAPI</a>&nbsp;</td>

          <td>Return the API version required by the view</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxVersionTemplate"
          name="func.xxxxVersionTemplate"><i>xxxx</i>VersionTemplate</a>&nbsp;</td>

          <td>Return version of the template used to instantiate the view</td>
        </tr>

        <tr>
          <td><a id="func.xxxxViewModule"
          name="func.xxxxViewModule"><i>xxxx</i>ViewModule</a>&nbsp;</td>

          <td>Return view&rsquo;s HMODULE</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxViewName"
          name="func.xxxxViewName"><i>xxxx</i>ViewName</a>&nbsp;</td>

          <td>Return view&rsquo;s name</td>
        </tr>

        <tr>
          <td><a id="func.xxxxViewTableCount"
          name="func.xxxxViewTableCount"><i>xxxx</i>ViewTableCount</a>&nbsp;</td>

          <td>Return the number of tables managed by the view</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxxViewTables"
          name="func.xxxxViewTables"><i>xxxx</i>ViewTables</a>&nbsp;</td>

          <td>Return a list of the names of the tables managed by the view</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x101" name="x101">File Functions</a></h3>

    <p>The low-level database I/O performed by the top-level view entrypoints
    is abstracted into the file functions. These are used to statically select
    between database, revision, and base view I/O in subclassing.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.fileAdd" name="func.fileAdd">fileAdd</a>&nbsp;</td>

          <td>Add tables to database</td>
        </tr>

        <tr class="grey">
          <td><a id="func.fileBegin"
          name="func.fileBegin">fileBegin</a>&nbsp;</td>

          <td>Begin a transaction</td>
        </tr>

        <tr>
          <td><a id="func.fileCancel"
          name="func.fileCancel">fileCancel</a>&nbsp;</td>

          <td>Cancel and discard revisions</td>
        </tr>

        <tr class="grey">
          <td><a id="func.fileClose"
          name="func.fileClose">fileClose</a>&nbsp;</td>

          <td>Close tables</td>
        </tr>

        <tr>
          <td><a id="func.fileCommit"
          name="func.fileCommit">fileCommit</a>&nbsp;</td>

          <td>Commit a successful transaction</td>
        </tr>

        <tr class="grey">
          <td><a id="func.fileCreate"
          name="func.fileCreate">fileCreate</a>&nbsp;</td>

          <td>Commence a new set of revisions</td>
        </tr>

        <tr>
          <td><a id="func.fileDelete"
          name="func.fileDelete">fileDelete</a>&nbsp;</td>

          <td>Delete a record</td>
        </tr>

        <tr class="grey">
          <td><a id="func.fileDirty"
          name="func.fileDirty">fileDirty</a>&nbsp;</td>

          <td>Report if there are uncommitted revision changes</td>
        </tr>

        <tr>
          <td><a id="func.fileDriverInfo"
          name="func.fileDriverInfo">fileDriverInfo</a>&nbsp;</td>

          <td>Return a DBDRVRINFO structure</td>
        </tr>

        <tr class="grey">
          <td><a id="func.fileDrop"
          name="func.fileDrop">fileDrop</a>&nbsp;</td>

          <td>Drop the tables from the database</td>
        </tr>

        <tr>
          <td><a id="func.fileEmpty"
          name="func.fileEmpty">fileEmpty</a>&nbsp;</td>

          <td>Empties the underlying table(s)</td>
        </tr>

        <tr class="grey">
          <td><a id="func.fileError"
          name="func.fileError">fileError</a>&nbsp;</td>

          <td>Report the indicated error</td>
        </tr>

        <tr>
          <td><a id="func.fileFilterCount"
          name="func.fileFilterCount">fileFilterCount</a>&nbsp;</td>

          <td>Count the records matching the given criteria</td>
        </tr>

        <tr class="grey">
          <td><a id="func.fileFilterDelete"
          name="func.fileFilterDelete">fileFilterDelete</a>&nbsp;</td>

          <td>Delete a set of records</td>
        </tr>

        <tr>
          <td><a id="func.fileFilterSegs"
          name="func.fileFilterSegs">fileFilterSegs</a>&nbsp;</td>

          <td>Set the number of fixed leading key segments</td>
        </tr>

        <tr class="grey">
          <td><a id="func.fileFirst"
          name="func.fileFirst">fileFirst</a>&nbsp;</td>

          <td>Retrieve the first record equal or beyond the current</td>
        </tr>

        <tr>
          <td><a id="func.fileGet" name="func.fileGet">fileGet</a>&nbsp;</td>

          <td>Retrieve the record equal to the current</td>
        </tr>

        <tr class="grey">
          <td><a id="func.fileInfo"
          name="func.fileInfo">fileInfo</a>&nbsp;</td>

          <td>Return the table information</td>
        </tr>

        <tr>
          <td><a id="func.fileInsert"
          name="func.fileInsert">fileInsert</a>&nbsp;</td>

          <td>Insert a new record</td>
        </tr>

        <tr class="grey">
          <td><a id="func.fileIsLocked"
          name="func.fileIsLocked">fileIsLocked</a>&nbsp;</td>

          <td>Report if the current record is locked</td>
        </tr>

        <tr>
          <td><a id="func.fileLinkFlags"
          name="func.fileLinkFlags">fileLinkFlags</a>&nbsp;</td>

          <td>Return the flags used to open the link</td>
        </tr>

        <tr class="grey">
          <td><a id="func.fileLocate"
          name="func.fileLocate">fileLocate</a>&nbsp;</td>

          <td>Report if the current record exists in the database</td>
        </tr>

        <tr>
          <td><a id="func.fileLock"
          name="func.fileLock">fileLock</a>&nbsp;</td>

          <td>Lock the current record</td>
        </tr>

        <tr class="grey">
          <td><a id="func.fileNext"
          name="func.fileNext">fileNext</a>&nbsp;</td>

          <td>Retrieve the next record beyond the current</td>
        </tr>

        <tr>
          <td><a id="func.fileOpen"
          name="func.fileOpen">fileOpen</a>&nbsp;</td>

          <td>Open database tables, preparing them for access</td>
        </tr>

        <tr class="grey">
          <td><a id="func.fileOptLock"
          name="func.fileOptLock">fileOptLock</a>&nbsp;</td>

          <td>Lock the current record with optimistic concurrency</td>
        </tr>

        <tr>
          <td><a id="func.filePost"
          name="func.filePost">filePost</a>&nbsp;</td>

          <td>Post the next revision to the database</td>
        </tr>

        <tr class="grey">
          <td><a id="func.filePrePost"
          name="func.filePrePost">filePrePost</a>&nbsp;</td>

          <td>Retrieve the next revision to be posted</td>
        </tr>

        <tr>
          <td><a id="func.fileReverses"
          name="func.fileReverses">fileReverses</a>&nbsp;</td>

          <td>Determine if reverse traversal supported</td>
        </tr>

        <tr class="grey">
          <td><a id="func.fileRollback"
          name="func.fileRollback">fileRollback</a>&nbsp;</td>

          <td>Abort an unsuccessful transaction</td>
        </tr>

        <tr>
          <td><a id="func.fileTransBegin"
          name="func.fileTransBegin">fileTransBegin</a>&nbsp;</td>

          <td>Begin a transaction, irrespective of revisioning settings</td>
        </tr>

        <tr class="grey">
          <td><a id="func.fileTransCommit"
          name="func.fileTransCommit">fileTransCommit</a>&nbsp;</td>

          <td>Commit a successful transaction, irrespective of revisioning
          settings</td>
        </tr>

        <tr>
          <td><a id="func.fileTransRollback"
          name="func.fileTransRollback">fileTransRollback</a>&nbsp;</td>

          <td>Abort an unsuccessful transaction, irrespective of revisioning
          settings</td>
        </tr>

        <tr class="grey">
          <td><a id="func.fileUnLock"
          name="func.fileUnLock">fileUnLock</a>&nbsp;</td>

          <td>Unlock the current record</td>
        </tr>

        <tr>
          <td><a id="func.fileUpdate"
          name="func.fileUpdate">fileUpdate</a>&nbsp;</td>

          <td>Update the database with current record</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x102" name="x102">Nested Details</a></h3>

    <p>These functions manage nested detail revisions. They largely are
    abstractions of the file functions above, though a few underlie the file
    functions. Nested details implement a logical extension of the various
    detail protocols, such that the original detail protocols are special cases
    of the nested detail protocols. The template uses the revision API, and
    maintains a list of revision lists in V.revList, one of which is duplicated
    as the current revision list upon which the <a
    href="#func.xxxxInsert"><i>xxxx</i>Insert</a>, <a
    href="#func.xxxxUpdate"><i>xxxx</i>Update</a>, <a
    href="#func.xxxxDelete"><i>xxxx</i>Delete</a>, <a
    href="#func.xxxxFetch"><i>xxxx</i>Fetch</a>, <a
    href="#func.xxxxFetchLock"><i>xxxx</i>FetchLock</a>, <a
    href="#func.xxxxFilterFetch"><i>xxxx</i>FilterFetch</a>, <a
    href="#func.xxxxRead"><i>xxxx</i>Read</a>, and <a
    href="#func.xxxxReadLock"><i>xxxx</i>ReadLock</a> entrypoints operate.
    Nesting level 1 is the &ldquo;outermost&rdquo;, and is equivalent to the
    non-nested detail revisions. Nesting level 1+HDR_HAS_REVISIONS is the
    &ldquo;innermost&rdquo;, and has the current revision list. See the
    comments in ROTOVIEW.H for more information.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.RevisionAdd"
          name="func.RevisionAdd">RevisionAdd</a>&nbsp;</td>

          <td>Add the current revision list to list of revision lists</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionAttach"
          name="func.RevisionAttach">RevisionAttach</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.RevisionCancel"
          name="func.RevisionCancel">RevisionCancel</a>&nbsp;</td>

          <td>Cancel and discard a specified revision list</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionCheckDuplicates"
          name="func.RevisionCheckDuplicates">RevisionCheckDuplicates</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.RevisionCreate"
          name="func.RevisionCreate">RevisionCreate</a>&nbsp;</td>

          <td>Create a new current revision list, possibly from the list of
          revision lists</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionConsume"
          name="func.RevisionConsume">RevisionConsume</a>&nbsp;</td>

          <td>Consume the next revision list on the list of revision lists by
          removing it and making it the current revision list.</td>
        </tr>

        <tr>
          <td><a id="func.RevisionDirty"
          name="func.RevisionDirty">RevisionDirty</a>&nbsp;</td>

          <td>Report if current revision list has uncommitted changes</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionDuplicate"
          name="func.RevisionDuplicate">RevisionDuplicate</a>&nbsp;</td>

          <td>Duplicates a specified revision list</td>
        </tr>

        <tr>
          <td><a id="func.RevisionFind"
          name="func.RevisionFind">RevisionFind</a>&nbsp;</td>

          <td>Locate a specific revision list from the list of revision
          lists</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionGenerate"
          name="func.RevisionGenerate">RevisionGenerate</a>&nbsp;</td>

          <td>Create a new revision list</td>
        </tr>

        <tr>
          <td><a id="func.RevisionInnerAdd"
          name="func.RevisionInnerAdd">RevisionInnerAdd</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionInnerAttach"
          name="func.RevisionInnerAttach">RevisionInnerAttach</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.RevisionInnerCancel"
          name="func.RevisionInnerCancel">RevisionInnerCancel</a>&nbsp;</td>

          <td>Cancel the specified nesting level and inward of revision
          lists</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionInnerConsume"
          name="func.RevisionInnerConsume">RevisionInnerConsume</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.RevisionInnerCreate"
          name="func.RevisionInnerCreate">RevisionInnerCreate</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionInnerDirty"
          name="func.RevisionInnerDirty">RevisionInnerDirty</a>&nbsp;</td>

          <td>Report if the specified nesting level of revision lists has
          uncommitted changes</td>
        </tr>

        <tr>
          <td><a id="func.RevisionInnerDuplicate"
          name="func.RevisionInnerDuplicate">RevisionInnerDuplicate</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionInnerFind"
          name="func.RevisionInnerFind">RevisionInnerFind</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.RevisionInnerGraft"
          name="func.RevisionInnerGraft">RevisionInnerGraft</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionInnerMove"
          name="func.RevisionInnerMove">RevisionInnerMove</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.RevisionInnerPost"
          name="func.RevisionInnerPost">RevisionInnerPost</a>&nbsp;</td>

          <td>Post the specified nesting level to the next outward level</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionInnerSegments"
          name="func.RevisionInnerSegments">RevisionInnerSegments</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.RevisionInnerSwitch"
          name="func.RevisionInnerSwitch">RevisionInnerSwitch</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionMove"
          name="func.RevisionMove">RevisionMove</a>&nbsp;</td>

          <td>Move a specified array of revision list handles from one location
          to another.</td>
        </tr>

        <tr>
          <td><a id="func.RevisionOuterCancel"
          name="func.RevisionOuterCancel">RevisionOuterCancel</a>&nbsp;</td>

          <td>Cancel the entire list of revision lists</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionOuterDirty"
          name="func.RevisionOuterDirty">RevisionOuterDirty</a>&nbsp;</td>

          <td>Report if the entire list of revision lists has uncommitted
          changes</td>
        </tr>

        <tr>
          <td><a id="func.RevisionOuterPost"
          name="func.RevisionOuterPost">RevisionOuterPost</a>&nbsp;</td>

          <td>Post the entire list of revision lists to disk</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionOuterSegments"
          name="func.RevisionOuterSegments">RevisionOuterSegments</a>&nbsp;</td>

          <td>Set the number of fixed leading key segments for the entire list
          of revision lists</td>
        </tr>

        <tr>
          <td><a id="func.RevisionPost"
          name="func.RevisionPost">RevisionPost</a>&nbsp;</td>

          <td>Post the current revision list to disk</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionRecursiveConsume"
          name="func.RevisionRecursiveConsume">RevisionRecursiveConsume</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.RevisionRecursiveDuplicate"
          name="func.RevisionRecursiveDuplicate">RevisionRecursiveDuplicate</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionRecursiveSegments"
          name="func.RevisionRecursiveSegments">RevisionRecursiveSegments</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.RevisionRekey"
          name="func.RevisionRekey">RevisionRekey</a>&nbsp;</td>

          <td>Change the value of one of the header&rsquo;s primary key
          segments for all of the detail records belonging to that header</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionSegments"
          name="func.RevisionSegments">RevisionSegments</a>&nbsp;</td>

          <td>Set the number of fixed leading key segments for the current
          revision list</td>
        </tr>

        <tr>
          <td><a id="func.RevisionSpy"
          name="func.RevisionSpy">RevisionSpy</a>&nbsp;</td>

          <td>Dump diagnostic information about the specified revision list to
          RVSPY</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionSpyLevels"
          name="func.RevisionSpyLevels">RevisionSpyLevels</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.RevisionSpyTree"
          name="func.RevisionSpyTree">RevisionSpyTree</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RevisionSwitch"
          name="func.RevisionSwitch">RevisionSwitch</a>&nbsp;</td>

          <td>Create a new current revision list, possibly from the list of
          revision lists</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x103" name="x103">Subclass Views</a></h3>

    <p>These functions are of use to subclass views. They manage interaction
    with the base view.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.BaseClose"
          name="func.BaseClose">BaseClose</a>&nbsp;</td>

          <td>Close the base view</td>
        </tr>

        <tr class="grey">
          <td><a id="func.BaseGetData"
          name="func.BaseGetData">BaseGetData</a>&nbsp;</td>

          <td>Fill the current record from the base view&rsquo;s filler
          field</td>
        </tr>

        <tr>
          <td><a id="func.BaseGetKey"
          name="func.BaseGetKey">BaseGetKey</a>&nbsp;</td>

          <td>Fill the joined table&rsquo;s key from the base view&rsquo;s
          primary key</td>
        </tr>

        <tr class="grey">
          <td><a id="func.BaseGetPermissions"
          name="func.BaseGetPermissions">BaseGetPermissions</a>&nbsp;</td>

          <td>Get the base view&rsquo;s permissions (via <a
          href="#func.xxxxSecurity"><i>xxxx</i>Security</a>)</td>
        </tr>

        <tr>
          <td><a id="func.BaseLoad"
          name="func.BaseLoad">BaseLoad</a>&nbsp;</td>

          <td>Load the base view</td>
        </tr>

        <tr class="grey">
          <td><a id="func.BaseOpen"
          name="func.BaseOpen">BaseOpen</a>&nbsp;</td>

          <td>Open the base view</td>
        </tr>

        <tr>
          <td><a id="func.BasePutData"
          name="func.BasePutData">BasePutData</a>&nbsp;</td>

          <td>Fill the base view&rsquo;s filler field from the current
          record</td>
        </tr>

        <tr class="grey">
          <td><a id="func.BasePutKey"
          name="func.BasePutKey">BasePutKey</a>&nbsp;</td>

          <td>Fill the base view&rsquo;s primary key from the joined
          table&rsquo;s</td>
        </tr>

        <tr>
          <td><a id="func.BaseRoto"
          name="func.BaseRoto">BaseRoto</a>&nbsp;</td>

          <td>Get the roto instance</td>
        </tr>

        <tr class="grey">
          <td><a id="func.BaseRotoEntry"
          name="func.BaseRotoEntry">BaseRotoEntry</a>&nbsp;</td>

          <td>Chain to base view for view extension calls</td>
        </tr>

        <tr>
          <td><a id="func.BaseUnload"
          name="func.BaseUnload">BaseUnload</a>&nbsp;</td>

          <td>Unload the base view</td>
        </tr>

        <tr class="grey">
          <td><a id="func.BaseNotify"
          name="func.BaseNotify">BaseNotify</a>&nbsp;</td>

          <td>Notification procedure registered with the base view whenever <a
          href="#func.xxxxInstanceNotify"><i>xxxx</i>InstanceNotify</a> is
          received</td>
        </tr>

        <tr>
          <td><a id="func.BaseBrowse"
          name="func.BaseBrowse">BaseBrowse</a>&nbsp;</td>

          <td>Browse the base view, calling either viewBrowse or
          viewFilterSelect depending on the base view&rsquo;s template
          version</td>
        </tr>

        <tr class="grey">
          <td><a id="func.BaseFetch"
          name="func.BaseFetch">BaseFetch</a>&nbsp;</td>

          <td>Fetch the base view, calling either viewFetch or viewFilterFetch
          depending on the base view&rsquo;s template version</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x104" name="x104">Validation</a></h3>

    <p>These functions validate field, key and index data.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.ValidateBuffer"
          name="func.ValidateBuffer">ValidateBuffer</a>&nbsp;</td>

          <td>Validate buffer size against type requirements</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ValidateData"
          name="func.ValidateData">ValidateData</a>&nbsp;</td>

          <td>Validate BCD data</td>
        </tr>

        <tr>
          <td><a id="func.ValidateField"
          name="func.ValidateField">ValidateField</a>&nbsp;</td>

          <td>Invoke field&rsquo;s validation function</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ValidateKeyField"
          name="func.ValidateKeyField">ValidateKeyField</a>&nbsp;</td>

          <td>Validate the key(s) which contain the given field</td>
        </tr>

        <tr>
          <td><a id="func.ValidateKeys"
          name="func.ValidateKeys">ValidateKeys</a>&nbsp;</td>

          <td>Validate all keys</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ValidateList"
          name="func.ValidateList">ValidateList</a>&nbsp;</td>

          <td>Validate against field&rsquo;s presents list</td>
        </tr>

        <tr>
          <td><a id="func.ValidIndex"
          name="func.ValidIndex">ValidIndex</a>&nbsp;</td>

          <td>Return whether view field index is valid</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxVerify"
          name="func.xxxVerify">xxxVerify</a>&nbsp;</td>

          <td>Common verification logic, parameterized for lazy verification.
          Used by <a href="#func.xxxxDelete"><i>xxxx</i>Delete</a>, <a
          href="#func.xxxxInsert"><i>xxxx</i>Insert</a>, and <a
          href="#func.xxxxVerify"><i>xxxx</i>Verify</a></td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x105" name="x105">Error Codes</a></h3>

    <p>These functions manage error codes.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.ErrorMapDatabaseToExtended"
          name="func.ErrorMapDatabaseToExtended">ErrorMapDatabaseToExtended</a>&nbsp;</td>

          <td>Map database error code to extended error code</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ErrorMapExtendedToOld"
          name="func.ErrorMapExtendedToOld">ErrorMapExtendedToOld</a>&nbsp;</td>

          <td>Map extended error code to old error code</td>
        </tr>

        <tr>
          <td><a id="func.ErrorMapFilterToDatabase"
          name="func.ErrorMapFilterToDatabase">ErrorMapFilterToDatabase</a>&nbsp;</td>

          <td>Map filter error code to database error code</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ErrorMapFilterToExtended"
          name="func.ErrorMapFilterToExtended">ErrorMapFilterToExtended</a>&nbsp;</td>

          <td>Map filter error code to extended error code</td>
        </tr>

        <tr>
          <td><a id="func.ErrorMapViewToDatabase"
          name="func.ErrorMapViewToDatabase">ErrorMapViewToDatabase</a>&nbsp;</td>

          <td>Map extended code to database error code</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ErrorMapViewToExtended"
          name="func.ErrorMapViewToExtended">ErrorMapViewToExtended</a>&nbsp;</td>

          <td>Map old code to extended error code</td>
        </tr>

        <tr>
          <td><a id="func.ErrorMapViewToFilter"
          name="func.ErrorMapViewToFilter">ErrorMapViewToFilter</a>&nbsp;</td>

          <td>Map extended code to filter error code</td>
        </tr>

        <tr class="grey">
          <td><a id="func.MaxDatabaseError"
          name="func.MaxDatabaseError">MaxDatabaseError</a>&nbsp;</td>

          <td>Accumulate database error status. Warnings override success, and
          the last warning takes precedence. Errors override warnings, and the
          first error takes precedence</td>
        </tr>

        <tr>
          <td><a id="func.MaxError"
          name="func.MaxError">MaxError</a>&nbsp;</td>

          <td>Accumulate error status. Warnings override success, and the last
          warning takes precedence. Errors override warnings, and the first
          error takes precedence</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x106" name="x106">Record and Field Value Manipulation</a></h3>

    <p>These functions manipulate the values of fields, sets of fields, or
    entire records.</p>

    <h4><a id="x107" name="x107">Initializing Values</a></h4>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.InitBody"
          name="func.InitBody">InitBody</a>&nbsp;</td>

          <td>Initialize the current record</td>
        </tr>

        <tr class="grey">
          <td><a id="func.InitBodyGen"
          name="func.InitBodyGen">InitBodyGen</a>&nbsp;</td>

          <td>Initialize the current record. It can generate a unique key
          forcibly, or optionally if the last key segment is zeroes, or not at
          all. It can also be instructed to insert such a generated key
          forcibly, or optionally based on protocol, or not at all.</td>
        </tr>

        <tr>
          <td><a id="func.InitField"
          name="func.InitField">InitField</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.InitFieldBuffer"
          name="func.InitFieldBuffer">InitFieldBuffer</a>&nbsp;</td>

          <td>Initialize a field according to its type</td>
        </tr>

        <tr>
          <td><a id="func.InitFieldList"
          name="func.InitFieldList">InitFieldList</a>&nbsp;</td>

          <td>Initialize a field according to its presentation list</td>
        </tr>

        <tr class="grey">
          <td><a id="func.InitFields"
          name="func.InitFields">InitFields</a>&nbsp;</td>

          <td>Initialize all published fields by type</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x107" name="x107">Initializing Values</a></h4>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.InitBody"
          name="func.InitBody">InitBody</a>&nbsp;</td>

          <td>Initialize the current record</td>
        </tr>

        <tr class="grey">
          <td><a id="func.InitBodyGen"
          name="func.InitBodyGen">InitBodyGen</a>&nbsp;</td>

          <td>Initialize the current record. It can generate a unique key
          forcibly, or optionally if the last key segment is zeroes, or not at
          all. It can also be instructed to insert such a generated key
          forcibly, or optionally based on protocol, or not at all.</td>
        </tr>

        <tr>
          <td><a id="func.InitField"
          name="func.InitField">InitField</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.InitFieldBuffer"
          name="func.InitFieldBuffer">InitFieldBuffer</a>&nbsp;</td>

          <td>Initialize a field according to its type</td>
        </tr>

        <tr class="grey">
          <td><a id="func.InitFieldList"
          name="func.InitFieldList">InitFieldList</a>&nbsp;</td>

          <td>Initialize a field according to its presentation list</td>
        </tr>

        <tr class="grey">
          <td><a id="func.InitFields"
          name="func.InitFields">InitFields</a>&nbsp;</td>

          <td>Initialize all published fields by type</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x122" name="x122">Generating Unique Key Values</a></h4>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.GenerateKeyDelayed"
          name="func.GenerateKeyDelayed">GenerateKeyDelayed</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.GenerateKeyReally"
          name="func.GenerateKeyReally">GenerateKeyReally</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.GenerateSequence"
          name="func.GenerateSequence">GenerateSequence</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x109" name="x109">Comparing Field Values</a></h4>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.BinaryComparator"
          name="func.BinaryComparator">BinaryComparator</a>&nbsp;</td>

          <td>Compare binary field values</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ComparePrimary"
          name="func.ComparePrimary">ComparePrimary</a>&nbsp;</td>

          <td>Compare primary key field values</td>
        </tr>

        <tr>
          <td><a id="func.DecimalComparator"
          name="func.DecimalComparator">DecimalComparator</a>&nbsp;</td>

          <td>Compare BCD field values</td>
        </tr>

        <tr class="grey">
          <td><a id="func.IntegerComparator"
          name="func.IntegerComparator">IntegerComparator</a>&nbsp;</td>

          <td>Compare short integer field values</td>
        </tr>

        <tr>
          <td><a id="func.LongComparator"
          name="func.LongComparator">LongComparator</a>&nbsp;</td>

          <td>Compare long integer field values</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RealComparator"
          name="func.RealComparator">RealComparator</a>&nbsp;</td>

          <td>Compare real field values</td>
        </tr>

        <tr>
          <td><a id="func.StringComparator"
          name="func.StringComparator">StringComparator</a>&nbsp;</td>

          <td>Compare string field values</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x110" name="x110">Scratch Memory Management</a></h3>

    <p>These functions are for template-managed dynamic memory. Two forms of
    dynamic memory are managed:</p>

    <p>The stack is for short-lived temporary variables. Allocation and
    deallocation is done last-in-first-out fashion. Allocations are
    automatically freed between invocations of the view. The space available is
    defined by DO_SCRATCHSTACK. Use of the scratch stack is deprecated in
    favour of _alloca() from the C runtime.</p>

    <p>The heap is for long-lived variables, particularly if the data are to be
    kept between invocations of the view. The view automatically frees any
    memory when <a href="#func.xxxxClose"><i>xxxx</i>Close</a> is called. There
    are a limited number allocations permitted at any one time, defined by
    DO_SCRATCHHEAP. Use of the heap is deprecated in favour of the memory
    API.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.ScratchAlloc"
          name="func.ScratchAlloc">ScratchAlloc</a>&nbsp;</td>

          <td>Allocate a block of memory from the heap.</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ScratchCreate"
          name="func.ScratchCreate">ScratchCreate</a>&nbsp;</td>

          <td>Create and initialize the scratch memory</td>
        </tr>

        <tr>
          <td><a id="func.ScratchDestroy"
          name="func.ScratchDestroy">ScratchDestroy</a>&nbsp;</td>

          <td>Cleanup and free the scratch memory</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ScratchError"
          name="func.ScratchError">ScratchError</a>&nbsp;</td>

          <td>Report memory allocation failure</td>
        </tr>

        <tr>
          <td><a id="func.ScratchFree"
          name="func.ScratchFree">ScratchFree</a>&nbsp;</td>

          <td>Free a block of memory allocated from the heap.</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ScratchPop"
          name="func.ScratchPop">ScratchPop</a>&nbsp;</td>

          <td>Free a block of memory allocated from the stack. Also frees any
          outstanding allocations subsequent to this block&rsquo;s
          allocation</td>
        </tr>

        <tr>
          <td><a id="func.ScratchPush"
          name="func.ScratchPush">ScratchPush</a>&nbsp;</td>

          <td>Allocate a block of memory from the stack</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x111" name="x111">Record Filtering and Retrieval</a></h3>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.BrowseBody"
          name="func.BrowseBody">BrowseBody</a>&nbsp;</td>

          <td>Parse the given filter and reset the browse state
          accordingly</td>
        </tr>

        <tr class="grey">
          <td><a id="func.BufferedFetch"
          name="func.BufferedFetch">BufferedFetch</a>&nbsp;</td>

          <td>Fetch a set of records using dbFetch, used only when a view is
          opened read-only</td>
        </tr>

        <tr>
          <td><a id="func.detailName"
          name="func.detailName">detailName</a>&nbsp;</td>

          <td><a href="#func.xxxxName"><i>xxxx</i>Name</a> logic for use by
          filter APIs, with extraction of field information from the detail
          composite instead of this view</td>
        </tr>

        <tr class="grey">
          <td><a id="func.OrderBody"
          name="func.OrderBody">OrderBody</a>&nbsp;</td>

          <td>Change which record ordering is used</td>
        </tr>

        <tr>
          <td><a id="func.tableName"
          name="func.tableName">tableName</a>&nbsp;</td>

          <td><a href="#func.xxxxName"><i>xxxx</i>Name</a> logic for use by
          filter APIs, with extraction of field information from the table
          instead of the view</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxFetch"
          name="func.xxxFetch">xxxFetch</a>&nbsp;</td>

          <td><a href="#func.xxxxFetch"><i>xxxx</i>Fetch</a> logic,
          parameterized for record locking, origin and next-record
          semantics</td>
        </tr>

        <tr>
          <td><a id="func.xxxFetchFilter"
          name="func.xxxFetchFilter">xxxFetchFilter</a>&nbsp;</td>

          <td><a href="#func.xxxxFetch"><i>xxxx</i>Fetch</a> logic,
          parameterized for filters and record locking, origin and next-record
          semantics</td>
        </tr>

        <tr class="grey">
          <td><a id="func.xxxKey" name="func.xxxKey">xxxKey</a>&nbsp;</td>

          <td><a href="#func.xxxxKey"><i>xxxx</i>Key</a> logic for use by
          filter APIs, with some error reporting suppressed</td>
        </tr>

        <tr>
          <td><a id="func.xxxRead" name="func.xxxRead">xxxRead</a>&nbsp;</td>

          <td><a href="#func.xxxxRead"><i>xxxx</i>Read</a> logic, parameterized
          for record locking</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x112" name="x112">Notification Management</a></h3>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.NotifyAdd"
          name="func.NotifyAdd">NotifyAdd</a>&nbsp;</td>

          <td>Register a new notification recipient</td>
        </tr>

        <tr class="grey">
          <td><a id="func.NotifyClose"
          name="func.NotifyClose">NotifyClose</a>&nbsp;</td>

          <td>Release all registered notifications</td>
        </tr>

        <tr>
          <td><a id="func.NotifyFieldAttributes"
          name="func.NotifyFieldAttributes">NotifyFieldAttributes</a>&nbsp;</td>

          <td>Fire notifications for any fields whose attributes have
          changed</td>
        </tr>

        <tr class="grey">
          <td><a id="func.NotifyFieldValues"
          name="func.NotifyFieldValues">NotifyFieldValues</a>&nbsp;</td>

          <td>Fire notifications for any fields whose value have changed</td>
        </tr>

        <tr>
          <td><a id="func.NotifyFire"
          name="func.NotifyFire">NotifyFire</a>&nbsp;</td>

          <td>Notify all recipients indicating the given condition has
          occurred</td>
        </tr>

        <tr class="grey">
          <td><a id="func.NotifyRemove"
          name="func.NotifyRemove">NotifyRemove</a>&nbsp;</td>

          <td>Remove the given recipient from the list of registered
          notifications</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x124" name="x124">Type-Safe Field I/O</a></h3>

    <p>$$$$$$$$$$$$$$</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.paramGetBoolean"
          name="func.paramGetBoolean">paramGetBoolean</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.paramGetInteger"
          name="func.paramGetInteger">paramGetInteger</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.paramGetLong"
          name="func.paramGetLong">paramGetLong</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.paramGetReal"
          name="func.paramGetReal">paramGetReal</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.paramGetString"
          name="func.paramGetString">paramGetString</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.viewGetBoolean"
          name="func.viewGetBoolean">viewGetBoolean</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.viewGetInteger"
          name="func.viewGetInteger">viewGetInteger</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.viewGetLong"
          name="func.viewGetLong">viewGetLong</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.viewGetReal"
          name="func.viewGetReal">viewGetReal</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.viewGetString"
          name="func.viewGetString">viewGetString</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.viewPutBoolean"
          name="func.viewPutBoolean">viewPutBoolean</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.viewPutInteger"
          name="func.viewPutInteger">viewPutInteger</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.viewPutLong"
          name="func.viewPutLong">viewPutLong</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.viewPutReal"
          name="func.viewPutReal">viewPutReal</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x113" name="x113">Miscellaneous</a></h3>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Function&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.ApplyMask"
          name="func.ApplyMask">ApplyMask</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ClearChange"
          name="func.ClearChange">ClearChange</a>&nbsp;</td>

          <td>Clear the ATTR_CHANGED attribute from all fields and clear the
          current record&rsquo;s dirty flag</td>
        </tr>

        <tr>
          <td><a id="func.DeleteBody"
          name="func.DeleteBody">DeleteBody</a>&nbsp;</td>

          <td>Common <a href="#func.xxxxDelete"><i>xxxx</i>Delete</a> and <a
          href="#func.xxxxFilterDelete"><i>xxxx</i>FilterDelete</a> logic for
          deletion of a single record</td>
        </tr>

        <tr class="grey">
          <td><a id="func.EntryStatePop"
          name="func.EntryStatePop">EntryStatePop</a>&nbsp;</td>

          <td>Restore the prior state of the view handle upon exit from the
          view</td>
        </tr>

        <tr>
          <td><a id="func.EntryStatePush"
          name="func.EntryStatePush">EntryStatePush</a>&nbsp;</td>

          <td>Save the prior state of the view handle upon entry to the
          view</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FlagKey" name="func.FlagKey">FlagKey</a>&nbsp;</td>

          <td>Set/reset the (ATTR_KEY|ATTR_REQUIRED) attributes of the given
          key number</td>
        </tr>

        <tr>
          <td><a id="func.FlagKeyAux"
          name="func.FlagKeyAux">FlagKeyAux</a>&nbsp;</td>

          <td>Set/reset the (ATTR_KEY|ATTR_REQUIRED) attributes, respecting
          subclass view considerations</td>
        </tr>

        <tr class="grey">
          <td><a id="func.GetPermissions"
          name="func.GetPermissions">GetPermissions</a>&nbsp;</td>

          <td>Determine the current permissions for the default PERMISSIONMAP
          array</td>
        </tr>

        <tr>
          <td><a id="func.InitFieldStruct"
          name="func.InitFieldStruct">InitFieldStruct</a>&nbsp;</td>

          <td>Initialize the dynamic statuses for the view&rsquo;s fields upon
          <a href="#func.xxxxOpen"><i>xxxx</i>Open</a></td>
        </tr>

        <tr class="grey">
          <td><a id="func.LoadFieldMask"
          name="func.LoadFieldMask">LoadFieldMask</a>&nbsp;</td>

          <td>Return the given field&rsquo;s presentation mask string in a
          buffer of size MAX_FIELD_LENGTH</td>
        </tr>

        <tr>
          <td><a id="func.LoadMask"
          name="func.LoadMask">LoadMask</a>&nbsp;</td>

          <td>Return the given field&rsquo;s presentation mask string in a
          buffer of given size</td>
        </tr>

        <tr class="grey">
          <td><a id="func.LoadRsc" name="func.LoadRsc">LoadRsc</a>&nbsp;</td>

          <td>Return the string from the given resource ID loaded into a
          scratch stack buffer</td>
        </tr>

        <tr>
          <td><a id="func.LoadStr" name="func.LoadStr">LoadStr</a>&nbsp;</td>

          <td>[Function has been deleted. Returned a string loaded into a
          scratch stack buffer. The string may also be a resource ID as
          returned by MAKERSC]$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.LocateCharacteristic"
          name="func.LocateCharacteristic">LocateCharacteristic</a>&nbsp;</td>

          <td>Search for the given characteristic value in a field&rsquo;s list
          of characteristics</td>
        </tr>

        <tr>
          <td><a id="func.MapToInternalComposite"
          name="func.MapToInternalComposite">MapToInternalComposite</a>&nbsp;</td>

          <td>Map external view composite definitions to the internal
          definitions required by the template</td>
        </tr>

        <tr class="grey">
          <td><a id="func.MapToNewFieldIndex"
          name="func.MapToNewFieldIndex">MapToNewFieldIndex</a>&nbsp;</td>

          <td>Map old view field indexes to their new definitions</td>
        </tr>

        <tr>
          <td><a id="func.MergeConflictedRecords"
          name="func.MergeConflictedRecords">MergeConflictedRecords</a>&nbsp;</td>

          <td>Merge current record changes with those of another task on <a
          href="#func.xxxxUpdate"><i>xxxx</i>Update</a> getting
          DBS_CONFLICT</td>
        </tr>

        <tr class="grey">
          <td><a id="func.OpenBody"
          name="func.OpenBody">OpenBody</a>&nbsp;</td>

          <td>Common <a
          href="#func.xxxxInstanceOpen"><i>xxxx</i>InstanceOpen</a> and <a
          href="#func.xxxxOpen"><i>xxxx</i>Open</a> logic</td>
        </tr>

        <tr>
          <td><a id="func.ReportAssertion"
          name="func.ReportAssertion">ReportAssertion</a>&nbsp;</td>

          <td>Report the failed assertion to RVSPY and the debug monitor (if
          present)</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ReportString"
          name="func.ReportString">ReportString</a>&nbsp;</td>

          <td>Writes a string to RVSPY and the debug monitor (if present)</td>
        </tr>

        <tr>
          <td><a id="func.RewriteRecord"
          name="func.RewriteRecord">RewriteRecord</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.rvspyPrint"
          name="func.rvspyPrint">rvspyPrint</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.SecurityPermissions"
          name="func.SecurityPermissions">SecurityPermissions</a>&nbsp;</td>

          <td>Determine the current permissions for the given PERMISSIONMAP
          array</td>
        </tr>
      </tbody>
    </table>

    <h2><a id="x114" name="x114">Template-Defined Macros</a></h2>

    <h3><a id="x115" name="x115">Symbolic Constants</a></h3>

    <p>You can use these constants in order to avoid hard-coding values in
    tests and declarations.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Symbol&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.CMP_COUNT"
          name="func.CMP_COUNT">CMP_COUNT</a>&nbsp;</td>

          <td>Number of template-managed compositions, be they published or
          unpublished. Manual compositions are not counted.</td>
        </tr>

        <tr class="grey">
          <td><a id="func.DETAILS_ARE_REVISIONED"
          name="func.DETAILS_ARE_REVISIONED">DETAILS_ARE_REVISIONED</a>&nbsp;</td>

          <td>DTL_CMP_COUNT&gt;0 &amp;&amp; (!defined(BATCH_VIEW) ||
          defined(HEADER_VIEW) || defined(DETAIL_VIEW)).$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.EXP_CMP_COUNT"
          name="func.EXP_CMP_COUNT">EXP_CMP_COUNT</a>&nbsp;</td>

          <td>Number of published compositions.</td>
        </tr>

        <tr class="grey">
          <td><a id="func.JOIN_KEY_COUNT"
          name="func.JOIN_KEY_COUNT">JOIN_KEY_COUNT</a>&nbsp;</td>

          <td>Defined to 1 if SUBCLASS_VIEW==JOIN_SUBCLASS</td>
        </tr>

        <tr>
          <td><a id="func.tttt_FLD_COUNT"
          name="func.tttt_FLD_COUNT"><i>tttt</i>_FLD_COUNT</a>&nbsp;</td>

          <td>Number of fields defined in table <i>tttt</i>, both published and
          unpublished. Created by GENTABLE.</td>
        </tr>

        <tr class="grey">
          <td><a id="func.tttt_IDX_COUNT"
          name="func.tttt_IDX_COUNT"><i>tttt</i>_IDX_COUNT</a>&nbsp;</td>

          <td>Number of view fields indexes defined in table <i>tttt</i>.
          Created by GENTABLE.</td>
        </tr>

        <tr>
          <td><a id="func.TEMPLATE_DATE"
          name="func.TEMPLATE_DATE">TEMPLATE_DATE</a>&nbsp;</td>

          <td>Date of the template used to instantiate this view. Decimal long
          integer, format YYYYMMDD. For example, October 16, 2000 is
          20001016</td>
        </tr>

        <tr class="grey">
          <td><a id="func.TEMPLATE_VERSION"
          name="func.TEMPLATE_VERSION">TEMPLATE_VERSION</a>&nbsp;</td>

          <td>Version of the template used to instantiate this view. For
          example, 4.2A is 0x42A</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x117" name="x117">View Error Checking</a></h3>

    <p>ERRNUM return codes can be tested with these macros. It is important to
    use these in conjunction with DO_EXTENDEDERRORS and MaxError.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Macro&nbsp;</td>

          <td class="head">Returns Whether the Code is</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.ERRNUM_IS_FAILURE"
          name="func.ERRNUM_IS_FAILURE">ERRNUM_IS_FAILURE</a>&nbsp;</td>

          <td>An error</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ERRNUM_IS_FAULTLESS"
          name="func.ERRNUM_IS_FAULTLESS">ERRNUM_IS_FAULTLESS</a>&nbsp;</td>

          <td>Not an error and not a warning</td>
        </tr>

        <tr>
          <td><a id="func.ERRNUM_IS_WARNING"
          name="func.ERRNUM_IS_WARNING">ERRNUM_IS_WARNING</a>&nbsp;</td>

          <td>A warning</td>
        </tr>

        <tr class="grey">
          <td><a id="func.ERRNUM_IS_SUCCESS"
          name="func.ERRNUM_IS_SUCCESS">ERRNUM_IS_SUCCESS</a>&nbsp;</td>

          <td>Not an error. It may be a warning.</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x118" name="x118">Database Error Checking</a></h3>

    <p>Database API return codes can be tested with these macros. It is
    important to use these in conjunction with MaxDatabaseError.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Macro&nbsp;</td>

          <td class="head">Returns Whether the Code is</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.DB_ERRNUM_IS_FAILURE"
          name="func.DB_ERRNUM_IS_FAILURE">DB_ERRNUM_IS_FAILURE</a>&nbsp;</td>

          <td>An error</td>
        </tr>

        <tr class="grey">
          <td><a id="func.DB_ERRNUM_IS_FAULTLESS"
          name="func.DB_ERRNUM_IS_FAULTLESS">DB_ERRNUM_IS_FAULTLESS</a>&nbsp;</td>

          <td>Not an error and not a warning</td>
        </tr>

        <tr>
          <td><a id="func.DB_ERRNUM_IS_WARNING"
          name="func.DB_ERRNUM_IS_WARNING">DB_ERRNUM_IS_WARNING</a>&nbsp;</td>

          <td>A warning</td>
        </tr>

        <tr class="grey">
          <td><a id="func.DB_ERRNUM_IS_SUCCESS"
          name="func.DB_ERRNUM_IS_SUCCESS">DB_ERRNUM_IS_SUCCESS</a>&nbsp;</td>

          <td>Not an error. It may be a warning.</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x119" name="x119">Filter Error Checking</a></h3>

    <p>Filter API return codes can be tested with these macros.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Macro&nbsp;</td>

          <td class="head">Returns Whether the Code is</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.FL_ERRNUM_IS_FAILURE"
          name="func.FL_ERRNUM_IS_FAILURE">FL_ERRNUM_IS_FAILURE</a>&nbsp;</td>

          <td>An error</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FL_ERRNUM_IS_FAULTLESS"
          name="func.FL_ERRNUM_IS_FAULTLESS">FL_ERRNUM_IS_FAULTLESS</a>&nbsp;</td>

          <td>Not an error and not a warning</td>
        </tr>

        <tr>
          <td><a id="func.FL_ERRNUM_IS_WARNING"
          name="func.FL_ERRNUM_IS_WARNING">FL_ERRNUM_IS_WARNING</a>&nbsp;</td>

          <td>A warning</td>
        </tr>

        <tr class="grey">
          <td><a id="func.FL_ERRNUM_IS_SUCCESS"
          name="func.FL_ERRNUM_IS_SUCCESS">FL_ERRNUM_IS_SUCCESS</a>&nbsp;</td>

          <td>Not an error. It may be a warning.</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x120" name="x120">Presentation Structure Building</a></h3>

    <p>These macros declare initialized PRESENTATIONINFO structures. They
    create identifiers using preprocessor token-pasting. When you use these
    identifiers in table specification files (*.TBL) make sure to append
    &ldquo;List&rdquo; or &ldquo;Mask&rdquo; to the identifier as appropriate,
    in order to take account of the token-pasting. Some examples of their uses
    may be seen in the stock <i>zzzz</i>1.c and <i>tttt</i>.tbl files.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Macro&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.DECLARE_ILIST"
          name="func.DECLARE_ILIST">DECLARE_ILIST</a>&nbsp;</td>

          <td>Create a presentation list with inline strings. Must be used
          after DECLARE_ILIST_STRS and DECLARE_LIST_NUMS. Appends
          &ldquo;List&rdquo; to the identifier.</td>
        </tr>

        <tr class="grey">
          <td><a id="func.DECLARE_ILIST_STRS"
          name="func.DECLARE_ILIST_STRS">DECLARE_ILIST_STRS</a>&nbsp;</td>

          <td>Create a null-terminated sequence of null-terminated strings,
          which are the descriptions matching the legal values specified with
          DECLARE_LIST_NUMS. Appends &ldquo;Strs&rdquo; to the identifier.</td>
        </tr>

        <tr>
          <td><a id="func.DECLARE_IMASK"
          name="func.DECLARE_IMASK">DECLARE_IMASK</a>&nbsp;</td>

          <td>Create a presentation mask with an inline string. Appends
          &ldquo;Mask&rdquo; to the identifier.</td>
        </tr>

        <tr class="grey">
          <td><a id="func.DECLARE_LIST"
          name="func.DECLARE_LIST">DECLARE_LIST</a>&nbsp;</td>

          <td>Create a presentation list with resource string IDs. Must be used
          after DECLARE_LIST_STRS and DECLARE_LIST_NUMS. Appends
          &ldquo;List&rdquo; to the identifier.</td>
        </tr>

        <tr>
          <td><a id="func.DECLARE_LIST_NUMS"
          name="func.DECLARE_LIST_NUMS">DECLARE_LIST_NUMS</a>&nbsp;</td>

          <td>Create a list of numbers that are the legal values for the field.
          Appends &ldquo;Nums&rdquo; to the identifier.</td>
        </tr>

        <tr class="grey">
          <td><a id="func.DECLARE_LIST_STRS"
          name="func.DECLARE_LIST_STRS">DECLARE_LIST_STRS</a>&nbsp;</td>

          <td>Create a list of string resource IDs, which are the descriptions
          matching the legal values specified with DECLARE_LIST_NUMS. Appends
          &ldquo;Strs&rdquo; to the identifier.</td>
        </tr>

        <tr>
          <td><a id="func.DECLARE_MASK"
          name="func.DECLARE_MASK">DECLARE_MASK</a>&nbsp;</td>

          <td>Create a presentation mask with a resource string ID. Appends
          &ldquo;Mask&rdquo; to the identifier.</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x123" name="x123">Logging Debug Information</a></h3>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Macro&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.REPORT_CALL_ERROR"
          name="func.REPORT_CALL_ERROR">REPORT_CALL_ERROR</a>&nbsp;</td>

          <td>Reports the code, file, and line at which a view error
          occurred$$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.REPORT_DBCALL_ERROR"
          name="func.REPORT_DBCALL_ERROR">REPORT_DBCALL_ERROR</a>&nbsp;</td>

          <td>Reports the code, file, and line at which a database error
          occurred$$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.REPORT_FIELD"
          name="func.REPORT_FIELD">REPORT_FIELD</a>&nbsp;</td>

          <td>Helper macro used below to report &quot;OPERATION
          VIEW.FIELD&quot;$$$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RVSPYINDENT"
          name="func.RVSPYINDENT">RVSPYINDENT</a>&nbsp;</td>

          <td>Changes the indentation level by a specified
          increment/decrement</td>
        </tr>

        <tr>
          <td><a id="func.RVSPYPRINT"
          name="func.RVSPYPRINT">RVSPYPRINT</a>&nbsp;</td>

          <td>$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.RVSPYTRACE"
          name="func.RVSPYTRACE">RVSPYTRACE</a>&nbsp;</td>

          <td>Writes a string to RVSPY and the debug monitor (if present) when
          ACCPAC_DEBUG macro symbol is defined. Displays NULL as
          &ldquo;&lt;null&gt;&rdquo;</td>
        </tr>

        <tr>
          <td><a id="func.VIEWASSERT"
          name="func.VIEWASSERT">VIEWASSERT</a>&nbsp;</td>

          <td>Tests the given expression. If FALSE, the assertion fails, and a
          message is written to RVSPY and the debug monitor (if present).</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x125" name="x125">x125 $$$$$$$$$$$$$</a></h3>

    <p>$$$$$$$$$$$ Checking of return codes. Their use permits you to structure
    code to have a largely linear flow, such that if you reach a certain point
    you are guaranteed no errors have occurred. Thus you can avoid if/else
    constructs, and especially their nesting, which can quickly complicate
    logic. For an example refer below to the comments on the viewGet/viewPut
    helper macros.</p>

    <p>Accumulate error status,</p>

    <h4><a id="x129" name="x129">x129 $$$$$$$$$$$$$</a></h4>

    <p>$$$$$$$$$$$ Checking of return codes.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Macro&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.CHECK_CALL"
          name="func.CHECK_CALL">CHECK_CALL</a>&nbsp;</td>

          <td>return it if in error$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.CHECK_CALL_BOOLEAN"
          name="func.CHECK_CALL_BOOLEAN">CHECK_CALL_BOOLEAN</a>&nbsp;</td>

          <td>return FALSE if in error$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.CHECK_CALL_BREAK"
          name="func.CHECK_CALL_BREAK">CHECK_CALL_BREAK</a>&nbsp;</td>

          <td>break if in error$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.CHECK_CALL_GOTO"
          name="func.CHECK_CALL_GOTO">CHECK_CALL_GOTO</a>&nbsp;</td>

          <td>go to label if in error$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.CHECK_CALL_NOSTATUS"
          name="func.CHECK_CALL_NOSTATUS">CHECK_CALL_NOSTATUS</a>&nbsp;</td>

          <td>return if in error$$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x130" name="x130">x130 $$$$$$$$$$$$$</a></h4>

    <p>Checking of return codes for fetch or read calls. EOF is not considered
    an error in these cases.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Macro&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.CHECK_FETCH"
          name="func.CHECK_FETCH">CHECK_FETCH</a>&nbsp;</td>

          <td>return it if in error, and break loop if EOF$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.CHECK_FETCH_GOTO"
          name="func.CHECK_FETCH_GOTO">CHECK_FETCH_GOTO</a>&nbsp;</td>

          <td>goto a label if in error, and break loop if EOF$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.CHECK_FETCH_IGNORE"
          name="func.CHECK_FETCH_IGNORE">CHECK_FETCH_IGNORE</a>&nbsp;</td>

          <td>return it if in error, and break loop if EOF$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.CHECK_FETCH_UNROLL"
          name="func.CHECK_FETCH_UNROLL">CHECK_FETCH_UNROLL</a>&nbsp;</td>

          <td>return it if in error, and set flag if !EOF$$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x131" name="x131">x131 $$$$$$$$$$$$$</a></h4>

    <p>$$$$$$$$$$$ Checking of return codes.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Macro&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.CHECK_DBCALL"
          name="func.CHECK_DBCALL">CHECK_DBCALL</a>&nbsp;</td>

          <td>return it if in error$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.CHECK_DBCALL_BOOLEAN"
          name="func.CHECK_DBCALL_BOOLEAN">CHECK_DBCALL_BOOLEAN</a>&nbsp;</td>

          <td>return FALSE if in error$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.CHECK_DBCALL_BREAK"
          name="func.CHECK_DBCALL_BREAK">CHECK_DBCALL_BREAK</a>&nbsp;</td>

          <td>break if in error&nbsp;</td>
        </tr>

        <tr class="grey">
          <td><a id="func.CHECK_DBCALL_GOTO"
          name="func.CHECK_DBCALL_GOTO">CHECK_DBCALL_GOTO</a>&nbsp;</td>

          <td>go to label if in error$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.CHECK_DBCALL_NOSTATUS"
          name="func.CHECK_DBCALL_NOSTATUS">CHECK_DBCALL_NOSTATUS</a>&nbsp;</td>

          <td>return if in error$$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x132" name="x132">x132 $$$$$$$$$$$$$</a></h4>

    <p>Checking of return codes for fetch or read calls. EOF is not considered
    an error in these cases.</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Macro&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.CHECK_DBFETCH"
          name="func.CHECK_DBFETCH">CHECK_DBFETCH</a>&nbsp;</td>

          <td>return it if in error, and break loop if EOF$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.CHECK_DBFETCH_UNROLL"
          name="func.CHECK_DBFETCH_UNROLL">CHECK_DBFETCH_UNROLL</a>&nbsp;</td>

          <td>return it if in error, and set flag if !EOF$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.CHECK_DBFETCH_GOTO"
          name="func.CHECK_DBFETCH_GOTO">CHECK_DBFETCH_GOTO</a>&nbsp;</td>

          <td>goto label if in error, and break loop if EOF$$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x126" name="x126">x126</a></h3>

    <p>$$$$$$$$$$$$$$$$</p>

    <p>viewGet and viewPut usage aids. Pseudo-prototypes are given before each.
    The &quot;token&quot; type is a C token used by the preprocessor for
    pasting. The intent of these macros is 3-fold:</p>

    <ol>
      <li>to let you write put/get calls as 1-liners, simplifying
      maintenance</li>

      <li>to be type-safe, thereby letting the compiler help you</li>

      <li>add helpful information to the RVSPY log naming the field and
      operation</li>
    </ol>

    <p>For example, in combination with the return checking macros, the
    following expression:</p>
<pre style="font-size: 95%;">
CHECK_CALL (e, VIEW_GET_BOOLEAN (BKACCT, MULTICUR, bkacct, multicur));
</pre>

    <p>when compiled for debugging expands (approximately) to:</p>
<pre style="font-size: 95%;">
{
   ReportString (&quot;VIEW_GET_BOOLEAN(BKACCT.MULTICUR)&quot;);
   {
      ERRNUM _e_ = viewGetBoolean (bkacct-&gt;rvh, bkacct-&gt;view, BKACCT_IDX(MULTICUR), &amp;multicur);

      if ( !(_e_==0 &amp;&amp; (e==0 || (e&lt;0 || e==10))) )
         e = _e_;
   }
   if ( e&gt;0 &amp;&amp; e!=10 ) {
      rvspyPrint (&quot;ERRNUM #%d IN &#39;%s&#39; LINE #%d EXECUTING &#39;%s&#39;&quot;,
                  e, &quot;BKCHK1.C&quot;, 526,
                  &quot;viewGetBoolean (bkacct-&gt;rvh, bkacct-&gt;view, BKACCT_IDX(MULTICUR), &amp;multicur)&quot;);
      return e;
   }
}
</pre>

    <p>or when compiled for release expands (approximately) to:</p>
<pre style="font-size: 95%;">
{
   ERRNUM _e_ = viewGetBoolean (bkacct-&gt;rvh, bkacct-&gt;view, BKACCT_IDX(MULTICUR), &amp;multicur);

   if ( !(_e_==0 &amp;&amp; (e==0 || (e&lt;0 || e==10))) )
      e = _e_;
}
if ( e&gt;0 &amp;&amp; e!=10 ) {
   return e;
}
</pre>

    <h4><a id="x127" name="x127">x127</a></h4>

    <p>$$$$$$$$$$$$$$$$</p>

    <p>viewGet and viewPut usage aids. Pseudo-prototypes are given before each.
    The &quot;token&quot; type is a C token used by the preprocessor for
    pasting. The intent of these macros is 3-fold:</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Macro&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.VIEW_GET"
          name="func.VIEW_GET">VIEW_GET</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.VIEW_GET_BOOLEAN"
          name="func.VIEW_GET_BOOLEAN">VIEW_GET_BOOLEAN</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.VIEW_GET_INTEGER"
          name="func.VIEW_GET_INTEGER">VIEW_GET_INTEGER</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.VIEW_GET_LONG"
          name="func.VIEW_GET_LONG">VIEW_GET_LONG</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.VIEW_GET_REAL"
          name="func.VIEW_GET_REAL">VIEW_GET_REAL</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.VIEW_GET_STRING"
          name="func.VIEW_GET_STRING">VIEW_GET_STRING</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.VIEW_PUT"
          name="func.VIEW_PUT">VIEW_PUT</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.VIEW_PUT_BOOLEAN"
          name="func.VIEW_PUT_BOOLEAN">VIEW_PUT_BOOLEAN</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.VIEW_PUT_INTEGER"
          name="func.VIEW_PUT_INTEGER">VIEW_PUT_INTEGER</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.VIEW_PUT_LONG"
          name="func.VIEW_PUT_LONG">VIEW_PUT_LONG</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.VIEW_PUT_REAL"
          name="func.VIEW_PUT_REAL">VIEW_PUT_REAL</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h4><a id="x128" name="x128">x128</a></h4>

    <p>$$$$$$$$$$$$$$$$</p>

    <p>viewGet and viewPut usage aids. Pseudo-prototypes are given before each.
    The &quot;token&quot; type is a C token used by the preprocessor for
    pasting. The intent of these macros is 3-fold:</p>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Macro&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.PARAM_GET"
          name="func.PARAM_GET">PARAM_GET</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.PARAM_GET_BOOLEAN"
          name="func.PARAM_GET_BOOLEAN">PARAM_GET_BOOLEAN</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.PARAM_GET_INTEGER"
          name="func.PARAM_GET_INTEGER">PARAM_GET_INTEGER</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.PARAM_GET_LONG"
          name="func.PARAM_GET_LONG">PARAM_GET_LONG</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.PARAM_GET_REAL"
          name="func.PARAM_GET_REAL">PARAM_GET_REAL</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.PARAM_GET_STRING"
          name="func.PARAM_GET_STRING">PARAM_GET_STRING</a>&nbsp;</td>

          <td>$$$$$$$$$$$$$</td>
        </tr>
      </tbody>
    </table>

    <h3><a id="x121" name="x121">Miscellaneous</a></h3>

    <table border="0" cellpadding="2" cellspacing="0">
      <thead>
        <tr class="grey">
          <td class="head">Macro&nbsp;</td>

          <td class="head">Description</td>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td><a id="func.ELEMENTS_OF"
          name="func.ELEMENTS_OF">ELEMENTS_OF</a>&nbsp;</td>

          <td>Determine the number of elements of an array. Does not work with
          a pointer to an array.$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.IDXIDX" name="func.IDXIDX">IDXIDX</a>&nbsp;</td>

          <td>Extracts the subscript into field information arrays from a view
          field index</td>
        </tr>

        <tr>
          <td><a id="func.LIMIT_FIELD"
          name="func.LIMIT_FIELD">LIMIT_FIELD</a>&nbsp;</td>

          <td>Helper macro used to find the buffer size. It tries to use
          sizeof(), but if it looks like a pointer, then it uses the size
          constant$$$$$$$$$$$</td>
        </tr>

        <tr class="grey">
          <td><a id="func.LIMIT_STRING_FIELD"
          name="func.LIMIT_STRING_FIELD">LIMIT_STRING_FIELD</a>&nbsp;</td>

          <td>Same as LIMIT_FIELD, except it assumes the buffer is 1 character
          longer than the actual datum, in order to receive a NULL-terminated
          string$$$$$$$$$$$</td>
        </tr>

        <tr>
          <td><a id="func.MAKE_OP_RSC"
          name="func.MAKE_OP_RSC">MAKE_OP_RSC</a>&nbsp;</td>

          <td>Returns the string resource ID describing the view operation</td>
        </tr>

        <tr class="grey">
          <td><a id="func.MAKEIDX" name="func.MAKEIDX">MAKEIDX</a>&nbsp;</td>

          <td>Builds the view field index from a subscript into field
          information arrays</td>
        </tr>

        <tr>
          <td><a id="func.VIEW_OP" name="func.VIEW_OP">VIEW_OP</a>&nbsp;</td>

          <td>Returns the view operation from the view handle, or the given
          default if it is not yet recorded</td>
        </tr>
      </tbody>
    </table>
  </body>
</html>


