@* Copyright (c) 1994-2019 Sage Software, Inc.  All rights reserved. *@

@using Sage.CA.SBS.ERP.Sage300.Common.Models.Portal;
@using Sage.CA.SBS.ERP.Sage300.Common.Web.HtmlHelperExtension;
@using Sage.CA.SBS.ERP.Sage300.Web.Models
@using Sage.CA.SBS.ERP.Sage300.Common.Web.Utilities;
@using System.Collections;

@model List<NavigableMenuViewModel<NavigableMenu>>

@Scripts.Render()

@{
    //Home page key constant
    const string homepageKey = "101";

    //screen url is not available
    const string notAvailable = "N/A";

    //Get Domain URL according to the enviorment and user
    var domainUrl = (Request.ApplicationPath != "/" ? Request.ApplicationPath : string.Empty) + Utilities.GetUrlPrefix(ViewBag.SessionId);

    //Prepare menu items collections
    var level2Items = Model.Where(m => m.Data.MenuItemLevel == 2).ToList();
    var level3Items = Model.Where(m => m.Data.MenuItemLevel == 3).ToList();
    var level4Items = Model.Where(m => m.Data.MenuItemLevel == 4).ToList();
    var level5Items = Model.Where(m => m.Data.MenuItemLevel == 5).ToList();
    var level6Items = Model.Where(m => m.Data.MenuItemLevel == 6).ToList();

    var firstItem = true;
}

@*Rendering Menu*@

@foreach (var level2Item in level2Items.Where(m => m.Data.ParentMenuId == homepageKey).OrderBy(m => m.Data.MenuItemOrder))
{
    firstItem = true;
    @*2nd Level Menu: Start*@
    var level2ItemId = level2Item.Data.MenuId;
    var iconName = level2Item.Data.IconName;
    var bgImageName = level2Item.Data.MenuBackGoundImage;
    var iconPath = Path.Combine("../../../Content/Images/nav/", iconName);
    <li class="menu-item top-tier menu-core" id="@level2Item.Data.MenuName">
        <div class="nav-icon">
            <img src=@iconPath width="20" height="20">
        </div>
        <a data-menuid='@level2Item.Data.MenuId'> @level2Item.Data.MenuName </a>
        <ul class="std-menu">
            <li class="sub-heading">@level2Item.Data.MenuName</li>
            @foreach (var level3Item in level3Items.Where(m => m.Data.ParentMenuId == level2ItemId).OrderBy(m => m.Data.MenuItemOrder))
            {
                Stack menuStack = new Stack();
                menuStack.Push(level6Items);
                menuStack.Push(level5Items);
                menuStack.Push(level4Items);

                @CreateMenuGroup(level3Item, menuStack, notAvailable, domainUrl, firstItem);

                firstItem = false;
            }
        </ul>

    </li>
    @*2nd Level Menu: End*@
}

<script type="text/javascript">
    @Html.ConvertToJsVariableUsingNewtonSoft("MenuList", Model.OrderBy(m => m.Data.MenuItemOrder));
</script>

<script>
    var mainToolTip = null;
</script>

<script id="tooltipTemplate" type="text/x-kendo-template">
    <div class="template-wrapper">
        <p>#=$(target).siblings("a")[0].innerText#</p>
    </div>
</script>

@helper CreateMenuGroup(NavigableMenuViewModel<NavigableMenu> parentItem, Stack menuStack, string notAvailable, string domainUrl, bool firstItem)
{
    var parentItemId = parentItem.Data.MenuId;
    var parentItemClass = parentItem.Data.IsGroupEnd == true ? "menu-group" : "";
    var hasSubGroup = parentItem.Data.HasSubGroup.HasValue && parentItem.Data.HasSubGroup.Value;
    var nodeClass = firstItem ? "active" : (hasSubGroup ? "with-menu" : "");
    var childItems = (List<NavigableMenuViewModel<NavigableMenu>>) (menuStack.Count > 0 ? menuStack.Peek() : null);

    if (childItems == null)
    {
        return;
    }

    <li class="@parentItemClass">

        <a data-menuid='@parentItem.Data.MenuId' class="@nodeClass">
            @parentItem.Data.MenuName
        </a>

        @if (parentItem.Data.UseColGrouping)
        {
            var colGroupingList = childItems.Where(m => m.Data.ParentMenuId == parentItemId).GroupBy(m => m.Data.ColGrouping).Select(g => g.First().Data.ColGrouping);
            @:<div class="sub-menu-wrap">
                foreach (var currentColGrouping in colGroupingList)
                {
                    <div class="menu-section">
                        <ul>
                            @foreach (var item in childItems.Where(m => m.Data.ParentMenuId == parentItemId && m.Data.ColGrouping == currentColGrouping).OrderBy(m => m.Data.MenuItemOrder))
                            {
                                @CreateMenuItem(item, menuStack, notAvailable, domainUrl);
                            }
                        </ul>
                    </div>
                }
            @:</div>
        }
        else
        {
            <div class="sub-menu-wrap">
                <div class="menu-section">
                    <ul>
                        @foreach (var item in childItems.Where(m => m.Data.ParentMenuId == parentItemId).OrderBy(m => m.Data.MenuItemOrder))
                        {
                            @CreateMenuItem(item, menuStack, notAvailable, domainUrl)
                        }
                    </ul>
                </div>
            </div>
        }
    </li>
}

@helper CreateMenuItem(NavigableMenuViewModel<NavigableMenu> menuItem, Stack menuStack, string notAvailable, string domainUrl)
{
    if (menuItem.Data.HasSubGroup.HasValue && menuItem.Data.HasSubGroup.Value)
    {
        var subMenuStack = (Stack) menuStack.Clone();
        subMenuStack.Pop();
        @CreateMenuGroup(menuItem, subMenuStack, notAvailable, domainUrl, false);
    }
    else
    {
        if (menuItem.Data.IsGroupHeader == true)
        {

            <li class="sub-heading" data-menuid='@menuItem.Data.MenuId' data-modulename='@menuItem.Data.ModuleName'>
                @menuItem.Data.MenuName
            </li>
        }

        if (menuItem.Data.Isintelligence == true)
        {
            <li class="k-item">
                <a data-url='@menuItem.Data.ScreenUrl' data-menuid='@menuItem.Data.MenuId' data-isintelligence='@menuItem.Data.Isintelligence' data-modulename='@menuItem.Data.ModuleName'> @menuItem.Data.MenuName</a>
            </li>
        }
        if (menuItem.Data.IsGroupHeader == false && menuItem.Data.Isintelligence == false)
        {
            if (menuItem.Data.ScreenUrl == notAvailable)
            {
                <li class="k-item">
                    <a data-url='' data-menuid='@menuItem.Data.MenuId' data-parentid='@menuItem.Data.ParentMenuId' data-modulename='@menuItem.Data.ModuleName' data-isreport="@menuItem.Data.IsReport"> @menuItem.Data.MenuName</a>
                </li>
            }
            else
            {
                <li class="k-item">
                    <a data-url='@domainUrl@menuItem.Data.ScreenUrl' data-menuid='@menuItem.Data.MenuId' data-parentid='@menuItem.Data.ParentMenuId' data-modulename='@menuItem.Data.ModuleName' data-isreport="@menuItem.Data.IsReport"> @menuItem.Data.MenuName</a>
                </li>
            }
        }
    }
}
