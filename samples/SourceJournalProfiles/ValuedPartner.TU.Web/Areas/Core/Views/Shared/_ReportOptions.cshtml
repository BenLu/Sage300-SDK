@* Copyright (c) 1994-2020 Sage Software, Inc.  All rights reserved. *@

@using Sage.CA.SBS.ERP.Sage300.Common.Resources.Portal;
@using Sage.CA.SBS.ERP.Sage300.Common.Models.Enums
@using Sage.CA.SBS.ERP.Sage300.Common.Resources
@using Sage.CA.SBS.ERP.Sage300.Common.Web.HtmlHelperExtension
@using Sage.CA.SBS.ERP.Sage300.Common.Web.AreaConstants
@using Sage.CA.SBS.ERP.Sage300.Common.Web.Utilities
@using Sage.CA.SBS.ERP.Sage300.Common.Interfaces.Service.Base
@using Sage.CA.SBS.ERP.Sage300.Common.Utilities
@using System.Reflection

@{
    var screenName = ViewContext.Controller.GetType().BaseType.GetProperty("ScreenFormName", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(ViewContext.Controller);
    var context = ViewContext.Controller.GetType().GetProperty("Context", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(ViewContext.Controller) as Sage.CA.SBS.ERP.Sage300.Common.Models.Context;
    var service = Utilities.Resolve<ICommonService>(context);
    var formSizePrefix = "localScreenFormSizeKey_";
    var localScreenFormSizePreference = service.GetScreenLevelUserPreference(formSizePrefix + screenName);
    var localScreenFormSizeKey = formSizePrefix + screenName;
}

<div class="options-menu">
    <ul id="menuScreenOptions">
        <li class="btn-screen-options">
            <a>@CommonResx.Options<span class="arrow-grey"></span></a>
            <ul class="sub-menu">
                <li><a id="btnSaveUserPreference">@CommonResx.SaveSettings</a></li>
                <li><a id="btnClearUserPreference">@CommonResx.ClearSavedSettings</a></li>
                <li class="menu-with-submenu">
                    <a id="btnFormSizeUILevel">@NavigationResx.TextSize</a>
                    <ul class="sub-menu" id="menuOptionsTextSize">
                        <li id="btnFormSizeUILevelLarge"><a class="" id="labelFormSizeUILevelLarge" onclick="sg.utls.localFormSizeHandler(this, 'large', '@localScreenFormSizeKey')">@NavigationResx.Large</a></li>
                        <li id="btnFormSizeUILevelMedium"><a class="" id="labelFormSizeUILevelMedium" onclick="sg.utls.localFormSizeHandler(this, 'medium', '@localScreenFormSizeKey')">@NavigationResx.Medium</a></li>
                        <li id="btnFormSizeUILevelSmall"><a class="" id="labelFormSizeUILevelSmall" onclick="sg.utls.localFormSizeHandler(this, 'small', '@localScreenFormSizeKey')">@NavigationResx.Small</a></li>
                    </ul>
                </li>
            </ul>
        </li>
    </ul>
</div>

<script>
        var currentScreenName = '@screenName';
        var localScreenFormSizeKey = '@localScreenFormSizeKey';
        var localScreenFormSizePreference = '@localScreenFormSizePreference';

        $(function () {
            function setFormSize(size) {
                var targetId = 'labelFormSizeUILevelLarge';
                switch (size) {
                    case "large":
                        targetId = 'labelFormSizeUILevelLarge'; break;
                    case "medium":
                        targetId = 'labelFormSizeUILevelMedium'; break;
                    case "small":
                        targetId = 'labelFormSizeUILevelSmall'; break;
                }

                sg.utls.localFormSizeHandler($("#" + targetId)[0], size, localScreenFormSizeKey, true);
                //$("#" + targetId).trigger("click");
            }

            if (sessionStorage["productId"] === "CRM") {
                $(".options-menu .sub-menu .menu-with-submenu").remove();
            } else {
                if (localScreenFormSizePreference !== '' && localScreenFormSizePreference) {
                    // now localScreenFormSizePreference should be either large, medium, small ...
                    $("HTML").attr(sg.utls.localFormSizeDataTag, localScreenFormSizePreference);
                    setFormSize(localScreenFormSizePreference);
                } else {
                    if (sg.utls.isSameOrigin()) { //Prevent iFrame cross domain issues, like access screens from CRM
                        // User global level
                        if (window.top.formSizeUserPreferenceKey) {
                            sg.utls.getUserPreferences(window.top.formSizeUserPreferenceKey, function (result) {
                                setFormSize(result);
                            });
                        } else {
                            console.debug("Standalone mode? Missing value of window.top.formSizeUserPreferenceKey: " + window.top.formSizeUserPreferenceKey);
                        }
                    }
                }
            }
    });

    $(document).ready(function () {
        $("#menuScreenOptions").kendoMenu({
            openOnClick: true
        });

        let menu = $("#menuScreenOptions").data("kendoMenu");
            menu.bind("select", function(e) {
                let target = $(e.item).children('.k-link');
                if (target.length > 0) {
                    if (target.children().length > 0) {
                        target = target.children(0);
                    }

                    if (e.sender._keyTriggered && !target.prop('disabled')) {
                        target.triggerHandler("click");
                    }
                }
            }); 
    });

</script>
