@* Copyright (c) 1994-2020 Sage Software, Inc.  All rights reserved. *@

@using Sage.CA.SBS.ERP.Sage300.Common.Models.Portal;
@using Sage.CA.SBS.ERP.Sage300.Common.Web.HtmlHelperExtension;
@using Sage.CA.SBS.ERP.Sage300.Web.Models
@using Sage.CA.SBS.ERP.Sage300.Common.Web.Utilities;
@using Sage.CA.SBS.ERP.Sage300.Common.Resources.Portal
@using System.Collections;

@model List<NavigableMenuViewModel<NavigableMenu>>

@Scripts.Render()

@functions {
    public static string GetMenuClassName(string menuId)
    {
        switch (menuId)
        {
            default: return string.Empty;
        }
    }
}

@{
    //Home page key constant
    const string homepageKey = "101";

    //screen url is not available
    const string notAvailable = "N/A";

    //Get Domain URL according to the enviorment and user
    var domainUrl = (Request.ApplicationPath != "/" ? Request.ApplicationPath : string.Empty) + Utilities.GetUrlPrefix(ViewBag.SessionId);

    //Prepare menu items collections
    var level2Items = Model.Where(m => m.Data.MenuItemLevel == 2).ToList();
    var level3Items = Model.Where(m => m.Data.MenuItemLevel == 3).ToList();
    var level4Items = Model.Where(m => m.Data.MenuItemLevel == 4).ToList();
    var level5Items = Model.Where(m => m.Data.MenuItemLevel == 5).ToList();
    var level6Items = Model.Where(m => m.Data.MenuItemLevel == 6).ToList();

    var itemIndex = 0;
    var firstItem = true;
}

@*Rendering Menu*@

@foreach (var level2Item in level2Items.Where(m => m.Data.ParentMenuId == homepageKey).OrderBy(m => m.Data.MenuItemOrder))
{
    if (level2Item.Data.Isintelligence.HasValue && level2Item.Data.Isintelligence.Value)
    {
        <li class="menu-item top-tier menu-ir" id="SIR">
            <div class="nav-icon"><img src="../../../Content/Images/nav/SIRC/icon_sirc.svg" width="20" height="20"></div>
            <a>@NavigationResx.SIR_Msg1</a>
            <ul class="std-menu">
                <li class="feature-menu-header">
                    <span class="logo"></span><span>@NavigationResx.SIR_Msg2</span>
                </li>
                @if (ViewBag.IsSIRCEnable == true)
                {
                    <li class="feature-menu-content">
                        <h2>@NavigationResx.SIR_Msg3</h2>
                        <p>@NavigationResx.SIR_Msg4</p>
                        <p><input class="btn btn-accent" id="btnIntelligence" name="btnIntelligence" type="button" value="@NavigationResx.SIR_Btn"></p>
                    </li>
                }
                <hr>
                <li class="feature-menu-content">
                    <div class="logo-sda"><img src="../../../Content/Images/nav/logo_sda.png" width="156" height="24" alt="@NavigationResx.SIR_SDAMsg1"></div>
                    <p>@NavigationResx.SIR_SDAMsg2</p>
                    <p><input class="btn btn-accent" id="btnSDA" name="btnSDA" type="button" value="@NavigationResx.SIR_Btn"></p>
                </li>
            </ul>
        </li>
    }
    else if (level2Item.Data.IsRootItem.HasValue && level2Item.Data.IsRootItem.Value && !string.IsNullOrEmpty(level2Item.Data.Content))
    {
        string menuLabel = null;
        string iconPath = null;
        string dualEmployeeTCParameter = "?dualEmployeeTC=false";

        if (!(ViewBag.IsCATimeCardEnable == true && ViewBag.IsUSTimeCardEnable == true))
        {
            menuLabel = NavigationResx.PR_EmployeeTimeCard;
            iconPath = @"..\..\..\Content\Images\nav\PR\icon_timecard.svg";
        }
        else
        {
            dualEmployeeTCParameter = "?dualEmployeeTC=true";
        }

        if (ViewBag.IsCATimeCardEnable == true && level2Item.Data.ScreenUrl == "PR/EmployeeTimecard/Index/1")
        {
            @CreatePayRollMenu(level2Item.Data.Content, menuLabel ?? NavigationResx.PR_EmployeeTimeCard_CA, Request.Url.Segments, level2Item.Data.ScreenUrl, dualEmployeeTCParameter, iconPath ?? @"..\..\..\Content\Images\nav\PR\icon_timecard_canada.svg")
        }
        else if (ViewBag.IsUSTimeCardEnable == true && level2Item.Data.ScreenUrl == "PR/EmployeeTimecard/Index/0")
        {
            @CreatePayRollMenu(level2Item.Data.Content, menuLabel ?? NavigationResx.PR_EmployeeTimeCard_US, Request.Url.Segments, level2Item.Data.ScreenUrl, dualEmployeeTCParameter, iconPath ?? @"..\..\..\Content\Images\nav\PR\icon_timecard_us.svg")
        }
    }
    else
    {
        itemIndex++;
        @*2nd Level Menu: Start*@
        var relativePath = "../../../External/Content/Images/nav/";
        var level2Data = level2Item.Data;
        var iconPath = Path.Combine(relativePath, level2Data.IconName);
        if (!File.Exists(Server.MapPath(iconPath)))
        {
            iconPath = Path.Combine(relativePath, "default_icon.svg");
        }
        var level2ItemId = level2Data.MenuId;
        var level2ItemName = level2Data.MenuName;
        firstItem = true;
        <li class="menu-item top-tier menu-sdk" title="@level2ItemName">
            <div class="nav-icon">
                <img src=@iconPath width="20" height="20">
            </div>
            <a>@level2ItemName</a>
            <ul class="std-menu">
                <li class="sub-heading">@level2ItemName</li>
                @foreach (var level3Item in level3Items.Where(m => m.Data.ParentMenuId == level2ItemId).OrderBy(m => m.Data.MenuItemOrder))
                {
                    Stack menuStack = new Stack();
                    menuStack.Push(level6Items);
                    menuStack.Push(level5Items);
                    menuStack.Push(level4Items);

                    @CreateMenuGroup(level3Item, menuStack, notAvailable, domainUrl, firstItem);
                    firstItem = false;
                }
            </ul>
        </li>
        @*2nd Level Menu: End*@
    }
}

<script type="text/javascript">
    @Html.ConvertToJsVariableUsingNewtonSoft("PluginMenuList", Model.OrderBy(m => m.Data.MenuItemOrder));
</script>

@helper CreatePayRollMenu(string content, string label, string[] urlSegments, string screenUrl, string parameter, string iconPath)
{
    @Html.Raw(HttpUtility.HtmlDecode(
        string.Format(content, label, string.Join(string.Empty, urlSegments, 0, 4) + screenUrl + parameter, iconPath)));
}

@helper CreateMenuGroup(NavigableMenuViewModel<NavigableMenu> parentItem, Stack menuStack, string notAvailable, string domainUrl, bool firstItem)
{
    var parentItemId = parentItem.Data.MenuId;
    var parentItemClass = parentItem.Data.IsGroupEnd == true ? "menu-group" : "";
    var hasSubGroup = parentItem.Data.HasSubGroup.HasValue && parentItem.Data.HasSubGroup.Value;
    var nodeClass = firstItem ? "active" : (hasSubGroup ? "with-menu" : "");
    var childItems = (List<NavigableMenuViewModel<NavigableMenu>>) (menuStack.Count > 0 ? menuStack.Peek() : null);

    if (childItems == null)
    {
        return;
    }
    <li class="@parentItemClass">
        <a data-menuid='@parentItem.Data.MenuId' class="@nodeClass">
            @parentItem.Data.MenuName
            @if (parentItem.Data.IsReport == true)
            {
                <span class="icon-report"></span>
            }
        </a>

        @if (parentItem.Data.UseColGrouping)
        {
            var colGroupingList = childItems.Where(m => m.Data.ParentMenuId == parentItemId).GroupBy(m => m.Data.ColGrouping).Select(g => g.First().Data.ColGrouping);
            @:<div class="sub-menu-wrap" style="background-image: none">
                foreach (var currentColGrouping in colGroupingList)
                {
                    <div class="menu-section">
                        <ul>
                            @foreach (var childItem in childItems.Where(m => m.Data.ParentMenuId == parentItemId && m.Data.ColGrouping == currentColGrouping).OrderBy(m => m.Data.MenuItemOrder))
                            {
                                @CreateMenuItem(childItem, menuStack, notAvailable, domainUrl);
                            }
                        </ul>
                    </div>
                }
            @:</div>
        }
        else
        {
            <div class="sub-menu-wrap">
                <div class="menu-section">
                    <ul>
                        @foreach (var childItem in childItems.Where(m => m.Data.ParentMenuId == parentItemId).OrderBy(m => m.Data.MenuItemOrder))
                        {
                            @CreateMenuItem(childItem, menuStack, notAvailable, domainUrl)
                        }
                    </ul>
                </div>
            </div>
        }
    </li>
}

@helper CreateMenuItem(NavigableMenuViewModel<NavigableMenu> menuItem, Stack menuStack, string notAvailable, string domainUrl)
{
    if (menuItem.Data.HasSubGroup.HasValue && menuItem.Data.HasSubGroup.Value)
    {
        var subMenuStack = (Stack) menuStack.Clone();
        subMenuStack.Pop();
        @CreateMenuGroup(menuItem, subMenuStack, notAvailable, domainUrl, false);
    }
    else
    {
        if (menuItem.Data.IsGroupHeader == true)
        {

            <li class="sub-heading" data-menuid='@menuItem.Data.MenuId' data-modulename='@menuItem.Data.ModuleName'>
                @menuItem.Data.MenuName
            </li>
        }

        if (menuItem.Data.Isintelligence == true)
        {
            <li class="k-item">
                <a data-url='@menuItem.Data.ScreenUrl' data-menuid='@menuItem.Data.MenuId' data-isintelligence='@menuItem.Data.Isintelligence' data-modulename='@menuItem.Data.ModuleName'> @menuItem.Data.MenuName</a>
            </li>
        }
        if (menuItem.Data.IsGroupHeader == false && menuItem.Data.Isintelligence == false)
        {
            if (menuItem.Data.ScreenUrl == notAvailable)
            {
                <li class="k-item">
                    <a data-url='' data-menuid='@menuItem.Data.MenuId' data-parentid='@menuItem.Data.ParentMenuId' data-modulename='@menuItem.Data.ModuleName' data-isreport="@menuItem.Data.IsReport"> @menuItem.Data.MenuName</a>
                </li>
            }
            else
            {
                <li class="k-item">
                    <a data-url='@domainUrl@menuItem.Data.ScreenUrl' data-menuid='@menuItem.Data.MenuId' data-parentid='@menuItem.Data.ParentMenuId' data-modulename='@menuItem.Data.ModuleName' data-isreport="@menuItem.Data.IsReport"> @menuItem.Data.MenuName</a>
                </li>
            }
        }
    }
}
