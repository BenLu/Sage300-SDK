<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Approved" xml:space="preserve">
    <value>Approved</value>
  </data>
  <data name="ApprovedAt" xml:space="preserve">
    <value>Approved At</value>
  </data>
  <data name="ApprovedBy" xml:space="preserve">
    <value>Approved By</value>
  </data>
  <data name="ApprovedOn" xml:space="preserve">
    <value>Approved On</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="CategoryDescription" xml:space="preserve">
    <value>Category Description</value>
  </data>
  <data name="Comments" xml:space="preserve">
    <value>Comments</value>
  </data>
  <data name="Contract" xml:space="preserve">
    <value>Contract</value>
  </data>
  <data name="ContractDescription" xml:space="preserve">
    <value>Contract Description</value>
  </data>
  <data name="CreatedAt" xml:space="preserve">
    <value>Created At</value>
  </data>
  <data name="CreatedBy" xml:space="preserve">
    <value>Created By</value>
  </data>
  <data name="CreatedOn" xml:space="preserve">
    <value>Created On</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DetailUpdateRetainage" xml:space="preserve">
    <value>Update Retainage Details</value>
  </data>
  <data name="Entered" xml:space="preserve">
    <value>Entered</value>
  </data>
  <data name="EnteredBy" xml:space="preserve">
    <value>Entered By</value>
  </data>
  <data name="Entity" xml:space="preserve">
    <value>PJC Update Retainage</value>
  </data>
  <data name="False" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="FiscalPeriod" xml:space="preserve">
    <value>Fiscal Period</value>
  </data>
  <data name="FiscalYear" xml:space="preserve">
    <value>Fiscal Year</value>
  </data>
  <data name="Generated" xml:space="preserve">
    <value>Generated</value>
  </data>
  <data name="Imported" xml:space="preserve">
    <value>Imported</value>
  </data>
  <data name="InvoiceRetainagePayable" xml:space="preserve">
    <value>Invoice Retainage Payable</value>
  </data>
  <data name="InvoiceRetainageReceivable" xml:space="preserve">
    <value>Invoice Retainage Receivable</value>
  </data>
  <data name="LineNumber" xml:space="preserve">
    <value>Line Number</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="NextDetailNumber" xml:space="preserve">
    <value>Next Detail Number</value>
  </data>
  <data name="Num1" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="Num10" xml:space="preserve">
    <value>10</value>
  </data>
  <data name="Num11" xml:space="preserve">
    <value>11</value>
  </data>
  <data name="Num12" xml:space="preserve">
    <value>12</value>
  </data>
  <data name="Num13" xml:space="preserve">
    <value>13</value>
  </data>
  <data name="Num2" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="Num3" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="Num4" xml:space="preserve">
    <value>4</value>
  </data>
  <data name="Num5" xml:space="preserve">
    <value>5</value>
  </data>
  <data name="Num6" xml:space="preserve">
    <value>6</value>
  </data>
  <data name="Num7" xml:space="preserve">
    <value>7</value>
  </data>
  <data name="Num8" xml:space="preserve">
    <value>8</value>
  </data>
  <data name="Num9" xml:space="preserve">
    <value>9</value>
  </data>
  <data name="NumberOfDetails" xml:space="preserve">
    <value>Number of Details</value>
  </data>
  <data name="OpeningRetainagePayable" xml:space="preserve">
    <value>Opening Retainage Payable</value>
  </data>
  <data name="OpeningRetainageReceivable" xml:space="preserve">
    <value>Opening Retainage Receivable</value>
  </data>
  <data name="OriginalDocumentNumber" xml:space="preserve">
    <value>Original Document Number</value>
  </data>
  <data name="Posted" xml:space="preserve">
    <value>Posted</value>
  </data>
  <data name="PostedAt" xml:space="preserve">
    <value>Posted At</value>
  </data>
  <data name="PostedBy" xml:space="preserve">
    <value>Posted By</value>
  </data>
  <data name="PostedOn" xml:space="preserve">
    <value>Posted On</value>
  </data>
  <data name="PostingDate" xml:space="preserve">
    <value>Posting Date</value>
  </data>
  <data name="PostingDateOverrideTitle" xml:space="preserve">
    <value>Posting Date Override</value>
  </data>
  <data name="Printed" xml:space="preserve">
    <value>Printed</value>
  </data>
  <data name="Project" xml:space="preserve">
    <value>Project</value>
  </data>
  <data name="ProjectDescription" xml:space="preserve">
    <value>Project Description</value>
  </data>
  <data name="Reference" xml:space="preserve">
    <value>Reference</value>
  </data>
  <data name="RetainageAmount" xml:space="preserve">
    <value>Retainage Amount</value>
  </data>
  <data name="RetainageInvoiceAmount" xml:space="preserve">
    <value>Retainage Invoice Amount</value>
  </data>
  <data name="RetainageNumber" xml:space="preserve">
    <value>Retainage Number</value>
  </data>
  <data name="RetainagePayable" xml:space="preserve">
    <value>Retainage Payable</value>
  </data>
  <data name="RetainageReceivable" xml:space="preserve">
    <value>Retainage Receivable</value>
  </data>
  <data name="RetainageType" xml:space="preserve">
    <value>Retainage Type</value>
  </data>
  <data name="Sequence" xml:space="preserve">
    <value>Sequence</value>
  </data>
  <data name="ShowProgressBarDuringPosting" xml:space="preserve">
    <value>Show progress bar during posting</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="TransactionDate" xml:space="preserve">
    <value>Transaction Date</value>
  </data>
  <data name="TransactionStatus" xml:space="preserve">
    <value>Transaction Status</value>
  </data>
  <data name="True" xml:space="preserve">
    <value>True</value>
  </data>
</root>