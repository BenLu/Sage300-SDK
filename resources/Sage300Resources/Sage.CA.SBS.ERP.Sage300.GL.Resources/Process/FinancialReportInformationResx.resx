<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GetAddin" xml:space="preserve">
    <value>Get Add-in</value>
  </data>
  <data name="GetStartedText" xml:space="preserve">
    <value>Install the required add-in for Microsoft Excel, and then create your first financial statement!</value>
  </data>
  <data name="GetStartedTitle" xml:space="preserve">
    <value>Start Using Financial Reporter</value>
  </data>
  <data name="Modify" xml:space="preserve">
    <value>Modify</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="RenameStatement" xml:space="preserve">
    <value>Rename Statement</value>
  </data>
  <data name="AddUpdate" xml:space="preserve">
    <value>Add/Update</value>
  </data>
  <data name="CreateNewStatement" xml:space="preserve">
    <value>Create New Statement</value>
  </data>
  <data name="DeleteFile" xml:space="preserve">
    <value>Delete {0}?</value>
  </data>
  <data name="DontShowThisAgain" xml:space="preserve">
    <value>Don't show this again</value>
  </data>
  <data name="DuplicateStatementName" xml:space="preserve">
    <value>A statement with this name already exists. Specify a unique name for your statement.</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Entity" xml:space="preserve">
    <value>G/L Statement Designer</value>
  </data>
  <data name="FileHasBeenDownloaded" xml:space="preserve">
    <value>Statement "{0}" has been saved to your computer. Edit this statement in Microsoft Excel, and then click the Add/Update button to make your changes available for use.</value>
  </data>
  <data name="GetStarted" xml:space="preserve">
    <value>Get Started</value>
  </data>
  <data name="Modified" xml:space="preserve">
    <value>Modified</value>
  </data>
  <data name="NameYourNewStatement" xml:space="preserve">
    <value>Name Your New Statement</value>
  </data>
  <data name="OldName" xml:space="preserve">
    <value>Old Name</value>
  </data>
  <data name="RelaceTheContent" xml:space="preserve">
    <value>Do you want to replace the report specification in statement "{0}" with the specification in file "{1}"?</value>
  </data>
  <data name="Rename" xml:space="preserve">
    <value>Rename</value>
  </data>
  <data name="StatementName" xml:space="preserve">
    <value>Statement Name</value>
  </data>
  <data name="Statements" xml:space="preserve">
    <value>Statements</value>
  </data>
  <data name="StatementUpdated" xml:space="preserve">
    <value>Statement {0} is updated and ready to use.</value>
    <comment>F</comment>
  </data>
  <data name="AccountGroup" xml:space="preserve">
    <value>Account Group</value>
  </data>
  <data name="AccountNumber" xml:space="preserve">
    <value>Account Number</value>
  </data>
  <data name="AccountSortedGroup" xml:space="preserve">
    <value>Account Sorted Group</value>
  </data>
  <data name="Actual" xml:space="preserve">
    <value>Actual</value>
  </data>
  <data name="Consolidated" xml:space="preserve">
    <value>Consolidated</value>
  </data>
  <data name="DrillDownInformation" xml:space="preserve">
    <value>DrillDown Information</value>
  </data>
  <data name="FiscalOption" xml:space="preserve">
    <value>Fiscal Option</value>
  </data>
  <data name="Include" xml:space="preserve">
    <value>Include</value>
  </data>
  <data name="PleaseinstallAddin" xml:space="preserve">
    <value>Please install Add-in to print financial statements.</value>
  </data>
  <data name="PrintFinancialStatements" xml:space="preserve">
    <value>G/L Print Financial Statements</value>
  </data>
  <data name="Provisional" xml:space="preserve">
    <value>Provisional</value>
  </data>
  <data name="ReportAs" xml:space="preserve">
    <value>Report As</value>
  </data>
  <data name="ReportOptions" xml:space="preserve">
    <value>Report Options</value>
  </data>
  <data name="ReportType" xml:space="preserve">
    <value>Report Type</value>
  </data>
  <data name="Segment" xml:space="preserve">
    <value>Segment</value>
  </data>
  <data name="SelectAccountGroupsBySortCodeRange" xml:space="preserve">
    <value>Select Account Groups by Sort Code Range</value>
  </data>
  <data name="Separate" xml:space="preserve">
    <value>Separate</value>
  </data>
  <data name="AccountNo" xml:space="preserve">
    <value>Account No.</value>
  </data>
  <data name="AuditInformation" xml:space="preserve">
    <value>Audit Information</value>
  </data>
  <data name="ErrorMessage_AccountRange" xml:space="preserve">
    <value>The entry in the From Account box cannot be greater than the entry in the To box.</value>
  </data>
  <data name="ErrorMessage_NoChartOfAccounts" xml:space="preserve">
    <value>Chart of accounts not established.</value>
  </data>
  <data name="ErrorMessage_Range" xml:space="preserve">
    <value>The entry in the From box cannot be greater than the entry in the To box.</value>
  </data>
  <data name="ErrorMessage_SegmentRange" xml:space="preserve">
    <value>The entry in the From Segment box cannot be greater than the entry in the To box.</value>
  </data>
  <data name="Formulas" xml:space="preserve">
    <value>Formulas</value>
  </data>
  <data name="FromAccountGroup" xml:space="preserve">
    <value>From Account Group</value>
  </data>
  <data name="FromSortCodeAccountGroup" xml:space="preserve">
    <value>From Sort Code - Account Group</value>
  </data>
  <data name="SegmentName" xml:space="preserve">
    <value>Segment Name</value>
  </data>
  <data name="SortBy" xml:space="preserve">
    <value>Sort By</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>G/L Financial Statement Designer</value>
  </data>
  <data name="ToAccountGroup" xml:space="preserve">
    <value>To Account Group</value>
  </data>
  <data name="FromAccountNumber" xml:space="preserve">
    <value>From Account Number</value>
  </data>
  <data name="ToAccountNumber" xml:space="preserve">
    <value>To Account Number</value>
  </data>
  <data name="GenerateStatement" xml:space="preserve">
    <value>Generate Statement</value>
  </data>
  <data name="ToSortCodeAccountGroup" xml:space="preserve">
    <value>To Sort Code - Account Group</value>
  </data>
  <data name="From" xml:space="preserve">
    <value>From {0}</value>
  </data>
  <data name="To" xml:space="preserve">
    <value>To {0}</value>
  </data>
  <data name="InvalidStatementName" xml:space="preserve">
    <value>Invailid Statement Name</value>
  </data>
</root>